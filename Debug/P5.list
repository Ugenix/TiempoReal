
P5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007030  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080071d0  080071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072ec  080072ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080072ec  080072ec  000172ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072f4  080072f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f4  080072f4  000172f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072f8  080072f8  000172f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080072fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac0  20000074  08007370  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b34  08007370  00024b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c71  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e4  00000000  00000000  00036d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00039e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b9e  00000000  00000000  0003c270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f95  00000000  00000000  00054e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e29a  00000000  00000000  0006bda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a03d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005270  00000000  00000000  0010a090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071b8 	.word	0x080071b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080071b8 	.word	0x080071b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;


uint8_t bcd2bin(uint8_t data){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	091b      	lsrs	r3, r3, #4
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	0092      	lsls	r2, r2, #2
 8000598:	4413      	add	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	b2da      	uxtb	r2, r3
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 030f 	and.w	r3, r3, #15
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4413      	add	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <bin2bcd>:

uint8_t bin2bcd(uint8_t data){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	return ((data/10)<<4)|(data%10);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <bin2bcd+0x44>)
 80005c6:	fba2 2303 	umull	r2, r3, r2, r3
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	b258      	sxtb	r0, r3
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <bin2bcd+0x44>)
 80005d6:	fba3 1302 	umull	r1, r3, r3, r2
 80005da:	08d9      	lsrs	r1, r3, #3
 80005dc:	460b      	mov	r3, r1
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	4303      	orrs	r3, r0
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	b2db      	uxtb	r3, r3
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	cccccccd 	.word	0xcccccccd

08000600 <rtc_write>:

	return data;
}

void rtc_write(uint8_t address,uint8_t data)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af04      	add	r7, sp, #16
 8000606:	4603      	mov	r3, r0
 8000608:	460a      	mov	r2, r1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	4613      	mov	r3, r2
 800060e:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,address,I2C_MEMADD_SIZE_8BIT,&data,1,100)!=HAL_OK){
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	b29a      	uxth	r2, r3
 8000614:	2364      	movs	r3, #100	; 0x64
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	2301      	movs	r3, #1
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	1dbb      	adds	r3, r7, #6
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2301      	movs	r3, #1
 8000622:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8000626:	4803      	ldr	r0, [pc, #12]	; (8000634 <rtc_write+0x34>)
 8000628:	f001 fdcc 	bl	80021c4 <HAL_I2C_Mem_Write>
		//_Error_Handler(__FILE__,__LINE__);
	}
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000d8 	.word	0x200000d8

08000638 <rtc_init>:

void rtc_init(uint8_t rs,uint8_t sqwe,uint8_t out)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	460b      	mov	r3, r1
 8000644:	71bb      	strb	r3, [r7, #6]
 8000646:	4613      	mov	r3, r2
 8000648:	717b      	strb	r3, [r7, #5]
	rs&=3;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f003 0303 	and.w	r3, r3, #3
 8000650:	71fb      	strb	r3, [r7, #7]
	if (sqwe) rs|=0x10;
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d003      	beq.n	8000660 <rtc_init+0x28>
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	71fb      	strb	r3, [r7, #7]
	if (out) rs|=0x80;
 8000660:	797b      	ldrb	r3, [r7, #5]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d003      	beq.n	800066e <rtc_init+0x36>
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800066c:	71fb      	strb	r3, [r7, #7]

	rtc_write(0x07,rs);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4619      	mov	r1, r3
 8000672:	2007      	movs	r0, #7
 8000674:	f7ff ffc4 	bl	8000600 <rtc_write>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <rtc_get_time>:

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af04      	add	r7, sp, #16
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 800068c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000690:	9302      	str	r3, [sp, #8]
 8000692:	2303      	movs	r3, #3
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	2200      	movs	r2, #0
 80006a0:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <rtc_get_time+0x64>)
 80006a6:	f001 fe87 	bl	80023b8 <HAL_I2C_Mem_Read>
		//_Error_Handler(__FILE__,__LINE__);
	}

	*sec=bcd2bin(data[0]);
 80006aa:	7d3b      	ldrb	r3, [r7, #20]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff69 	bl	8000584 <bcd2bin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 80006ba:	7d7b      	ldrb	r3, [r7, #21]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff61 	bl	8000584 <bcd2bin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 80006ca:	7dbb      	ldrb	r3, [r7, #22]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff59 	bl	8000584 <bcd2bin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	701a      	strb	r2, [r3, #0]
}
 80006da:	bf00      	nop
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000d8 	.word	0x200000d8

080006e8 <rtc_set_time>:

void rtc_set_time(uint8_t hour,uint8_t min,uint8_t sec)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af04      	add	r7, sp, #16
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	460b      	mov	r3, r1
 80006f4:	71bb      	strb	r3, [r7, #6]
 80006f6:	4613      	mov	r3, r2
 80006f8:	717b      	strb	r3, [r7, #5]
	uint8_t data[3]={bin2bcd(sec),bin2bcd(min),bin2bcd(hour)};
 80006fa:	797b      	ldrb	r3, [r7, #5]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff5b 	bl	80005b8 <bin2bcd>
 8000702:	4603      	mov	r3, r0
 8000704:	733b      	strb	r3, [r7, #12]
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff55 	bl	80005b8 <bin2bcd>
 800070e:	4603      	mov	r3, r0
 8000710:	737b      	strb	r3, [r7, #13]
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff4f 	bl	80005b8 <bin2bcd>
 800071a:	4603      	mov	r3, r0
 800071c:	73bb      	strb	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	2303      	movs	r3, #3
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	2200      	movs	r2, #0
 8000732:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8000736:	4803      	ldr	r0, [pc, #12]	; (8000744 <rtc_set_time+0x5c>)
 8000738:	f001 fd44 	bl	80021c4 <HAL_I2C_Mem_Write>
		//_Error_Handler(__FILE__,__LINE__);
	}
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000d8 	.word	0x200000d8

08000748 <rtc_get_date>:

void rtc_get_date(uint8_t *week_day,uint8_t *day,uint8_t *month,uint8_t *year)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af04      	add	r7, sp, #16
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	603b      	str	r3, [r7, #0]
	uint8_t data[4]={0,0,0,0};
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2304      	movs	r3, #4
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2301      	movs	r3, #1
 800076c:	2203      	movs	r2, #3
 800076e:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <rtc_get_date+0x70>)
 8000774:	f001 fe20 	bl	80023b8 <HAL_I2C_Mem_Read>
		//_Error_Handler(__FILE__,__LINE__);
	}

	*week_day=data[0];
 8000778:	7d3a      	ldrb	r2, [r7, #20]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	701a      	strb	r2, [r3, #0]
	*day=bcd2bin(data[1]);
 800077e:	7d7b      	ldrb	r3, [r7, #21]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff feff 	bl	8000584 <bcd2bin>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	701a      	strb	r2, [r3, #0]
	*month=bcd2bin(data[2]);
 800078e:	7dbb      	ldrb	r3, [r7, #22]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fef7 	bl	8000584 <bcd2bin>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	701a      	strb	r2, [r3, #0]
	*year=bcd2bin(data[3]);
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff feef 	bl	8000584 <bcd2bin>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	701a      	strb	r2, [r3, #0]
}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000d8 	.word	0x200000d8

080007bc <rtc_set_date>:

void rtc_set_date(uint8_t week_day,uint8_t day,uint8_t month,uint8_t year)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af04      	add	r7, sp, #16
 80007c2:	4604      	mov	r4, r0
 80007c4:	4608      	mov	r0, r1
 80007c6:	4611      	mov	r1, r2
 80007c8:	461a      	mov	r2, r3
 80007ca:	4623      	mov	r3, r4
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	4603      	mov	r3, r0
 80007d0:	71bb      	strb	r3, [r7, #6]
 80007d2:	460b      	mov	r3, r1
 80007d4:	717b      	strb	r3, [r7, #5]
 80007d6:	4613      	mov	r3, r2
 80007d8:	713b      	strb	r3, [r7, #4]
	uint8_t data[4]={week_day,bin2bcd(day),bin2bcd(month),bin2bcd(year)};
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	733b      	strb	r3, [r7, #12]
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fee9 	bl	80005b8 <bin2bcd>
 80007e6:	4603      	mov	r3, r0
 80007e8:	737b      	strb	r3, [r7, #13]
 80007ea:	797b      	ldrb	r3, [r7, #5]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fee3 	bl	80005b8 <bin2bcd>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73bb      	strb	r3, [r7, #14]
 80007f6:	793b      	ldrb	r3, [r7, #4]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fedd 	bl	80005b8 <bin2bcd>
 80007fe:	4603      	mov	r3, r0
 8000800:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 8000802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000806:	9302      	str	r3, [sp, #8]
 8000808:	2304      	movs	r3, #4
 800080a:	9301      	str	r3, [sp, #4]
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	2203      	movs	r2, #3
 8000816:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <rtc_set_date+0x6c>)
 800081c:	f001 fcd2 	bl	80021c4 <HAL_I2C_Mem_Write>
		//_Error_Handler(__FILE__,__LINE__);
	}
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bd90      	pop	{r4, r7, pc}
 8000828:	200000d8 	.word	0x200000d8

0800082c <lcd_begin>:
static void lcd_sendCmd(LCD_t *lcd, char cmd);
static void delay_us(uint16_t time);

/* Exported functions --------------------------------------------------------*/
//init lcd display
void lcd_begin(LCD_t *lcd, uint8_t cols, uint8_t rows, uint8_t dotsize) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af02      	add	r7, sp, #8
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	4608      	mov	r0, r1
 8000836:	4611      	mov	r1, r2
 8000838:	461a      	mov	r2, r3
 800083a:	4603      	mov	r3, r0
 800083c:	70fb      	strb	r3, [r7, #3]
 800083e:	460b      	mov	r3, r1
 8000840:	70bb      	strb	r3, [r7, #2]
 8000842:	4613      	mov	r3, r2
 8000844:	707b      	strb	r3, [r7, #1]
	// 4 bit initialization
	lcd->displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if (rows > 1) lcd->displayfunction |= LCD_2LINE;
 800084e:	78bb      	ldrb	r3, [r7, #2]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d908      	bls.n	8000866 <lcd_begin+0x3a>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	b2da      	uxtb	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	lcd->rows = rows;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	78ba      	ldrb	r2, [r7, #2]
 800086a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	lcd->cols = cols;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	78fa      	ldrb	r2, [r7, #3]
 8000872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	lcd_setRowOffsets(lcd, 0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000876:	78fa      	ldrb	r2, [r7, #3]
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	3340      	adds	r3, #64	; 0x40
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	4613      	mov	r3, r2
 8000880:	2240      	movs	r2, #64	; 0x40
 8000882:	2100      	movs	r1, #0
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 f8d3 	bl	8000a30 <lcd_setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (rows == 1)) {
 800088a:	787b      	ldrb	r3, [r7, #1]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00b      	beq.n	80008a8 <lcd_begin+0x7c>
 8000890:	78bb      	ldrb	r3, [r7, #2]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d108      	bne.n	80008a8 <lcd_begin+0x7c>
		lcd->displayfunction |= LCD_5x10DOTS;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}

	HAL_Delay(50);			// wait for >40ms
 80008a8:	2032      	movs	r0, #50	; 0x32
 80008aa:	f000 fe3d 	bl	8001528 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 80008ae:	2103      	movs	r1, #3
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 f957 	bl	8000b64 <lcd_sendCmd>
	HAL_Delay(5);			// wait for >4.1ms
 80008b6:	2005      	movs	r0, #5
 80008b8:	f000 fe36 	bl	8001528 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 80008bc:	2103      	movs	r1, #3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 f950 	bl	8000b64 <lcd_sendCmd>
	delay_us(150);			// wait for >100us
 80008c4:	2096      	movs	r0, #150	; 0x96
 80008c6:	f000 f96b 	bl	8000ba0 <delay_us>
	lcd_sendCmd(lcd, 0x03);
 80008ca:	2103      	movs	r1, #3
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f000 f949 	bl	8000b64 <lcd_sendCmd>
	lcd_sendCmd(lcd, 0x02);	//set 4 bit mode
 80008d2:	2102      	movs	r1, #2
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 f945 	bl	8000b64 <lcd_sendCmd>
	HAL_Delay(1);
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fe24 	bl	8001528 <HAL_Delay>

	// finally, set interface type, # lines and font size
	lcd_sendCmd(lcd, LCD_FUNCTIONSET | lcd->displayfunction);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80008e6:	f043 0320 	orr.w	r3, r3, #32
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4619      	mov	r1, r3
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 f938 	bl	8000b64 <lcd_sendCmd>
	//set display control D=1,C=0, B=0, display on, cursor off and cursor blink off
	lcd->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2204      	movs	r2, #4
 80008f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_display(lcd);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f000 f833 	bl	8000968 <lcd_display>
	lcd_clear(lcd);  // clear display
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f815 	bl	8000932 <lcd_clear>
	HAL_Delay(2);
 8000908:	2002      	movs	r0, #2
 800090a:	f000 fe0d 	bl	8001528 <HAL_Delay>
	// set the entry mode --> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2202      	movs	r2, #2
 8000912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd_sendCmd(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f000 f91d 	bl	8000b64 <lcd_sendCmd>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <lcd_clear>:
// ----------------------------------------------------------------

//clear lcd display
void lcd_clear(LCD_t *lcd) {
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_CLEARDISPLAY);
 800093a:	2101      	movs	r1, #1
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f911 	bl	8000b64 <lcd_sendCmd>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <lcd_home>:
// ----------------------------------------------------------------

// set cursor position to zero
void lcd_home(LCD_t *lcd) {
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_RETURNHOME);
 8000952:	2102      	movs	r1, #2
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 f905 	bl	8000b64 <lcd_sendCmd>
	HAL_Delay(2);	//delay >= 1.52ms
 800095a:	2002      	movs	r0, #2
 800095c:	f000 fde4 	bl	8001528 <HAL_Delay>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <lcd_display>:
}

// ----------------------------------------------------------------

// Turn the display on
void lcd_display(LCD_t *lcd) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_DISPLAYON;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	b2da      	uxtb	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4619      	mov	r1, r3
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f8e7 	bl	8000b64 <lcd_sendCmd>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <lcd_setCursor>:
}
/¡*/
// ----------------------------------------------------------------

//set cursor position
void lcd_setCursor(LCD_t *lcd, uint8_t col, uint8_t row) {
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	460b      	mov	r3, r1
 80009a8:	70fb      	strb	r3, [r7, #3]
 80009aa:	4613      	mov	r3, r2
 80009ac:	70bb      	strb	r3, [r7, #2]
	const size_t max_rows = sizeof(lcd->row_offsets) / sizeof(*lcd->row_offsets);
 80009ae:	2304      	movs	r3, #4
 80009b0:	60fb      	str	r3, [r7, #12]
	if (row >= max_rows) {
 80009b2:	78bb      	ldrb	r3, [r7, #2]
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d803      	bhi.n	80009c2 <lcd_setCursor+0x24>
		row = max_rows - 1;    // we count rows starting w/0
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3b01      	subs	r3, #1
 80009c0:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= lcd->rows) {
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80009c8:	78ba      	ldrb	r2, [r7, #2]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d304      	bcc.n	80009d8 <lcd_setCursor+0x3a>
		row = lcd->rows - 1;    // we count rows starting w/0
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80009d4:	3b01      	subs	r3, #1
 80009d6:	70bb      	strb	r3, [r7, #2]
	}

	lcd_sendCmd(lcd, LCD_SETDDRAMADDR | (col + lcd->row_offsets[row]));
 80009d8:	78bb      	ldrb	r3, [r7, #2]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	4413      	add	r3, r2
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4619      	mov	r1, r3
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 f8b5 	bl	8000b64 <lcd_sendCmd>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <lcd_print>:
// ----------------------------------------------------------------

//send strings to lcd
void lcd_print(LCD_t *lcd, char *str) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
	while (*str)
 8000a0c:	e007      	b.n	8000a1e <lcd_print+0x1c>
		lcd_sendData(lcd, *str++);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	603a      	str	r2, [r7, #0]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4619      	mov	r1, r3
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f886 	bl	8000b2a <lcd_sendData>
	while (*str)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1f3      	bne.n	8000a0e <lcd_print+0xc>
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <lcd_setRowOffsets>:
// ----------------------------------------------------------------

/* Privated functions --------------------------------------------------------*/
//set row offset for diferent display
static void lcd_setRowOffsets(LCD_t *lcd, int row0, int row1, int row2,
    int row3) {
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]
	lcd->row_offsets[0] = row0;
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	lcd->row_offsets[1] = row1;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	lcd->row_offsets[2] = row2;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	lcd->row_offsets[3] = row3;
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <lcd_send>:
// ----------------------------------------------------------------

//send info to lcd in 4 byte mode
static void lcd_send(LCD_t *lcd, char data, uint8_t rs) {
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	70fb      	strb	r3, [r7, #3]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	70bb      	strb	r3, [r7, #2]
	// rs = 1 for data, rs=0 for command
	HAL_GPIO_WritePin(lcd->RS_port, lcd->RS_pin, rs);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	889b      	ldrh	r3, [r3, #4]
 8000a8a:	78ba      	ldrb	r2, [r7, #2]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f001 fa3b 	bl	8001f08 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(lcd->D7_port, lcd->D7_pin, ((data >> 3) & 0x01));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	08db      	lsrs	r3, r3, #3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	f001 fa2e 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_port, lcd->D6_pin, ((data >> 2) & 0x01));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f001 fa21 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_port, lcd->D5_pin, ((data >> 1) & 0x01));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a18      	ldr	r0, [r3, #32]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8000ace:	78fb      	ldrb	r3, [r7, #3]
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	f001 fa14 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_port, lcd->D4_pin, ((data >> 0) & 0x01));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6998      	ldr	r0, [r3, #24]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	8b99      	ldrh	r1, [r3, #28]
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	f001 fa09 	bl	8001f08 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_SET);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6918      	ldr	r0, [r3, #16]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	8a9b      	ldrh	r3, [r3, #20]
 8000afe:	2201      	movs	r2, #1
 8000b00:	4619      	mov	r1, r3
 8000b02:	f001 fa01 	bl	8001f08 <HAL_GPIO_WritePin>
	delay_us(1);	// enable pulse must be > 450ns
 8000b06:	2001      	movs	r0, #1
 8000b08:	f000 f84a 	bl	8000ba0 <delay_us>
	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_RESET);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6918      	ldr	r0, [r3, #16]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	8a9b      	ldrh	r3, [r3, #20]
 8000b14:	2200      	movs	r2, #0
 8000b16:	4619      	mov	r1, r3
 8000b18:	f001 f9f6 	bl	8001f08 <HAL_GPIO_WritePin>
	delay_us(50);	// commands need > 37us to settle
 8000b1c:	2032      	movs	r0, #50	; 0x32
 8000b1e:	f000 f83f 	bl	8000ba0 <delay_us>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <lcd_sendData>:
// ----------------------------------------------------------------

//When 4bit bus mode, it needs to transfer 4bit data by two times
//send data to lcd
static void lcd_sendData(LCD_t *lcd, char data) {
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b084      	sub	sp, #16
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	70fb      	strb	r3, [r7, #3]
	char _data;

	// send higher nibble
	_data = ((data >> 4) & 0x0f);
 8000b36:	78fb      	ldrb	r3, [r7, #3]
 8000b38:	091b      	lsrs	r3, r3, #4
 8000b3a:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);  // rs =1 for sending data
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4619      	mov	r1, r3
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff95 	bl	8000a72 <lcd_send>

	// send Lower nibble
	_data = ((data) & 0x0f);
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	2201      	movs	r2, #1
 8000b54:	4619      	mov	r1, r3
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff8b 	bl	8000a72 <lcd_send>
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <lcd_sendCmd>:
// ----------------------------------------------------------------

//When 4bit bus mode, it needs to transfer 4bit data by two times
//send command to lcd
static void lcd_sendCmd(LCD_t *lcd, char cmd) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
	char _cmd;

	// send higher nibble
	_cmd = ((cmd >> 4) & 0x0f);
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	091b      	lsrs	r3, r3, #4
 8000b74:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);  // rs = 0 for sending command
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff78 	bl	8000a72 <lcd_send>

	// send Lower nibble
	_cmd = ((cmd) & 0x0f);
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff6e 	bl	8000a72 <lcd_send>
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <delay_us>:
// ----------------------------------------------------------------

//set delay in microseconds
static void delay_us(uint16_t time) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
	uint16_t delay = time * (HAL_RCC_GetHCLKFreq() / 1000000);
 8000baa:	f002 fdeb 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <delay_us+0x44>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	fb12 f303 	smulbb	r3, r2, r3
 8000bc0:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < delay; i += 14) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e003      	b.n	8000bd0 <delay_us+0x30>
		__ASM("NOP");
 8000bc8:	bf00      	nop
	for (int i = 0; i < delay; i += 14) {
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	330e      	adds	r3, #14
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	897b      	ldrh	r3, [r7, #10]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbf7      	blt.n	8000bc8 <delay_us+0x28>
	}
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	431bde83 	.word	0x431bde83

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f000 fc2a 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f87e 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f000 f992 	bl	8000f1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf8:	f000 f966 	bl	8000ec8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bfc:	f000 f936 	bl	8000e6c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000c00:	f000 f8e2 	bl	8000dc8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // ----- LCD SETTINGS -----
  lcd.RS_port= LCD_RS_GPIO_Port;
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <main+0xec>)
 8000c06:	4a34      	ldr	r2, [pc, #208]	; (8000cd8 <main+0xf0>)
 8000c08:	601a      	str	r2, [r3, #0]
  lcd.RS_pin = LCD_RS_Pin;
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <main+0xec>)
 8000c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c10:	809a      	strh	r2, [r3, #4]
  //lcd.RW_port = LCD_RW_GPIO_Port;
  //lcd.RW_pin = LCD_RW_Pin;
  lcd.EN_port = LCD_EN_GPIO_Port;
 8000c12:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <main+0xec>)
 8000c14:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <main+0xf0>)
 8000c16:	611a      	str	r2, [r3, #16]
  lcd.EN_pin = LCD_EN_Pin;
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <main+0xec>)
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	829a      	strh	r2, [r3, #20]
  lcd.D4_port = D4_GPIO_Port;
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <main+0xec>)
 8000c20:	4a2d      	ldr	r2, [pc, #180]	; (8000cd8 <main+0xf0>)
 8000c22:	619a      	str	r2, [r3, #24]
  lcd.D4_pin = D4_Pin;
 8000c24:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <main+0xec>)
 8000c26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c2a:	839a      	strh	r2, [r3, #28]
  lcd.D5_port = D5_GPIO_Port;
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <main+0xec>)
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	; (8000cd8 <main+0xf0>)
 8000c30:	621a      	str	r2, [r3, #32]
  lcd.D5_pin = D5_Pin;
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <main+0xec>)
 8000c34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c38:	849a      	strh	r2, [r3, #36]	; 0x24
  lcd.D6_port = D6_GPIO_Port;
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <main+0xec>)
 8000c3c:	4a26      	ldr	r2, [pc, #152]	; (8000cd8 <main+0xf0>)
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  lcd.D6_pin = D6_Pin;
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <main+0xec>)
 8000c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c46:	859a      	strh	r2, [r3, #44]	; 0x2c
  lcd.D7_port = D7_GPIO_Port;
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <main+0xec>)
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <main+0xf0>)
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30
  lcd.D7_pin = D7_Pin;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <main+0xec>)
 8000c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c54:	869a      	strh	r2, [r3, #52]	; 0x34

  // ----- LCD Init -----
  lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000c56:	2300      	movs	r3, #0
 8000c58:	2202      	movs	r2, #2
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	481d      	ldr	r0, [pc, #116]	; (8000cd4 <main+0xec>)
 8000c5e:	f7ff fde5 	bl	800082c <lcd_begin>

  // Mensaje inicial
  lcd_setCursor(&lcd, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	481b      	ldr	r0, [pc, #108]	; (8000cd4 <main+0xec>)
 8000c68:	f7ff fe99 	bl	800099e <lcd_setCursor>
  lcd_print(&lcd, "  Tiempo Real   ");
 8000c6c:	491b      	ldr	r1, [pc, #108]	; (8000cdc <main+0xf4>)
 8000c6e:	4819      	ldr	r0, [pc, #100]	; (8000cd4 <main+0xec>)
 8000c70:	f7ff fec7 	bl	8000a02 <lcd_print>
  lcd_setCursor(&lcd, 0, 1);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2100      	movs	r1, #0
 8000c78:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <main+0xec>)
 8000c7a:	f7ff fe90 	bl	800099e <lcd_setCursor>
  lcd_print(&lcd, "  Xiang & Alex  ");
 8000c7e:	4918      	ldr	r1, [pc, #96]	; (8000ce0 <main+0xf8>)
 8000c80:	4814      	ldr	r0, [pc, #80]	; (8000cd4 <main+0xec>)
 8000c82:	f7ff febe 	bl	8000a02 <lcd_print>
  HAL_Delay(3000);
 8000c86:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c8a:	f000 fc4d 	bl	8001528 <HAL_Delay>
  lcd_clear(&lcd);
 8000c8e:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <main+0xec>)
 8000c90:	f7ff fe4f 	bl	8000932 <lcd_clear>
  lcd_home(&lcd);
 8000c94:	480f      	ldr	r0, [pc, #60]	; (8000cd4 <main+0xec>)
 8000c96:	f7ff fe58 	bl	800094a <lcd_home>

  //DS1307 init
  rtc_init(0,1,0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff fcca 	bl	8000638 <rtc_init>

  rtc_set_time(16,22,00);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2116      	movs	r1, #22
 8000ca8:	2010      	movs	r0, #16
 8000caa:	f7ff fd1d 	bl	80006e8 <rtc_set_time>
  rtc_set_date(4, 5, 1, 23);
 8000cae:	2317      	movs	r3, #23
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2105      	movs	r1, #5
 8000cb4:	2004      	movs	r0, #4
 8000cb6:	f7ff fd81 	bl	80007bc <rtc_set_date>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cba:	f003 f88d 	bl	8003dd8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cbe:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <main+0xfc>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <main+0x100>)
 8000cc4:	f003 f8d2 	bl	8003e6c <osThreadNew>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <main+0x104>)
 8000ccc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cce:	f003 f8a7 	bl	8003e20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <main+0xea>
 8000cd4:	20000174 	.word	0x20000174
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	080071f8 	.word	0x080071f8
 8000ce0:	0800720c 	.word	0x0800720c
 8000ce4:	0800727c 	.word	0x0800727c
 8000ce8:	08001029 	.word	0x08001029
 8000cec:	20000170 	.word	0x20000170

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b094      	sub	sp, #80	; 0x50
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	2230      	movs	r2, #48	; 0x30
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f005 fdf2 	bl	80068e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <SystemClock_Config+0xd0>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <SystemClock_Config+0xd0>)
 8000d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <SystemClock_Config+0xd0>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <SystemClock_Config+0xd4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d3c:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <SystemClock_Config+0xd4>)
 8000d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <SystemClock_Config+0xd4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d50:	2302      	movs	r3, #2
 8000d52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d58:	2310      	movs	r3, #16
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d64:	2310      	movs	r3, #16
 8000d66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d72:	2307      	movs	r3, #7
 8000d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 f89e 	bl	8002ebc <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d86:	f000 f9c1 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2102      	movs	r1, #2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fb00 	bl	80033ac <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000db2:	f000 f9ab 	bl	800110c <Error_Handler>
  }
}
 8000db6:	bf00      	nop
 8000db8:	3750      	adds	r7, #80	; 0x50
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40007000 	.word	0x40007000

08000dc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_ADC1_Init+0x9c>)
 8000dde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000de2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000de6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_ADC1_Init+0xa0>)
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e2a:	f000 fba1 	bl	8001570 <HAL_ADC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e34:	f000 f96a 	bl	800110c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e4a:	f000 fbd5 	bl	80015f8 <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e54:	f000 f95a 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000090 	.word	0x20000090
 8000e64:	40012000 	.word	0x40012000
 8000e68:	0f000001 	.word	0x0f000001

08000e6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_I2C1_Init+0x50>)
 8000e72:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <MX_I2C1_Init+0x54>)
 8000e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_I2C1_Init+0x50>)
 8000e78:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <MX_I2C1_Init+0x58>)
 8000e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_I2C1_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_I2C1_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_I2C1_Init+0x50>)
 8000e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <MX_I2C1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_I2C1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <MX_I2C1_Init+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_I2C1_Init+0x50>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_I2C1_Init+0x50>)
 8000eaa:	f001 f847 	bl	8001f3c <HAL_I2C_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eb4:	f000 f92a 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200000d8 	.word	0x200000d8
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	000186a0 	.word	0x000186a0

08000ec8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <MX_USART2_UART_Init+0x50>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000f00:	f002 fc74 	bl	80037ec <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f0a:	f000 f8ff 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000012c 	.word	0x2000012c
 8000f18:	40004400 	.word	0x40004400

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a37      	ldr	r2, [pc, #220]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b35      	ldr	r3, [pc, #212]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a30      	ldr	r2, [pc, #192]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a29      	ldr	r2, [pc, #164]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b27      	ldr	r3, [pc, #156]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	481d      	ldr	r0, [pc, #116]	; (800101c <MX_GPIO_Init+0x100>)
 8000fa8:	f000 ffae 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|D7_Pin|D6_Pin
 8000fac:	2200      	movs	r2, #0
 8000fae:	f24f 4102 	movw	r1, #62466	; 0xf402
 8000fb2:	481b      	ldr	r0, [pc, #108]	; (8001020 <MX_GPIO_Init+0x104>)
 8000fb4:	f000 ffa8 	bl	8001f08 <HAL_GPIO_WritePin>
                          |D5_Pin|D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fbe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4815      	ldr	r0, [pc, #84]	; (8001024 <MX_GPIO_Init+0x108>)
 8000fd0:	f000 fe16 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fd4:	2320      	movs	r3, #32
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <MX_GPIO_Init+0x100>)
 8000fec:	f000 fe08 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin D7_Pin D6_Pin
                           D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|D7_Pin|D6_Pin
 8000ff0:	f24f 4302 	movw	r3, #62466	; 0xf402
 8000ff4:	617b      	str	r3, [r7, #20]
                          |D5_Pin|D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_GPIO_Init+0x104>)
 800100a:	f000 fdf9 	bl	8001c00 <HAL_GPIO_Init>

}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400
 8001024:	40020800 	.word	0x40020800

08001028 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af02      	add	r7, sp, #8
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char *name_day[] = {"LUN", "MAR", "MIE", "JUE", "VIE", "SAB", "DOM"};
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <StartDefaultTask+0xb4>)
 8001032:	f107 040c 	add.w	r4, r7, #12
 8001036:	461d      	mov	r5, r3
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001040:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* Infinite loop */
  for(;;)
  {
	rtc_get_time(&hour, &min, &sec);
 8001044:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <StartDefaultTask+0xb8>)
 8001046:	4927      	ldr	r1, [pc, #156]	; (80010e4 <StartDefaultTask+0xbc>)
 8001048:	4827      	ldr	r0, [pc, #156]	; (80010e8 <StartDefaultTask+0xc0>)
 800104a:	f7ff fb19 	bl	8000680 <rtc_get_time>
	rtc_get_date(&week_day, &day, &month, &year);
 800104e:	4b27      	ldr	r3, [pc, #156]	; (80010ec <StartDefaultTask+0xc4>)
 8001050:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <StartDefaultTask+0xc8>)
 8001052:	4928      	ldr	r1, [pc, #160]	; (80010f4 <StartDefaultTask+0xcc>)
 8001054:	4828      	ldr	r0, [pc, #160]	; (80010f8 <StartDefaultTask+0xd0>)
 8001056:	f7ff fb77 	bl	8000748 <rtc_get_date>

	lcd_home(&lcd);
 800105a:	4828      	ldr	r0, [pc, #160]	; (80010fc <StartDefaultTask+0xd4>)
 800105c:	f7ff fc75 	bl	800094a <lcd_home>
	lcd_setCursor(&lcd, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	4825      	ldr	r0, [pc, #148]	; (80010fc <StartDefaultTask+0xd4>)
 8001066:	f7ff fc9a 	bl	800099e <lcd_setCursor>
	sprintf(str,"%02d/%02d/%02d   %s", day, month, year, name_day[week_day-1]);
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <StartDefaultTask+0xcc>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <StartDefaultTask+0xc8>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <StartDefaultTask+0xc4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <StartDefaultTask+0xd0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	3b01      	subs	r3, #1
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	3328      	adds	r3, #40	; 0x28
 8001086:	443b      	add	r3, r7
 8001088:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	9200      	str	r2, [sp, #0]
 8001090:	4603      	mov	r3, r0
 8001092:	460a      	mov	r2, r1
 8001094:	491a      	ldr	r1, [pc, #104]	; (8001100 <StartDefaultTask+0xd8>)
 8001096:	481b      	ldr	r0, [pc, #108]	; (8001104 <StartDefaultTask+0xdc>)
 8001098:	f005 fc2e 	bl	80068f8 <siprintf>
	lcd_print(&lcd, str);
 800109c:	4919      	ldr	r1, [pc, #100]	; (8001104 <StartDefaultTask+0xdc>)
 800109e:	4817      	ldr	r0, [pc, #92]	; (80010fc <StartDefaultTask+0xd4>)
 80010a0:	f7ff fcaf 	bl	8000a02 <lcd_print>
	lcd_setCursor(&lcd, 0, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2100      	movs	r1, #0
 80010a8:	4814      	ldr	r0, [pc, #80]	; (80010fc <StartDefaultTask+0xd4>)
 80010aa:	f7ff fc78 	bl	800099e <lcd_setCursor>
	sprintf(str,"%2d:%2d:%2d T=20.5C", hour, min, sec);
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <StartDefaultTask+0xc0>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <StartDefaultTask+0xbc>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <StartDefaultTask+0xb8>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	460b      	mov	r3, r1
 80010c2:	4911      	ldr	r1, [pc, #68]	; (8001108 <StartDefaultTask+0xe0>)
 80010c4:	480f      	ldr	r0, [pc, #60]	; (8001104 <StartDefaultTask+0xdc>)
 80010c6:	f005 fc17 	bl	80068f8 <siprintf>
	lcd_print(&lcd, str);
 80010ca:	490e      	ldr	r1, [pc, #56]	; (8001104 <StartDefaultTask+0xdc>)
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <StartDefaultTask+0xd4>)
 80010ce:	f7ff fc98 	bl	8000a02 <lcd_print>
    osDelay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f002 ff5c 	bl	8003f90 <osDelay>
	rtc_get_time(&hour, &min, &sec);
 80010d8:	e7b4      	b.n	8001044 <StartDefaultTask+0x1c>
 80010da:	bf00      	nop
 80010dc:	08007248 	.word	0x08007248
 80010e0:	200001b4 	.word	0x200001b4
 80010e4:	200001b5 	.word	0x200001b5
 80010e8:	200001b6 	.word	0x200001b6
 80010ec:	200001ba 	.word	0x200001ba
 80010f0:	200001b9 	.word	0x200001b9
 80010f4:	200001b8 	.word	0x200001b8
 80010f8:	200001b7 	.word	0x200001b7
 80010fc:	20000174 	.word	0x20000174
 8001100:	08007220 	.word	0x08007220
 8001104:	200001bc 	.word	0x200001bc
 8001108:	08007234 	.word	0x08007234

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_MspInit+0x54>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_MspInit+0x54>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x54>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_MspInit+0x54>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_MspInit+0x54>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_MspInit+0x54>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	210f      	movs	r1, #15
 800115a:	f06f 0001 	mvn.w	r0, #1
 800115e:	f000 fd26 	bl	8001bae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_ADC_MspInit+0x7c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d127      	bne.n	80011e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_ADC_MspInit+0x80>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <HAL_ADC_MspInit+0x80>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <HAL_ADC_MspInit+0x80>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_ADC_MspInit+0x80>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_ADC_MspInit+0x80>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_ADC_MspInit+0x80>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ca:	2301      	movs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ce:	2303      	movs	r3, #3
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_ADC_MspInit+0x84>)
 80011de:	f000 fd0f 	bl	8001c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40012000 	.word	0x40012000
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020000 	.word	0x40020000

080011f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a19      	ldr	r2, [pc, #100]	; (800127c <HAL_I2C_MspInit+0x84>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d12b      	bne.n	8001272 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_I2C_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_I2C_MspInit+0x88>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_I2C_MspInit+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001236:	23c0      	movs	r3, #192	; 0xc0
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123a:	2312      	movs	r3, #18
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001246:	2304      	movs	r3, #4
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <HAL_I2C_MspInit+0x8c>)
 8001252:	f000 fcd5 	bl	8001c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_I2C_MspInit+0x88>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_I2C_MspInit+0x88>)
 8001260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_I2C_MspInit+0x88>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40005400 	.word	0x40005400
 8001280:	40023800 	.word	0x40023800
 8001284:	40020400 	.word	0x40020400

08001288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_UART_MspInit+0x84>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d12b      	bne.n	8001302 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012e2:	230c      	movs	r3, #12
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f2:	2307      	movs	r3, #7
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <HAL_UART_MspInit+0x8c>)
 80012fe:	f000 fc7f 	bl	8001c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40004400 	.word	0x40004400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f000 f8ce 	bl	80014e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800134c:	f004 fe66 	bl	800601c <xTaskGetSchedulerState>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001356:	f003 fac7 	bl	80048e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f005 fa72 	bl	8006878 <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20018000 	.word	0x20018000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	200001cc 	.word	0x200001cc
 80013c8:	20004b38 	.word	0x20004b38

080013cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001428 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f4:	480d      	ldr	r0, [pc, #52]	; (800142c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013f6:	490e      	ldr	r1, [pc, #56]	; (8001430 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013fc:	e002      	b.n	8001404 <LoopCopyDataInit>

080013fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001402:	3304      	adds	r3, #4

08001404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001408:	d3f9      	bcc.n	80013fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800140c:	4c0b      	ldr	r4, [pc, #44]	; (800143c <LoopFillZerobss+0x26>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001410:	e001      	b.n	8001416 <LoopFillZerobss>

08001412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001414:	3204      	adds	r2, #4

08001416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001418:	d3fb      	bcc.n	8001412 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800141a:	f7ff ffd7 	bl	80013cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800141e:	f005 fa31 	bl	8006884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001422:	f7ff fbe1 	bl	8000be8 <main>
  bx  lr    
 8001426:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001428:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001434:	080072fc 	.word	0x080072fc
  ldr r2, =_sbss
 8001438:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800143c:	20004b34 	.word	0x20004b34

08001440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC_IRQHandler>
	...

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <HAL_Init+0x40>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_Init+0x40>)
 800145a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800145e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	; (8001484 <HAL_Init+0x40>)
 8001466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 fb93 	bl	8001b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001472:	200f      	movs	r0, #15
 8001474:	f000 f808 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001478:	f7ff fe4e 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023c00 	.word	0x40023c00

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0x54>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_InitTick+0x58>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fb9d 	bl	8001be6 <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d80a      	bhi.n	80014d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c4:	f000 fb73 	bl	8001bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <HAL_InitTick+0x5c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000008 	.word	0x20000008
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008
 800150c:	200001d0 	.word	0x200001d0

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200001d0 	.word	0x200001d0

08001528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001530:	f7ff ffee 	bl	8001510 <HAL_GetTick>
 8001534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001540:	d005      	beq.n	800154e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_Delay+0x44>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800154e:	bf00      	nop
 8001550:	f7ff ffde 	bl	8001510 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d8f7      	bhi.n	8001550 <HAL_Delay+0x28>
  {
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008

08001570 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e033      	b.n	80015ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	2b00      	cmp	r3, #0
 800158c:	d109      	bne.n	80015a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fdee 	bl	8001170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d118      	bne.n	80015e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015b6:	f023 0302 	bic.w	r3, r3, #2
 80015ba:	f043 0202 	orr.w	r2, r3, #2
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f93a 	bl	800183c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f023 0303 	bic.w	r3, r3, #3
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
 80015de:	e001      	b.n	80015e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1c>
 8001610:	2302      	movs	r3, #2
 8001612:	e105      	b.n	8001820 <HAL_ADC_ConfigChannel+0x228>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b09      	cmp	r3, #9
 8001622:	d925      	bls.n	8001670 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68d9      	ldr	r1, [r3, #12]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	3b1e      	subs	r3, #30
 800163a:	2207      	movs	r2, #7
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43da      	mvns	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	400a      	ands	r2, r1
 8001648:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68d9      	ldr	r1, [r3, #12]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b29b      	uxth	r3, r3
 800165a:	4618      	mov	r0, r3
 800165c:	4603      	mov	r3, r0
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4403      	add	r3, r0
 8001662:	3b1e      	subs	r3, #30
 8001664:	409a      	lsls	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	e022      	b.n	80016b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6919      	ldr	r1, [r3, #16]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	2207      	movs	r2, #7
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	400a      	ands	r2, r1
 8001692:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6919      	ldr	r1, [r3, #16]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4403      	add	r3, r0
 80016ac:	409a      	lsls	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d824      	bhi.n	8001708 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	3b05      	subs	r3, #5
 80016d0:	221f      	movs	r2, #31
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	400a      	ands	r2, r1
 80016de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	3b05      	subs	r3, #5
 80016fa:	fa00 f203 	lsl.w	r2, r0, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
 8001706:	e04c      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b0c      	cmp	r3, #12
 800170e:	d824      	bhi.n	800175a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b23      	subs	r3, #35	; 0x23
 8001722:	221f      	movs	r2, #31
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43da      	mvns	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	400a      	ands	r2, r1
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	4618      	mov	r0, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	3b23      	subs	r3, #35	; 0x23
 800174c:	fa00 f203 	lsl.w	r2, r0, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	631a      	str	r2, [r3, #48]	; 0x30
 8001758:	e023      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	3b41      	subs	r3, #65	; 0x41
 800176c:	221f      	movs	r2, #31
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	400a      	ands	r2, r1
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4618      	mov	r0, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	3b41      	subs	r3, #65	; 0x41
 8001796:	fa00 f203 	lsl.w	r2, r0, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_ADC_ConfigChannel+0x234>)
 80017a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a21      	ldr	r2, [pc, #132]	; (8001830 <HAL_ADC_ConfigChannel+0x238>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d109      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1cc>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b12      	cmp	r3, #18
 80017b6:	d105      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_ADC_ConfigChannel+0x238>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d123      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x21e>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d003      	beq.n	80017de <HAL_ADC_ConfigChannel+0x1e6>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b11      	cmp	r3, #17
 80017dc:	d11b      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b10      	cmp	r3, #16
 80017f0:	d111      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_ADC_ConfigChannel+0x23c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_ADC_ConfigChannel+0x240>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	0c9a      	lsrs	r2, r3, #18
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001808:	e002      	b.n	8001810 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3b01      	subs	r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f9      	bne.n	800180a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40012300 	.word	0x40012300
 8001830:	40012000 	.word	0x40012000
 8001834:	20000000 	.word	0x20000000
 8001838:	431bde83 	.word	0x431bde83

0800183c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001844:	4b79      	ldr	r3, [pc, #484]	; (8001a2c <ADC_Init+0x1f0>)
 8001846:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	431a      	orrs	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001870:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	021a      	lsls	r2, r3, #8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6859      	ldr	r1, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6899      	ldr	r1, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <ADC_Init+0x1f4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d022      	beq.n	800191a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6899      	ldr	r1, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001904:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6899      	ldr	r1, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	e00f      	b.n	800193a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001938:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0202 	bic.w	r2, r2, #2
 8001948:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6899      	ldr	r1, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7e1b      	ldrb	r3, [r3, #24]
 8001954:	005a      	lsls	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01b      	beq.n	80019a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001976:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001986:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6859      	ldr	r1, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	3b01      	subs	r3, #1
 8001994:	035a      	lsls	r2, r3, #13
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	e007      	b.n	80019b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	051a      	lsls	r2, r3, #20
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6899      	ldr	r1, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019f2:	025a      	lsls	r2, r3, #9
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6899      	ldr	r1, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	029a      	lsls	r2, r3, #10
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	609a      	str	r2, [r3, #8]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40012300 	.word	0x40012300
 8001a30:	0f000001 	.word	0x0f000001

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b64:	d301      	bcc.n	8001b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00f      	b.n	8001b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <SysTick_Config+0x40>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b72:	210f      	movs	r1, #15
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b78:	f7ff ff8e 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SysTick_Config+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <SysTick_Config+0x40>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff47 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc0:	f7ff ff5c 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	6978      	ldr	r0, [r7, #20]
 8001bcc:	f7ff ff8e 	bl	8001aec <NVIC_EncodePriority>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff5d 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffb0 	bl	8001b54 <SysTick_Config>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e159      	b.n	8001ed0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	f040 8148 	bne.w	8001eca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d005      	beq.n	8001c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d130      	bne.n	8001cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 0201 	and.w	r2, r3, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d017      	beq.n	8001cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d123      	bne.n	8001d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	08da      	lsrs	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3208      	adds	r2, #8
 8001d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	08da      	lsrs	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3208      	adds	r2, #8
 8001d3e:	69b9      	ldr	r1, [r7, #24]
 8001d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80a2 	beq.w	8001eca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b57      	ldr	r3, [pc, #348]	; (8001ee8 <HAL_GPIO_Init+0x2e8>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	4a56      	ldr	r2, [pc, #344]	; (8001ee8 <HAL_GPIO_Init+0x2e8>)
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d94:	6453      	str	r3, [r2, #68]	; 0x44
 8001d96:	4b54      	ldr	r3, [pc, #336]	; (8001ee8 <HAL_GPIO_Init+0x2e8>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da2:	4a52      	ldr	r2, [pc, #328]	; (8001eec <HAL_GPIO_Init+0x2ec>)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a49      	ldr	r2, [pc, #292]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d019      	beq.n	8001e02 <HAL_GPIO_Init+0x202>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a48      	ldr	r2, [pc, #288]	; (8001ef4 <HAL_GPIO_Init+0x2f4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_GPIO_Init+0x1fe>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a47      	ldr	r2, [pc, #284]	; (8001ef8 <HAL_GPIO_Init+0x2f8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00d      	beq.n	8001dfa <HAL_GPIO_Init+0x1fa>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a46      	ldr	r2, [pc, #280]	; (8001efc <HAL_GPIO_Init+0x2fc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d007      	beq.n	8001df6 <HAL_GPIO_Init+0x1f6>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a45      	ldr	r2, [pc, #276]	; (8001f00 <HAL_GPIO_Init+0x300>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_GPIO_Init+0x1f2>
 8001dee:	2304      	movs	r3, #4
 8001df0:	e008      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001df2:	2307      	movs	r3, #7
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001df6:	2303      	movs	r3, #3
 8001df8:	e004      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001e02:	2300      	movs	r3, #0
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	f002 0203 	and.w	r2, r2, #3
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	4093      	lsls	r3, r2
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e14:	4935      	ldr	r1, [pc, #212]	; (8001eec <HAL_GPIO_Init+0x2ec>)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e46:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e70:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9a:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec4:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	f67f aea2 	bls.w	8001c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40013c00 	.word	0x40013c00

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f18:	787b      	ldrb	r3, [r7, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f24:	e003      	b.n	8001f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	041a      	lsls	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	619a      	str	r2, [r3, #24]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e12b      	b.n	80021a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff f948 	bl	80011f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2224      	movs	r2, #36	; 0x24
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fa0:	f001 fbfc 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8001fa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4a81      	ldr	r2, [pc, #516]	; (80021b0 <HAL_I2C_Init+0x274>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d807      	bhi.n	8001fc0 <HAL_I2C_Init+0x84>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4a80      	ldr	r2, [pc, #512]	; (80021b4 <HAL_I2C_Init+0x278>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	bf94      	ite	ls
 8001fb8:	2301      	movls	r3, #1
 8001fba:	2300      	movhi	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	e006      	b.n	8001fce <HAL_I2C_Init+0x92>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a7d      	ldr	r2, [pc, #500]	; (80021b8 <HAL_I2C_Init+0x27c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	bf94      	ite	ls
 8001fc8:	2301      	movls	r3, #1
 8001fca:	2300      	movhi	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0e7      	b.n	80021a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4a78      	ldr	r2, [pc, #480]	; (80021bc <HAL_I2C_Init+0x280>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	0c9b      	lsrs	r3, r3, #18
 8001fe0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a6a      	ldr	r2, [pc, #424]	; (80021b0 <HAL_I2C_Init+0x274>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d802      	bhi.n	8002010 <HAL_I2C_Init+0xd4>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3301      	adds	r3, #1
 800200e:	e009      	b.n	8002024 <HAL_I2C_Init+0xe8>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	4a69      	ldr	r2, [pc, #420]	; (80021c0 <HAL_I2C_Init+0x284>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	3301      	adds	r3, #1
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	430b      	orrs	r3, r1
 800202a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002036:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	495c      	ldr	r1, [pc, #368]	; (80021b0 <HAL_I2C_Init+0x274>)
 8002040:	428b      	cmp	r3, r1
 8002042:	d819      	bhi.n	8002078 <HAL_I2C_Init+0x13c>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e59      	subs	r1, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002052:	1c59      	adds	r1, r3, #1
 8002054:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002058:	400b      	ands	r3, r1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_I2C_Init+0x138>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1e59      	subs	r1, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fbb1 f3f3 	udiv	r3, r1, r3
 800206c:	3301      	adds	r3, #1
 800206e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002072:	e051      	b.n	8002118 <HAL_I2C_Init+0x1dc>
 8002074:	2304      	movs	r3, #4
 8002076:	e04f      	b.n	8002118 <HAL_I2C_Init+0x1dc>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d111      	bne.n	80020a4 <HAL_I2C_Init+0x168>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e58      	subs	r0, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	440b      	add	r3, r1
 800208e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e012      	b.n	80020ca <HAL_I2C_Init+0x18e>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1e58      	subs	r0, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	0099      	lsls	r1, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Init+0x196>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e022      	b.n	8002118 <HAL_I2C_Init+0x1dc>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10e      	bne.n	80020f8 <HAL_I2C_Init+0x1bc>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e58      	subs	r0, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6859      	ldr	r1, [r3, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	440b      	add	r3, r1
 80020e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f6:	e00f      	b.n	8002118 <HAL_I2C_Init+0x1dc>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e58      	subs	r0, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	0099      	lsls	r1, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	fbb0 f3f3 	udiv	r3, r0, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	6809      	ldr	r1, [r1, #0]
 800211c:	4313      	orrs	r3, r2
 800211e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6911      	ldr	r1, [r2, #16]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68d2      	ldr	r2, [r2, #12]
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	430b      	orrs	r3, r1
 800215a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	000186a0 	.word	0x000186a0
 80021b4:	001e847f 	.word	0x001e847f
 80021b8:	003d08ff 	.word	0x003d08ff
 80021bc:	431bde83 	.word	0x431bde83
 80021c0:	10624dd3 	.word	0x10624dd3

080021c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	4608      	mov	r0, r1
 80021ce:	4611      	mov	r1, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	817b      	strh	r3, [r7, #10]
 80021d6:	460b      	mov	r3, r1
 80021d8:	813b      	strh	r3, [r7, #8]
 80021da:	4613      	mov	r3, r2
 80021dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021de:	f7ff f997 	bl	8001510 <HAL_GetTick>
 80021e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	f040 80d9 	bne.w	80023a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2319      	movs	r3, #25
 80021f8:	2201      	movs	r2, #1
 80021fa:	496d      	ldr	r1, [pc, #436]	; (80023b0 <HAL_I2C_Mem_Write+0x1ec>)
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 fc7f 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
 800220a:	e0cc      	b.n	80023a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_I2C_Mem_Write+0x56>
 8002216:	2302      	movs	r3, #2
 8002218:	e0c5      	b.n	80023a6 <HAL_I2C_Mem_Write+0x1e2>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b01      	cmp	r3, #1
 800222e:	d007      	beq.n	8002240 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2221      	movs	r2, #33	; 0x21
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2240      	movs	r2, #64	; 0x40
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a3a      	ldr	r2, [r7, #32]
 800226a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002270:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4a4d      	ldr	r2, [pc, #308]	; (80023b4 <HAL_I2C_Mem_Write+0x1f0>)
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002282:	88f8      	ldrh	r0, [r7, #6]
 8002284:	893a      	ldrh	r2, [r7, #8]
 8002286:	8979      	ldrh	r1, [r7, #10]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	4603      	mov	r3, r0
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fab6 	bl	8002804 <I2C_RequestMemoryWrite>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d052      	beq.n	8002344 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e081      	b.n	80023a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fd00 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d107      	bne.n	80022ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e06b      	b.n	80023a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b04      	cmp	r3, #4
 800230a:	d11b      	bne.n	8002344 <HAL_I2C_Mem_Write+0x180>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	2b00      	cmp	r3, #0
 8002312:	d017      	beq.n	8002344 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1aa      	bne.n	80022a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fcec 	bl	8002d2e <I2C_WaitOnBTFFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	2b04      	cmp	r3, #4
 8002362:	d107      	bne.n	8002374 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002372:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e016      	b.n	80023a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e000      	b.n	80023a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
  }
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	00100002 	.word	0x00100002
 80023b4:	ffff0000 	.word	0xffff0000

080023b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	; 0x30
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	4608      	mov	r0, r1
 80023c2:	4611      	mov	r1, r2
 80023c4:	461a      	mov	r2, r3
 80023c6:	4603      	mov	r3, r0
 80023c8:	817b      	strh	r3, [r7, #10]
 80023ca:	460b      	mov	r3, r1
 80023cc:	813b      	strh	r3, [r7, #8]
 80023ce:	4613      	mov	r3, r2
 80023d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d2:	f7ff f89d 	bl	8001510 <HAL_GetTick>
 80023d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	f040 8208 	bne.w	80027f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2319      	movs	r3, #25
 80023ec:	2201      	movs	r2, #1
 80023ee:	497b      	ldr	r1, [pc, #492]	; (80025dc <HAL_I2C_Mem_Read+0x224>)
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fb85 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
 80023fe:	e1fb      	b.n	80027f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_I2C_Mem_Read+0x56>
 800240a:	2302      	movs	r3, #2
 800240c:	e1f4      	b.n	80027f8 <HAL_I2C_Mem_Read+0x440>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d007      	beq.n	8002434 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2222      	movs	r2, #34	; 0x22
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2240      	movs	r2, #64	; 0x40
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4a5b      	ldr	r2, [pc, #364]	; (80025e0 <HAL_I2C_Mem_Read+0x228>)
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002476:	88f8      	ldrh	r0, [r7, #6]
 8002478:	893a      	ldrh	r2, [r7, #8]
 800247a:	8979      	ldrh	r1, [r7, #10]
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	4603      	mov	r3, r0
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fa52 	bl	8002930 <I2C_RequestMemoryRead>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e1b0      	b.n	80027f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	d113      	bne.n	80024c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	623b      	str	r3, [r7, #32]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e184      	b.n	80027d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d11b      	bne.n	8002506 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e164      	b.n	80027d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	2b02      	cmp	r3, #2
 800250c:	d11b      	bne.n	8002546 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800252c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	e144      	b.n	80027d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800255c:	e138      	b.n	80027d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	2b03      	cmp	r3, #3
 8002564:	f200 80f1 	bhi.w	800274a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	2b01      	cmp	r3, #1
 800256e:	d123      	bne.n	80025b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002572:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fc1b 	bl	8002db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e139      	b.n	80027f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025b6:	e10b      	b.n	80027d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d14e      	bne.n	800265e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	2200      	movs	r2, #0
 80025c8:	4906      	ldr	r1, [pc, #24]	; (80025e4 <HAL_I2C_Mem_Read+0x22c>)
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fa98 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e10e      	b.n	80027f8 <HAL_I2C_Mem_Read+0x440>
 80025da:	bf00      	nop
 80025dc:	00100002 	.word	0x00100002
 80025e0:	ffff0000 	.word	0xffff0000
 80025e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800265c:	e0b8      	b.n	80027d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	2200      	movs	r2, #0
 8002666:	4966      	ldr	r1, [pc, #408]	; (8002800 <HAL_I2C_Mem_Read+0x448>)
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fa49 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0bf      	b.n	80027f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c0:	2200      	movs	r2, #0
 80026c2:	494f      	ldr	r1, [pc, #316]	; (8002800 <HAL_I2C_Mem_Read+0x448>)
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fa1b 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e091      	b.n	80027f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002748:	e042      	b.n	80027d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fb2e 	bl	8002db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e04c      	b.n	80027f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b04      	cmp	r3, #4
 800279c:	d118      	bne.n	80027d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f47f aec2 	bne.w	800255e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
  }
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3728      	adds	r7, #40	; 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	00010004 	.word	0x00010004

08002804 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4603      	mov	r3, r0
 8002814:	817b      	strh	r3, [r7, #10]
 8002816:	460b      	mov	r3, r1
 8002818:	813b      	strh	r3, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	2200      	movs	r2, #0
 8002836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f960 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00d      	beq.n	8002862 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002854:	d103      	bne.n	800285e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e05f      	b.n	8002922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	492d      	ldr	r1, [pc, #180]	; (800292c <I2C_RequestMemoryWrite+0x128>)
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f998 	bl	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e04c      	b.n	8002922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a0:	6a39      	ldr	r1, [r7, #32]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fa02 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d107      	bne.n	80028c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e02b      	b.n	8002922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028d0:	893b      	ldrh	r3, [r7, #8]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	611a      	str	r2, [r3, #16]
 80028da:	e021      	b.n	8002920 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028dc:	893b      	ldrh	r3, [r7, #8]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f9dc 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d107      	bne.n	8002912 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e005      	b.n	8002922 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002916:	893b      	ldrh	r3, [r7, #8]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	00010002 	.word	0x00010002

08002930 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	817b      	strh	r3, [r7, #10]
 8002942:	460b      	mov	r3, r1
 8002944:	813b      	strh	r3, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002958:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2200      	movs	r2, #0
 8002972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f8c2 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002990:	d103      	bne.n	800299a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0aa      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800299e:	897b      	ldrh	r3, [r7, #10]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	4952      	ldr	r1, [pc, #328]	; (8002afc <I2C_RequestMemoryRead+0x1cc>)
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f8fa 	bl	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e097      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	6a39      	ldr	r1, [r7, #32]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f964 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d107      	bne.n	8002a02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e076      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d105      	bne.n	8002a18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0c:	893b      	ldrh	r3, [r7, #8]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	611a      	str	r2, [r3, #16]
 8002a16:	e021      	b.n	8002a5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a18:	893b      	ldrh	r3, [r7, #8]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a28:	6a39      	ldr	r1, [r7, #32]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f93e 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d107      	bne.n	8002a4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e050      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a52:	893b      	ldrh	r3, [r7, #8]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	6a39      	ldr	r1, [r7, #32]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f923 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d107      	bne.n	8002a84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e035      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f82b 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abe:	d103      	bne.n	8002ac8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e013      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002acc:	897b      	ldrh	r3, [r7, #10]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	6a3a      	ldr	r2, [r7, #32]
 8002ae0:	4906      	ldr	r1, [pc, #24]	; (8002afc <I2C_RequestMemoryRead+0x1cc>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f863 	bl	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	00010002 	.word	0x00010002

08002b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	e025      	b.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b18:	d021      	beq.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fe fcf9 	bl	8001510 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d116      	bne.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e023      	b.n	8002ba6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	0c1b      	lsrs	r3, r3, #16
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d10d      	bne.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bf0c      	ite	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	2300      	movne	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	e00c      	b.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d0b6      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bbc:	e051      	b.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bcc:	d123      	bne.n	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002be6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f043 0204 	orr.w	r2, r3, #4
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e046      	b.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c1c:	d021      	beq.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7fe fc77 	bl	8001510 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d116      	bne.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f043 0220 	orr.w	r2, r3, #32
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e020      	b.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d10c      	bne.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	43da      	mvns	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4013      	ands	r3, r2
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf14      	ite	ne
 8002c7e:	2301      	movne	r3, #1
 8002c80:	2300      	moveq	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	e00b      	b.n	8002c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d18d      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb8:	e02d      	b.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f8ce 	bl	8002e5c <I2C_IsAcknowledgeFailed>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e02d      	b.n	8002d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd0:	d021      	beq.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7fe fc1d 	bl	8001510 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d116      	bne.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e007      	b.n	8002d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d20:	2b80      	cmp	r3, #128	; 0x80
 8002d22:	d1ca      	bne.n	8002cba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d3a:	e02d      	b.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f88d 	bl	8002e5c <I2C_IsAcknowledgeFailed>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e02d      	b.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d52:	d021      	beq.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d54:	f7fe fbdc 	bl	8001510 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d302      	bcc.n	8002d6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d116      	bne.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d1ca      	bne.n	8002d3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dbc:	e042      	b.n	8002e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d119      	bne.n	8002e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0210 	mvn.w	r2, #16
 8002dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e029      	b.n	8002e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e00:	f7fe fb86 	bl	8001510 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d302      	bcc.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d116      	bne.n	8002e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e007      	b.n	8002e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d1b5      	bne.n	8002dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e72:	d11b      	bne.n	8002eac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f043 0204 	orr.w	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e267      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d075      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d00c      	beq.n	8002f00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee6:	4b85      	ldr	r3, [pc, #532]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d112      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef2:	4b82      	ldr	r3, [pc, #520]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	4b7e      	ldr	r3, [pc, #504]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d05b      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x108>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d157      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e242      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d106      	bne.n	8002f30 <HAL_RCC_OscConfig+0x74>
 8002f22:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a75      	ldr	r2, [pc, #468]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e01d      	b.n	8002f6c <HAL_RCC_OscConfig+0xb0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x98>
 8002f3a:	4b70      	ldr	r3, [pc, #448]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6f      	ldr	r2, [pc, #444]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b6d      	ldr	r3, [pc, #436]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a6c      	ldr	r2, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0xb0>
 8002f54:	4b69      	ldr	r3, [pc, #420]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a68      	ldr	r2, [pc, #416]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b66      	ldr	r3, [pc, #408]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a65      	ldr	r2, [pc, #404]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d013      	beq.n	8002f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe facc 	bl	8001510 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fac8 	bl	8001510 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e207      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	4b5b      	ldr	r3, [pc, #364]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0xc0>
 8002f9a:	e014      	b.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fab8 	bl	8001510 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fab4 	bl	8001510 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e1f3      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	4b51      	ldr	r3, [pc, #324]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xe8>
 8002fc2:	e000      	b.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d063      	beq.n	800309a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd2:	4b4a      	ldr	r3, [pc, #296]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d11c      	bne.n	8003024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fea:	4b44      	ldr	r3, [pc, #272]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d116      	bne.n	8003024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	4b41      	ldr	r3, [pc, #260]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_RCC_OscConfig+0x152>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e1c7      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4937      	ldr	r1, [pc, #220]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	e03a      	b.n	800309a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800302c:	4b34      	ldr	r3, [pc, #208]	; (8003100 <HAL_RCC_OscConfig+0x244>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe fa6d 	bl	8001510 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303a:	f7fe fa69 	bl	8001510 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e1a8      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b28      	ldr	r3, [pc, #160]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4925      	ldr	r1, [pc, #148]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_RCC_OscConfig+0x244>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fa4c 	bl	8001510 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307c:	f7fe fa48 	bl	8001510 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e187      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d036      	beq.n	8003114 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d016      	beq.n	80030dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_RCC_OscConfig+0x248>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fe fa2c 	bl	8001510 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030bc:	f7fe fa28 	bl	8001510 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e167      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_OscConfig+0x240>)
 80030d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x200>
 80030da:	e01b      	b.n	8003114 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_RCC_OscConfig+0x248>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e2:	f7fe fa15 	bl	8001510 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	e00e      	b.n	8003108 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ea:	f7fe fa11 	bl	8001510 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d907      	bls.n	8003108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e150      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
 80030fc:	40023800 	.word	0x40023800
 8003100:	42470000 	.word	0x42470000
 8003104:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003108:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x470>)
 800310a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ea      	bne.n	80030ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8097 	beq.w	8003250 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003126:	4b81      	ldr	r3, [pc, #516]	; (800332c <HAL_RCC_OscConfig+0x470>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10f      	bne.n	8003152 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	4b7d      	ldr	r3, [pc, #500]	; (800332c <HAL_RCC_OscConfig+0x470>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a7c      	ldr	r2, [pc, #496]	; (800332c <HAL_RCC_OscConfig+0x470>)
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b7a      	ldr	r3, [pc, #488]	; (800332c <HAL_RCC_OscConfig+0x470>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314e:	2301      	movs	r3, #1
 8003150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003152:	4b77      	ldr	r3, [pc, #476]	; (8003330 <HAL_RCC_OscConfig+0x474>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d118      	bne.n	8003190 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315e:	4b74      	ldr	r3, [pc, #464]	; (8003330 <HAL_RCC_OscConfig+0x474>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a73      	ldr	r2, [pc, #460]	; (8003330 <HAL_RCC_OscConfig+0x474>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316a:	f7fe f9d1 	bl	8001510 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003172:	f7fe f9cd 	bl	8001510 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e10c      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	4b6a      	ldr	r3, [pc, #424]	; (8003330 <HAL_RCC_OscConfig+0x474>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2ea>
 8003198:	4b64      	ldr	r3, [pc, #400]	; (800332c <HAL_RCC_OscConfig+0x470>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	4a63      	ldr	r2, [pc, #396]	; (800332c <HAL_RCC_OscConfig+0x470>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6713      	str	r3, [r2, #112]	; 0x70
 80031a4:	e01c      	b.n	80031e0 <HAL_RCC_OscConfig+0x324>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x30c>
 80031ae:	4b5f      	ldr	r3, [pc, #380]	; (800332c <HAL_RCC_OscConfig+0x470>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	4a5e      	ldr	r2, [pc, #376]	; (800332c <HAL_RCC_OscConfig+0x470>)
 80031b4:	f043 0304 	orr.w	r3, r3, #4
 80031b8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ba:	4b5c      	ldr	r3, [pc, #368]	; (800332c <HAL_RCC_OscConfig+0x470>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a5b      	ldr	r2, [pc, #364]	; (800332c <HAL_RCC_OscConfig+0x470>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0x324>
 80031c8:	4b58      	ldr	r3, [pc, #352]	; (800332c <HAL_RCC_OscConfig+0x470>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	4a57      	ldr	r2, [pc, #348]	; (800332c <HAL_RCC_OscConfig+0x470>)
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	6713      	str	r3, [r2, #112]	; 0x70
 80031d4:	4b55      	ldr	r3, [pc, #340]	; (800332c <HAL_RCC_OscConfig+0x470>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	4a54      	ldr	r2, [pc, #336]	; (800332c <HAL_RCC_OscConfig+0x470>)
 80031da:	f023 0304 	bic.w	r3, r3, #4
 80031de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d015      	beq.n	8003214 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe f992 	bl	8001510 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f0:	f7fe f98e 	bl	8001510 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e0cb      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003206:	4b49      	ldr	r3, [pc, #292]	; (800332c <HAL_RCC_OscConfig+0x470>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0ee      	beq.n	80031f0 <HAL_RCC_OscConfig+0x334>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7fe f97c 	bl	8001510 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321a:	e00a      	b.n	8003232 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321c:	f7fe f978 	bl	8001510 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e0b5      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003232:	4b3e      	ldr	r3, [pc, #248]	; (800332c <HAL_RCC_OscConfig+0x470>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1ee      	bne.n	800321c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800323e:	7dfb      	ldrb	r3, [r7, #23]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d105      	bne.n	8003250 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003244:	4b39      	ldr	r3, [pc, #228]	; (800332c <HAL_RCC_OscConfig+0x470>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	4a38      	ldr	r2, [pc, #224]	; (800332c <HAL_RCC_OscConfig+0x470>)
 800324a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80a1 	beq.w	800339c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800325a:	4b34      	ldr	r3, [pc, #208]	; (800332c <HAL_RCC_OscConfig+0x470>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b08      	cmp	r3, #8
 8003264:	d05c      	beq.n	8003320 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d141      	bne.n	80032f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326e:	4b31      	ldr	r3, [pc, #196]	; (8003334 <HAL_RCC_OscConfig+0x478>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe f94c 	bl	8001510 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe f948 	bl	8001510 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e087      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	4b27      	ldr	r3, [pc, #156]	; (800332c <HAL_RCC_OscConfig+0x470>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	019b      	lsls	r3, r3, #6
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	3b01      	subs	r3, #1
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	061b      	lsls	r3, r3, #24
 80032be:	491b      	ldr	r1, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x470>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x478>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ca:	f7fe f921 	bl	8001510 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d2:	f7fe f91d 	bl	8001510 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e05c      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_RCC_OscConfig+0x470>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x416>
 80032f0:	e054      	b.n	800339c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_RCC_OscConfig+0x478>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fe f90a 	bl	8001510 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe f906 	bl	8001510 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e045      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCC_OscConfig+0x470>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x444>
 800331e:	e03d      	b.n	800339c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d107      	bne.n	8003338 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e038      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000
 8003334:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003338:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <HAL_RCC_OscConfig+0x4ec>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d028      	beq.n	8003398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d121      	bne.n	8003398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d11a      	bne.n	8003398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800336e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003370:	4293      	cmp	r3, r2
 8003372:	d111      	bne.n	8003398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	3b01      	subs	r3, #1
 8003382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d107      	bne.n	8003398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800

080033ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0cc      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b68      	ldr	r3, [pc, #416]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d90c      	bls.n	80033e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b65      	ldr	r3, [pc, #404]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b63      	ldr	r3, [pc, #396]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0b8      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d020      	beq.n	8003436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003400:	4b59      	ldr	r3, [pc, #356]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a58      	ldr	r2, [pc, #352]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800340a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003418:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a52      	ldr	r2, [pc, #328]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003424:	4b50      	ldr	r3, [pc, #320]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	494d      	ldr	r1, [pc, #308]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d044      	beq.n	80034cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d119      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e07f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d003      	beq.n	800346a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003466:	2b03      	cmp	r3, #3
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346a:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e06f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347a:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e067      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348a:	4b37      	ldr	r3, [pc, #220]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4934      	ldr	r1, [pc, #208]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	4313      	orrs	r3, r2
 800349a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800349c:	f7fe f838 	bl	8001510 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7fe f834 	bl	8001510 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e04f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 020c 	and.w	r2, r3, #12
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d1eb      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034cc:	4b25      	ldr	r3, [pc, #148]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d20c      	bcs.n	80034f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b22      	ldr	r3, [pc, #136]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e032      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4916      	ldr	r1, [pc, #88]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	490e      	ldr	r1, [pc, #56]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003532:	f000 f821 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 8003536:	4602      	mov	r2, r0
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	490a      	ldr	r1, [pc, #40]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	5ccb      	ldrb	r3, [r1, r3]
 8003546:	fa22 f303 	lsr.w	r3, r2, r3
 800354a:	4a09      	ldr	r2, [pc, #36]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <HAL_RCC_ClockConfig+0x1c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd ff98 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40023c00 	.word	0x40023c00
 8003568:	40023800 	.word	0x40023800
 800356c:	080072a0 	.word	0x080072a0
 8003570:	20000000 	.word	0x20000000
 8003574:	20000004 	.word	0x20000004

08003578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800357c:	b094      	sub	sp, #80	; 0x50
 800357e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	647b      	str	r3, [r7, #68]	; 0x44
 8003584:	2300      	movs	r3, #0
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003588:	2300      	movs	r3, #0
 800358a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003590:	4b79      	ldr	r3, [pc, #484]	; (8003778 <HAL_RCC_GetSysClockFreq+0x200>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b08      	cmp	r3, #8
 800359a:	d00d      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x40>
 800359c:	2b08      	cmp	r3, #8
 800359e:	f200 80e1 	bhi.w	8003764 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x34>
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d003      	beq.n	80035b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035aa:	e0db      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b73      	ldr	r3, [pc, #460]	; (800377c <HAL_RCC_GetSysClockFreq+0x204>)
 80035ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035b0:	e0db      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035b2:	4b73      	ldr	r3, [pc, #460]	; (8003780 <HAL_RCC_GetSysClockFreq+0x208>)
 80035b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b6:	e0d8      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b8:	4b6f      	ldr	r3, [pc, #444]	; (8003778 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c2:	4b6d      	ldr	r3, [pc, #436]	; (8003778 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d063      	beq.n	8003696 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ce:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	099b      	lsrs	r3, r3, #6
 80035d4:	2200      	movs	r2, #0
 80035d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e0:	633b      	str	r3, [r7, #48]	; 0x30
 80035e2:	2300      	movs	r3, #0
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
 80035e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035ea:	4622      	mov	r2, r4
 80035ec:	462b      	mov	r3, r5
 80035ee:	f04f 0000 	mov.w	r0, #0
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	0159      	lsls	r1, r3, #5
 80035f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fc:	0150      	lsls	r0, r2, #5
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4621      	mov	r1, r4
 8003604:	1a51      	subs	r1, r2, r1
 8003606:	6139      	str	r1, [r7, #16]
 8003608:	4629      	mov	r1, r5
 800360a:	eb63 0301 	sbc.w	r3, r3, r1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800361c:	4659      	mov	r1, fp
 800361e:	018b      	lsls	r3, r1, #6
 8003620:	4651      	mov	r1, sl
 8003622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003626:	4651      	mov	r1, sl
 8003628:	018a      	lsls	r2, r1, #6
 800362a:	4651      	mov	r1, sl
 800362c:	ebb2 0801 	subs.w	r8, r2, r1
 8003630:	4659      	mov	r1, fp
 8003632:	eb63 0901 	sbc.w	r9, r3, r1
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800364a:	4690      	mov	r8, r2
 800364c:	4699      	mov	r9, r3
 800364e:	4623      	mov	r3, r4
 8003650:	eb18 0303 	adds.w	r3, r8, r3
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	462b      	mov	r3, r5
 8003658:	eb49 0303 	adc.w	r3, r9, r3
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800366a:	4629      	mov	r1, r5
 800366c:	024b      	lsls	r3, r1, #9
 800366e:	4621      	mov	r1, r4
 8003670:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003674:	4621      	mov	r1, r4
 8003676:	024a      	lsls	r2, r1, #9
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367e:	2200      	movs	r2, #0
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
 8003682:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003684:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003688:	f7fc fdfa 	bl	8000280 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4613      	mov	r3, r2
 8003692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003694:	e058      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003696:	4b38      	ldr	r3, [pc, #224]	; (8003778 <HAL_RCC_GetSysClockFreq+0x200>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	2200      	movs	r2, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	4611      	mov	r1, r2
 80036a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036a6:	623b      	str	r3, [r7, #32]
 80036a8:	2300      	movs	r3, #0
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
 80036ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036b0:	4642      	mov	r2, r8
 80036b2:	464b      	mov	r3, r9
 80036b4:	f04f 0000 	mov.w	r0, #0
 80036b8:	f04f 0100 	mov.w	r1, #0
 80036bc:	0159      	lsls	r1, r3, #5
 80036be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c2:	0150      	lsls	r0, r2, #5
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4641      	mov	r1, r8
 80036ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ce:	4649      	mov	r1, r9
 80036d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036e8:	ebb2 040a 	subs.w	r4, r2, sl
 80036ec:	eb63 050b 	sbc.w	r5, r3, fp
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	00eb      	lsls	r3, r5, #3
 80036fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fe:	00e2      	lsls	r2, r4, #3
 8003700:	4614      	mov	r4, r2
 8003702:	461d      	mov	r5, r3
 8003704:	4643      	mov	r3, r8
 8003706:	18e3      	adds	r3, r4, r3
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	464b      	mov	r3, r9
 800370c:	eb45 0303 	adc.w	r3, r5, r3
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800371e:	4629      	mov	r1, r5
 8003720:	028b      	lsls	r3, r1, #10
 8003722:	4621      	mov	r1, r4
 8003724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003728:	4621      	mov	r1, r4
 800372a:	028a      	lsls	r2, r1, #10
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003732:	2200      	movs	r2, #0
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	61fa      	str	r2, [r7, #28]
 8003738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800373c:	f7fc fda0 	bl	8000280 <__aeabi_uldivmod>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4613      	mov	r3, r2
 8003746:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_GetSysClockFreq+0x200>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	0c1b      	lsrs	r3, r3, #16
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	3301      	adds	r3, #1
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800375a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003762:	e002      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_RCC_GetSysClockFreq+0x204>)
 8003766:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800376c:	4618      	mov	r0, r3
 800376e:	3750      	adds	r7, #80	; 0x50
 8003770:	46bd      	mov	sp, r7
 8003772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800
 800377c:	00f42400 	.word	0x00f42400
 8003780:	007a1200 	.word	0x007a1200

08003784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_RCC_GetHCLKFreq+0x14>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000000 	.word	0x20000000

0800379c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037a0:	f7ff fff0 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037a4:	4602      	mov	r2, r0
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	0a9b      	lsrs	r3, r3, #10
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	4903      	ldr	r1, [pc, #12]	; (80037c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037b2:	5ccb      	ldrb	r3, [r1, r3]
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40023800 	.word	0x40023800
 80037c0:	080072b0 	.word	0x080072b0

080037c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c8:	f7ff ffdc 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	0b5b      	lsrs	r3, r3, #13
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	4903      	ldr	r1, [pc, #12]	; (80037e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037da:	5ccb      	ldrb	r3, [r1, r3]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	080072b0 	.word	0x080072b0

080037ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e03f      	b.n	800387e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd fd38 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2224      	movs	r2, #36	; 0x24
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800382e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f829 	bl	8003888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800388c:	b0c0      	sub	sp, #256	; 0x100
 800388e:	af00      	add	r7, sp, #0
 8003890:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	68d9      	ldr	r1, [r3, #12]
 80038a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	ea40 0301 	orr.w	r3, r0, r1
 80038b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	431a      	orrs	r2, r3
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038e0:	f021 010c 	bic.w	r1, r1, #12
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038ee:	430b      	orrs	r3, r1
 80038f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	6999      	ldr	r1, [r3, #24]
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	ea40 0301 	orr.w	r3, r0, r1
 800390e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b8f      	ldr	r3, [pc, #572]	; (8003b54 <UART_SetConfig+0x2cc>)
 8003918:	429a      	cmp	r2, r3
 800391a:	d005      	beq.n	8003928 <UART_SetConfig+0xa0>
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b8d      	ldr	r3, [pc, #564]	; (8003b58 <UART_SetConfig+0x2d0>)
 8003924:	429a      	cmp	r2, r3
 8003926:	d104      	bne.n	8003932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003928:	f7ff ff4c 	bl	80037c4 <HAL_RCC_GetPCLK2Freq>
 800392c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003930:	e003      	b.n	800393a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003932:	f7ff ff33 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8003936:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003944:	f040 810c 	bne.w	8003b60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800394c:	2200      	movs	r2, #0
 800394e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003952:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800395a:	4622      	mov	r2, r4
 800395c:	462b      	mov	r3, r5
 800395e:	1891      	adds	r1, r2, r2
 8003960:	65b9      	str	r1, [r7, #88]	; 0x58
 8003962:	415b      	adcs	r3, r3
 8003964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800396a:	4621      	mov	r1, r4
 800396c:	eb12 0801 	adds.w	r8, r2, r1
 8003970:	4629      	mov	r1, r5
 8003972:	eb43 0901 	adc.w	r9, r3, r1
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800398a:	4690      	mov	r8, r2
 800398c:	4699      	mov	r9, r3
 800398e:	4623      	mov	r3, r4
 8003990:	eb18 0303 	adds.w	r3, r8, r3
 8003994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003998:	462b      	mov	r3, r5
 800399a:	eb49 0303 	adc.w	r3, r9, r3
 800399e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039b6:	460b      	mov	r3, r1
 80039b8:	18db      	adds	r3, r3, r3
 80039ba:	653b      	str	r3, [r7, #80]	; 0x50
 80039bc:	4613      	mov	r3, r2
 80039be:	eb42 0303 	adc.w	r3, r2, r3
 80039c2:	657b      	str	r3, [r7, #84]	; 0x54
 80039c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039cc:	f7fc fc58 	bl	8000280 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4b61      	ldr	r3, [pc, #388]	; (8003b5c <UART_SetConfig+0x2d4>)
 80039d6:	fba3 2302 	umull	r2, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	011c      	lsls	r4, r3, #4
 80039de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	1891      	adds	r1, r2, r2
 80039f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80039f8:	415b      	adcs	r3, r3
 80039fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a00:	4641      	mov	r1, r8
 8003a02:	eb12 0a01 	adds.w	sl, r2, r1
 8003a06:	4649      	mov	r1, r9
 8003a08:	eb43 0b01 	adc.w	fp, r3, r1
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a20:	4692      	mov	sl, r2
 8003a22:	469b      	mov	fp, r3
 8003a24:	4643      	mov	r3, r8
 8003a26:	eb1a 0303 	adds.w	r3, sl, r3
 8003a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a2e:	464b      	mov	r3, r9
 8003a30:	eb4b 0303 	adc.w	r3, fp, r3
 8003a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	18db      	adds	r3, r3, r3
 8003a50:	643b      	str	r3, [r7, #64]	; 0x40
 8003a52:	4613      	mov	r3, r2
 8003a54:	eb42 0303 	adc.w	r3, r2, r3
 8003a58:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a62:	f7fc fc0d 	bl	8000280 <__aeabi_uldivmod>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <UART_SetConfig+0x2d4>)
 8003a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2264      	movs	r2, #100	; 0x64
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	1acb      	subs	r3, r1, r3
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a82:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <UART_SetConfig+0x2d4>)
 8003a84:	fba3 2302 	umull	r2, r3, r3, r2
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a90:	441c      	add	r4, r3
 8003a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	1891      	adds	r1, r2, r2
 8003aaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003aac:	415b      	adcs	r3, r3
 8003aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	1851      	adds	r1, r2, r1
 8003ab8:	6339      	str	r1, [r7, #48]	; 0x30
 8003aba:	4649      	mov	r1, r9
 8003abc:	414b      	adcs	r3, r1
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003acc:	4659      	mov	r1, fp
 8003ace:	00cb      	lsls	r3, r1, #3
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	00ca      	lsls	r2, r1, #3
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ae8:	464b      	mov	r3, r9
 8003aea:	460a      	mov	r2, r1
 8003aec:	eb42 0303 	adc.w	r3, r2, r3
 8003af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b08:	460b      	mov	r3, r1
 8003b0a:	18db      	adds	r3, r3, r3
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0e:	4613      	mov	r3, r2
 8003b10:	eb42 0303 	adc.w	r3, r2, r3
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b1e:	f7fc fbaf 	bl	8000280 <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <UART_SetConfig+0x2d4>)
 8003b28:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	2164      	movs	r1, #100	; 0x64
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	3332      	adds	r3, #50	; 0x32
 8003b3a:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <UART_SetConfig+0x2d4>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	f003 0207 	and.w	r2, r3, #7
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4422      	add	r2, r4
 8003b4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b50:	e105      	b.n	8003d5e <UART_SetConfig+0x4d6>
 8003b52:	bf00      	nop
 8003b54:	40011000 	.word	0x40011000
 8003b58:	40011400 	.word	0x40011400
 8003b5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b72:	4642      	mov	r2, r8
 8003b74:	464b      	mov	r3, r9
 8003b76:	1891      	adds	r1, r2, r2
 8003b78:	6239      	str	r1, [r7, #32]
 8003b7a:	415b      	adcs	r3, r3
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b82:	4641      	mov	r1, r8
 8003b84:	1854      	adds	r4, r2, r1
 8003b86:	4649      	mov	r1, r9
 8003b88:	eb43 0501 	adc.w	r5, r3, r1
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	00eb      	lsls	r3, r5, #3
 8003b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b9a:	00e2      	lsls	r2, r4, #3
 8003b9c:	4614      	mov	r4, r2
 8003b9e:	461d      	mov	r5, r3
 8003ba0:	4643      	mov	r3, r8
 8003ba2:	18e3      	adds	r3, r4, r3
 8003ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ba8:	464b      	mov	r3, r9
 8003baa:	eb45 0303 	adc.w	r3, r5, r3
 8003bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bce:	4629      	mov	r1, r5
 8003bd0:	008b      	lsls	r3, r1, #2
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bd8:	4621      	mov	r1, r4
 8003bda:	008a      	lsls	r2, r1, #2
 8003bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003be0:	f7fc fb4e 	bl	8000280 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4b60      	ldr	r3, [pc, #384]	; (8003d6c <UART_SetConfig+0x4e4>)
 8003bea:	fba3 2302 	umull	r2, r3, r3, r2
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	011c      	lsls	r4, r3, #4
 8003bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c04:	4642      	mov	r2, r8
 8003c06:	464b      	mov	r3, r9
 8003c08:	1891      	adds	r1, r2, r2
 8003c0a:	61b9      	str	r1, [r7, #24]
 8003c0c:	415b      	adcs	r3, r3
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c14:	4641      	mov	r1, r8
 8003c16:	1851      	adds	r1, r2, r1
 8003c18:	6139      	str	r1, [r7, #16]
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	414b      	adcs	r3, r1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	00cb      	lsls	r3, r1, #3
 8003c30:	4651      	mov	r1, sl
 8003c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c36:	4651      	mov	r1, sl
 8003c38:	00ca      	lsls	r2, r1, #3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4642      	mov	r2, r8
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c48:	464b      	mov	r3, r9
 8003c4a:	460a      	mov	r2, r1
 8003c4c:	eb42 0303 	adc.w	r3, r2, r3
 8003c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	008b      	lsls	r3, r1, #2
 8003c70:	4641      	mov	r1, r8
 8003c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c76:	4641      	mov	r1, r8
 8003c78:	008a      	lsls	r2, r1, #2
 8003c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c7e:	f7fc faff 	bl	8000280 <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <UART_SetConfig+0x4e4>)
 8003c88:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	2164      	movs	r1, #100	; 0x64
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	3332      	adds	r3, #50	; 0x32
 8003c9a:	4a34      	ldr	r2, [pc, #208]	; (8003d6c <UART_SetConfig+0x4e4>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca6:	441c      	add	r4, r3
 8003ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cac:	2200      	movs	r2, #0
 8003cae:	673b      	str	r3, [r7, #112]	; 0x70
 8003cb0:	677a      	str	r2, [r7, #116]	; 0x74
 8003cb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cb6:	4642      	mov	r2, r8
 8003cb8:	464b      	mov	r3, r9
 8003cba:	1891      	adds	r1, r2, r2
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	415b      	adcs	r3, r3
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	1851      	adds	r1, r2, r1
 8003cca:	6039      	str	r1, [r7, #0]
 8003ccc:	4649      	mov	r1, r9
 8003cce:	414b      	adcs	r3, r1
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cde:	4659      	mov	r1, fp
 8003ce0:	00cb      	lsls	r3, r1, #3
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ce8:	4651      	mov	r1, sl
 8003cea:	00ca      	lsls	r2, r1, #3
 8003cec:	4610      	mov	r0, r2
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4642      	mov	r2, r8
 8003cf4:	189b      	adds	r3, r3, r2
 8003cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cf8:	464b      	mov	r3, r9
 8003cfa:	460a      	mov	r2, r1
 8003cfc:	eb42 0303 	adc.w	r3, r2, r3
 8003d00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d0c:	667a      	str	r2, [r7, #100]	; 0x64
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	008b      	lsls	r3, r1, #2
 8003d1e:	4641      	mov	r1, r8
 8003d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d24:	4641      	mov	r1, r8
 8003d26:	008a      	lsls	r2, r1, #2
 8003d28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d2c:	f7fc faa8 	bl	8000280 <__aeabi_uldivmod>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <UART_SetConfig+0x4e4>)
 8003d36:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2164      	movs	r1, #100	; 0x64
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	3332      	adds	r3, #50	; 0x32
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <UART_SetConfig+0x4e4>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	f003 020f 	and.w	r2, r3, #15
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4422      	add	r2, r4
 8003d5c:	609a      	str	r2, [r3, #8]
}
 8003d5e:	bf00      	nop
 8003d60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d64:	46bd      	mov	sp, r7
 8003d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d6a:	bf00      	nop
 8003d6c:	51eb851f 	.word	0x51eb851f

08003d70 <__NVIC_SetPriority>:
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	6039      	str	r1, [r7, #0]
 8003d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	db0a      	blt.n	8003d9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	490c      	ldr	r1, [pc, #48]	; (8003dbc <__NVIC_SetPriority+0x4c>)
 8003d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8e:	0112      	lsls	r2, r2, #4
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	440b      	add	r3, r1
 8003d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d98:	e00a      	b.n	8003db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	4908      	ldr	r1, [pc, #32]	; (8003dc0 <__NVIC_SetPriority+0x50>)
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	3b04      	subs	r3, #4
 8003da8:	0112      	lsls	r2, r2, #4
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	440b      	add	r3, r1
 8003dae:	761a      	strb	r2, [r3, #24]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000e100 	.word	0xe000e100
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003dc8:	2100      	movs	r1, #0
 8003dca:	f06f 0004 	mvn.w	r0, #4
 8003dce:	f7ff ffcf 	bl	8003d70 <__NVIC_SetPriority>
#endif
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dde:	f3ef 8305 	mrs	r3, IPSR
 8003de2:	603b      	str	r3, [r7, #0]
  return(result);
 8003de4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003dea:	f06f 0305 	mvn.w	r3, #5
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	e00c      	b.n	8003e0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <osKernelInitialize+0x44>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d105      	bne.n	8003e06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003dfa:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <osKernelInitialize+0x44>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	607b      	str	r3, [r7, #4]
 8003e04:	e002      	b.n	8003e0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e0c:	687b      	ldr	r3, [r7, #4]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	200001d4 	.word	0x200001d4

08003e20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e26:	f3ef 8305 	mrs	r3, IPSR
 8003e2a:	603b      	str	r3, [r7, #0]
  return(result);
 8003e2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e32:	f06f 0305 	mvn.w	r3, #5
 8003e36:	607b      	str	r3, [r7, #4]
 8003e38:	e010      	b.n	8003e5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <osKernelStart+0x48>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d109      	bne.n	8003e56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e42:	f7ff ffbf 	bl	8003dc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <osKernelStart+0x48>)
 8003e48:	2202      	movs	r2, #2
 8003e4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e4c:	f001 fc9e 	bl	800578c <vTaskStartScheduler>
      stat = osOK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	e002      	b.n	8003e5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e5c:	687b      	ldr	r3, [r7, #4]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200001d4 	.word	0x200001d4

08003e6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08e      	sub	sp, #56	; 0x38
 8003e70:	af04      	add	r7, sp, #16
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e7c:	f3ef 8305 	mrs	r3, IPSR
 8003e80:	617b      	str	r3, [r7, #20]
  return(result);
 8003e82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d17e      	bne.n	8003f86 <osThreadNew+0x11a>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d07b      	beq.n	8003f86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003e92:	2318      	movs	r3, #24
 8003e94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d045      	beq.n	8003f32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <osThreadNew+0x48>
        name = attr->name;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <osThreadNew+0x6e>
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b38      	cmp	r3, #56	; 0x38
 8003ecc:	d805      	bhi.n	8003eda <osThreadNew+0x6e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <osThreadNew+0x72>
        return (NULL);
 8003eda:	2300      	movs	r3, #0
 8003edc:	e054      	b.n	8003f88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00e      	beq.n	8003f14 <osThreadNew+0xa8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b5b      	cmp	r3, #91	; 0x5b
 8003efc:	d90a      	bls.n	8003f14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <osThreadNew+0xa8>
        mem = 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	e010      	b.n	8003f36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10c      	bne.n	8003f36 <osThreadNew+0xca>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d108      	bne.n	8003f36 <osThreadNew+0xca>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d104      	bne.n	8003f36 <osThreadNew+0xca>
          mem = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	e001      	b.n	8003f36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d110      	bne.n	8003f5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f44:	9202      	str	r2, [sp, #8]
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6a3a      	ldr	r2, [r7, #32]
 8003f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f001 fa44 	bl	80053e0 <xTaskCreateStatic>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	e013      	b.n	8003f86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d110      	bne.n	8003f86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	f107 0310 	add.w	r3, r7, #16
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f001 fa8f 	bl	800549a <xTaskCreate>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d001      	beq.n	8003f86 <osThreadNew+0x11a>
            hTask = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f86:	693b      	ldr	r3, [r7, #16]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3728      	adds	r7, #40	; 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f98:	f3ef 8305 	mrs	r3, IPSR
 8003f9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <osDelay+0x1c>
    stat = osErrorISR;
 8003fa4:	f06f 0305 	mvn.w	r3, #5
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e007      	b.n	8003fbc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <osDelay+0x2c>
      vTaskDelay(ticks);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f001 fbb4 	bl	8005724 <vTaskDelay>
    }
  }

  return (stat);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003fd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4a06      	ldr	r2, [pc, #24]	; (8003ff8 <vApplicationGetIdleTaskMemory+0x30>)
 8003fde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2280      	movs	r2, #128	; 0x80
 8003fe4:	601a      	str	r2, [r3, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	200001d8 	.word	0x200001d8
 8003ff8:	20000234 	.word	0x20000234

08003ffc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4a07      	ldr	r2, [pc, #28]	; (8004028 <vApplicationGetTimerTaskMemory+0x2c>)
 800400c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4a06      	ldr	r2, [pc, #24]	; (800402c <vApplicationGetTimerTaskMemory+0x30>)
 8004012:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800401a:	601a      	str	r2, [r3, #0]
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	20000434 	.word	0x20000434
 800402c:	20000490 	.word	0x20000490

08004030 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800403c:	f001 fc0c 	bl	8005858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004040:	4b5b      	ldr	r3, [pc, #364]	; (80041b0 <pvPortMalloc+0x180>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004048:	f000 f920 	bl	800428c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800404c:	4b59      	ldr	r3, [pc, #356]	; (80041b4 <pvPortMalloc+0x184>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	f040 8093 	bne.w	8004180 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01d      	beq.n	800409c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004060:	2208      	movs	r2, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	2b00      	cmp	r3, #0
 8004070:	d014      	beq.n	800409c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f023 0307 	bic.w	r3, r3, #7
 8004078:	3308      	adds	r3, #8
 800407a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d06e      	beq.n	8004180 <pvPortMalloc+0x150>
 80040a2:	4b45      	ldr	r3, [pc, #276]	; (80041b8 <pvPortMalloc+0x188>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d869      	bhi.n	8004180 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040ac:	4b43      	ldr	r3, [pc, #268]	; (80041bc <pvPortMalloc+0x18c>)
 80040ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040b0:	4b42      	ldr	r3, [pc, #264]	; (80041bc <pvPortMalloc+0x18c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040b6:	e004      	b.n	80040c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d903      	bls.n	80040d4 <pvPortMalloc+0xa4>
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f1      	bne.n	80040b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040d4:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <pvPortMalloc+0x180>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040da:	429a      	cmp	r2, r3
 80040dc:	d050      	beq.n	8004180 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2208      	movs	r2, #8
 80040e4:	4413      	add	r3, r2
 80040e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	1ad2      	subs	r2, r2, r3
 80040f8:	2308      	movs	r3, #8
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d91f      	bls.n	8004140 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <pvPortMalloc+0xf8>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	613b      	str	r3, [r7, #16]
}
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	1ad2      	subs	r2, r2, r3
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800413a:	69b8      	ldr	r0, [r7, #24]
 800413c:	f000 f908 	bl	8004350 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <pvPortMalloc+0x188>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <pvPortMalloc+0x188>)
 800414c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800414e:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <pvPortMalloc+0x188>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <pvPortMalloc+0x190>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d203      	bcs.n	8004162 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800415a:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <pvPortMalloc+0x188>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <pvPortMalloc+0x190>)
 8004160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <pvPortMalloc+0x184>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	431a      	orrs	r2, r3
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004176:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <pvPortMalloc+0x194>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	4a11      	ldr	r2, [pc, #68]	; (80041c4 <pvPortMalloc+0x194>)
 800417e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004180:	f001 fb78 	bl	8005874 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <pvPortMalloc+0x174>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	60fb      	str	r3, [r7, #12]
}
 80041a0:	bf00      	nop
 80041a2:	e7fe      	b.n	80041a2 <pvPortMalloc+0x172>
	return pvReturn;
 80041a4:	69fb      	ldr	r3, [r7, #28]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3728      	adds	r7, #40	; 0x28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20004498 	.word	0x20004498
 80041b4:	200044ac 	.word	0x200044ac
 80041b8:	2000449c 	.word	0x2000449c
 80041bc:	20004490 	.word	0x20004490
 80041c0:	200044a0 	.word	0x200044a0
 80041c4:	200044a4 	.word	0x200044a4

080041c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d04d      	beq.n	8004276 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041da:	2308      	movs	r3, #8
 80041dc:	425b      	negs	r3, r3
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4413      	add	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <vPortFree+0xb8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <vPortFree+0x44>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	60fb      	str	r3, [r7, #12]
}
 8004208:	bf00      	nop
 800420a:	e7fe      	b.n	800420a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <vPortFree+0x62>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	60bb      	str	r3, [r7, #8]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	4b14      	ldr	r3, [pc, #80]	; (8004280 <vPortFree+0xb8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01e      	beq.n	8004276 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d11a      	bne.n	8004276 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <vPortFree+0xb8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	43db      	mvns	r3, r3
 800424a:	401a      	ands	r2, r3
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004250:	f001 fb02 	bl	8005858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <vPortFree+0xbc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4413      	add	r3, r2
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <vPortFree+0xbc>)
 8004260:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004262:	6938      	ldr	r0, [r7, #16]
 8004264:	f000 f874 	bl	8004350 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <vPortFree+0xc0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3301      	adds	r3, #1
 800426e:	4a06      	ldr	r2, [pc, #24]	; (8004288 <vPortFree+0xc0>)
 8004270:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004272:	f001 faff 	bl	8005874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004276:	bf00      	nop
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	200044ac 	.word	0x200044ac
 8004284:	2000449c 	.word	0x2000449c
 8004288:	200044a8 	.word	0x200044a8

0800428c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004292:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004296:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <prvHeapInit+0xac>)
 800429a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3307      	adds	r3, #7
 80042aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0307 	bic.w	r3, r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <prvHeapInit+0xac>)
 80042bc:	4413      	add	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <prvHeapInit+0xb0>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042ca:	4b1c      	ldr	r3, [pc, #112]	; (800433c <prvHeapInit+0xb0>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	4413      	add	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042d8:	2208      	movs	r2, #8
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0307 	bic.w	r3, r3, #7
 80042e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a15      	ldr	r2, [pc, #84]	; (8004340 <prvHeapInit+0xb4>)
 80042ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <prvHeapInit+0xb4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <prvHeapInit+0xb4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	1ad2      	subs	r2, r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <prvHeapInit+0xb4>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <prvHeapInit+0xb8>)
 800431a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a09      	ldr	r2, [pc, #36]	; (8004348 <prvHeapInit+0xbc>)
 8004322:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <prvHeapInit+0xc0>)
 8004326:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800432a:	601a      	str	r2, [r3, #0]
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	20000890 	.word	0x20000890
 800433c:	20004490 	.word	0x20004490
 8004340:	20004498 	.word	0x20004498
 8004344:	200044a0 	.word	0x200044a0
 8004348:	2000449c 	.word	0x2000449c
 800434c:	200044ac 	.word	0x200044ac

08004350 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004358:	4b28      	ldr	r3, [pc, #160]	; (80043fc <prvInsertBlockIntoFreeList+0xac>)
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e002      	b.n	8004364 <prvInsertBlockIntoFreeList+0x14>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	d8f7      	bhi.n	800435e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4413      	add	r3, r2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d108      	bne.n	8004392 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	441a      	add	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d118      	bne.n	80043d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <prvInsertBlockIntoFreeList+0xb0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d00d      	beq.n	80043ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e008      	b.n	80043e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <prvInsertBlockIntoFreeList+0xb0>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e003      	b.n	80043e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d002      	beq.n	80043ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20004490 	.word	0x20004490
 8004400:	20004498 	.word	0x20004498

08004404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f103 0208 	add.w	r2, r3, #8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800441c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f103 0208 	add.w	r2, r3, #8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f103 0208 	add.w	r2, r3, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044bc:	d103      	bne.n	80044c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e00c      	b.n	80044e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3308      	adds	r3, #8
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e002      	b.n	80044d4 <vListInsert+0x2e>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d2f6      	bcs.n	80044ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	601a      	str	r2, [r3, #0]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6892      	ldr	r2, [r2, #8]
 800452e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6852      	ldr	r2, [r2, #4]
 8004538:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d103      	bne.n	800454c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	1e5a      	subs	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3b04      	subs	r3, #4
 800457c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b04      	subs	r3, #4
 800458a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f023 0201 	bic.w	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3b04      	subs	r3, #4
 800459a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800459c:	4a0c      	ldr	r2, [pc, #48]	; (80045d0 <pxPortInitialiseStack+0x64>)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3b14      	subs	r3, #20
 80045a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3b04      	subs	r3, #4
 80045b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f06f 0202 	mvn.w	r2, #2
 80045ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3b20      	subs	r3, #32
 80045c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	080045d5 	.word	0x080045d5

080045d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <prvTaskExitError+0x54>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e6:	d00a      	beq.n	80045fe <prvTaskExitError+0x2a>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	60fb      	str	r3, [r7, #12]
}
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <prvTaskExitError+0x28>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	60bb      	str	r3, [r7, #8]
}
 8004610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004612:	bf00      	nop
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0fc      	beq.n	8004614 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	2000000c 	.word	0x2000000c
 800462c:	00000000 	.word	0x00000000

08004630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004630:	4b07      	ldr	r3, [pc, #28]	; (8004650 <pxCurrentTCBConst2>)
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	6808      	ldr	r0, [r1, #0]
 8004636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	f380 8809 	msr	PSP, r0
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f380 8811 	msr	BASEPRI, r0
 800464a:	4770      	bx	lr
 800464c:	f3af 8000 	nop.w

08004650 <pxCurrentTCBConst2>:
 8004650:	200044f8 	.word	0x200044f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop

08004658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004658:	4808      	ldr	r0, [pc, #32]	; (800467c <prvPortStartFirstTask+0x24>)
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	6800      	ldr	r0, [r0, #0]
 800465e:	f380 8808 	msr	MSP, r0
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8814 	msr	CONTROL, r0
 800466a:	b662      	cpsie	i
 800466c:	b661      	cpsie	f
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	df00      	svc	0
 8004678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800467a:	bf00      	nop
 800467c:	e000ed08 	.word	0xe000ed08

08004680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004686:	4b46      	ldr	r3, [pc, #280]	; (80047a0 <xPortStartScheduler+0x120>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a46      	ldr	r2, [pc, #280]	; (80047a4 <xPortStartScheduler+0x124>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10a      	bne.n	80046a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	613b      	str	r3, [r7, #16]
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046a6:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <xPortStartScheduler+0x120>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3f      	ldr	r2, [pc, #252]	; (80047a8 <xPortStartScheduler+0x128>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10a      	bne.n	80046c6 <xPortStartScheduler+0x46>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60fb      	str	r3, [r7, #12]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046c6:	4b39      	ldr	r3, [pc, #228]	; (80047ac <xPortStartScheduler+0x12c>)
 80046c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	22ff      	movs	r2, #255	; 0xff
 80046d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <xPortStartScheduler+0x130>)
 80046ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ee:	4b31      	ldr	r3, [pc, #196]	; (80047b4 <xPortStartScheduler+0x134>)
 80046f0:	2207      	movs	r2, #7
 80046f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046f4:	e009      	b.n	800470a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <xPortStartScheduler+0x134>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	4a2d      	ldr	r2, [pc, #180]	; (80047b4 <xPortStartScheduler+0x134>)
 80046fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d0ef      	beq.n	80046f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004716:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <xPortStartScheduler+0x134>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1c3 0307 	rsb	r3, r3, #7
 800471e:	2b04      	cmp	r3, #4
 8004720:	d00a      	beq.n	8004738 <xPortStartScheduler+0xb8>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60bb      	str	r3, [r7, #8]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <xPortStartScheduler+0x134>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <xPortStartScheduler+0x134>)
 8004740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004742:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <xPortStartScheduler+0x134>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800474a:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <xPortStartScheduler+0x134>)
 800474c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	b2da      	uxtb	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004756:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <xPortStartScheduler+0x138>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <xPortStartScheduler+0x138>)
 800475c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <xPortStartScheduler+0x138>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <xPortStartScheduler+0x138>)
 8004768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800476c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800476e:	f000 f8dd 	bl	800492c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004772:	4b12      	ldr	r3, [pc, #72]	; (80047bc <xPortStartScheduler+0x13c>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004778:	f000 f8fc 	bl	8004974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <xPortStartScheduler+0x140>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a0f      	ldr	r2, [pc, #60]	; (80047c0 <xPortStartScheduler+0x140>)
 8004782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004788:	f7ff ff66 	bl	8004658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800478c:	f001 f9da 	bl	8005b44 <vTaskSwitchContext>
	prvTaskExitError();
 8004790:	f7ff ff20 	bl	80045d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	e000ed00 	.word	0xe000ed00
 80047a4:	410fc271 	.word	0x410fc271
 80047a8:	410fc270 	.word	0x410fc270
 80047ac:	e000e400 	.word	0xe000e400
 80047b0:	200044b0 	.word	0x200044b0
 80047b4:	200044b4 	.word	0x200044b4
 80047b8:	e000ed20 	.word	0xe000ed20
 80047bc:	2000000c 	.word	0x2000000c
 80047c0:	e000ef34 	.word	0xe000ef34

080047c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	607b      	str	r3, [r7, #4]
}
 80047dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <vPortEnterCritical+0x58>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <vPortEnterCritical+0x58>)
 80047e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <vPortEnterCritical+0x58>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d10f      	bne.n	8004810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <vPortEnterCritical+0x5c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <vPortEnterCritical+0x4c>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	603b      	str	r3, [r7, #0]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vPortEnterCritical+0x4a>
	}
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	2000000c 	.word	0x2000000c
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <vPortExitCritical+0x50>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <vPortExitCritical+0x24>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	607b      	str	r3, [r7, #4]
}
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <vPortExitCritical+0x50>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3b01      	subs	r3, #1
 800484e:	4a09      	ldr	r2, [pc, #36]	; (8004874 <vPortExitCritical+0x50>)
 8004850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <vPortExitCritical+0x50>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d105      	bne.n	8004866 <vPortExitCritical+0x42>
 800485a:	2300      	movs	r3, #0
 800485c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	2000000c 	.word	0x2000000c
	...

08004880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004880:	f3ef 8009 	mrs	r0, PSP
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <pxCurrentTCBConst>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f01e 0f10 	tst.w	lr, #16
 8004890:	bf08      	it	eq
 8004892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	6010      	str	r0, [r2, #0]
 800489c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048a4:	f380 8811 	msr	BASEPRI, r0
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f001 f948 	bl	8005b44 <vTaskSwitchContext>
 80048b4:	f04f 0000 	mov.w	r0, #0
 80048b8:	f380 8811 	msr	BASEPRI, r0
 80048bc:	bc09      	pop	{r0, r3}
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	6808      	ldr	r0, [r1, #0]
 80048c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c6:	f01e 0f10 	tst.w	lr, #16
 80048ca:	bf08      	it	eq
 80048cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048d0:	f380 8809 	msr	PSP, r0
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst>:
 80048e0:	200044f8 	.word	0x200044f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	607b      	str	r3, [r7, #4]
}
 8004900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004902:	f001 f865 	bl	80059d0 <xTaskIncrementTick>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <xPortSysTickHandler+0x40>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	2300      	movs	r3, #0
 8004916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f383 8811 	msr	BASEPRI, r3
}
 800491e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <vPortSetupTimerInterrupt+0x38>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <vPortSetupTimerInterrupt+0x3c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0a      	ldr	r2, [pc, #40]	; (800496c <vPortSetupTimerInterrupt+0x40>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	4a09      	ldr	r2, [pc, #36]	; (8004970 <vPortSetupTimerInterrupt+0x44>)
 800494a:	3b01      	subs	r3, #1
 800494c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000e010 	.word	0xe000e010
 8004964:	e000e018 	.word	0xe000e018
 8004968:	20000000 	.word	0x20000000
 800496c:	10624dd3 	.word	0x10624dd3
 8004970:	e000e014 	.word	0xe000e014

08004974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004984 <vPortEnableVFP+0x10>
 8004978:	6801      	ldr	r1, [r0, #0]
 800497a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800497e:	6001      	str	r1, [r0, #0]
 8004980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004982:	bf00      	nop
 8004984:	e000ed88 	.word	0xe000ed88

08004988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800498e:	f3ef 8305 	mrs	r3, IPSR
 8004992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d914      	bls.n	80049c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800499a:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <vPortValidateInterruptPriority+0x70>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <vPortValidateInterruptPriority+0x74>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	7afa      	ldrb	r2, [r7, #11]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d20a      	bcs.n	80049c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
}
 80049c0:	bf00      	nop
 80049c2:	e7fe      	b.n	80049c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <vPortValidateInterruptPriority+0x78>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049cc:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <vPortValidateInterruptPriority+0x7c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d90a      	bls.n	80049ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	603b      	str	r3, [r7, #0]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <vPortValidateInterruptPriority+0x60>
	}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	e000e3f0 	.word	0xe000e3f0
 80049fc:	200044b0 	.word	0x200044b0
 8004a00:	e000ed0c 	.word	0xe000ed0c
 8004a04:	200044b4 	.word	0x200044b4

08004a08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xQueueGenericReset+0x2a>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	60bb      	str	r3, [r7, #8]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a32:	f7ff fec7 	bl	80047c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	441a      	add	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	3b01      	subs	r3, #1
 8004a64:	68f9      	ldr	r1, [r7, #12]
 8004a66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	441a      	add	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	22ff      	movs	r2, #255	; 0xff
 8004a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	22ff      	movs	r2, #255	; 0xff
 8004a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d114      	bne.n	8004ab2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01a      	beq.n	8004ac6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3310      	adds	r3, #16
 8004a94:	4618      	mov	r0, r3
 8004a96:	f001 f903 	bl	8005ca0 <xTaskRemoveFromEventList>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d012      	beq.n	8004ac6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <xQueueGenericReset+0xcc>)
 8004aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	e009      	b.n	8004ac6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3310      	adds	r3, #16
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fca4 	bl	8004404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3324      	adds	r3, #36	; 0x24
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fc9f 	bl	8004404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ac6:	f7ff fead 	bl	8004824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004aca:	2301      	movs	r3, #1
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	e000ed04 	.word	0xe000ed04

08004ad8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08e      	sub	sp, #56	; 0x38
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <xQueueGenericCreateStatic+0x52>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <xQueueGenericCreateStatic+0x56>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <xQueueGenericCreateStatic+0x58>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	623b      	str	r3, [r7, #32]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <xQueueGenericCreateStatic+0x7e>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <xQueueGenericCreateStatic+0x82>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <xQueueGenericCreateStatic+0x84>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	61fb      	str	r3, [r7, #28]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b76:	2350      	movs	r3, #80	; 0x50
 8004b78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b50      	cmp	r3, #80	; 0x50
 8004b7e:	d00a      	beq.n	8004b96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	61bb      	str	r3, [r7, #24]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00d      	beq.n	8004bbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004baa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f805 	bl	8004bc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3730      	adds	r7, #48	; 0x30
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d103      	bne.n	8004be4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e002      	b.n	8004bea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	69b8      	ldr	r0, [r7, #24]
 8004bfa:	f7ff ff05 	bl	8004a08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08e      	sub	sp, #56	; 0x38
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xQueueGenericSend+0x32>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <xQueueGenericSend+0x40>
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <xQueueGenericSend+0x44>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <xQueueGenericSend+0x46>
 8004c54:	2300      	movs	r3, #0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <xQueueGenericSend+0x60>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d103      	bne.n	8004c7e <xQueueGenericSend+0x6e>
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <xQueueGenericSend+0x72>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <xQueueGenericSend+0x74>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <xQueueGenericSend+0x8e>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	623b      	str	r3, [r7, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c9e:	f001 f9bd 	bl	800601c <xTaskGetSchedulerState>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <xQueueGenericSend+0x9e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <xQueueGenericSend+0xa2>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xQueueGenericSend+0xa4>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xQueueGenericSend+0xbe>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	61fb      	str	r3, [r7, #28]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cce:	f7ff fd79 	bl	80047c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <xQueueGenericSend+0xd4>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d129      	bne.n	8004d38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cea:	f000 fa0b 	bl	8005104 <prvCopyDataToQueue>
 8004cee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d010      	beq.n	8004d1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	3324      	adds	r3, #36	; 0x24
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 ffcf 	bl	8005ca0 <xTaskRemoveFromEventList>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d08:	4b3f      	ldr	r3, [pc, #252]	; (8004e08 <xQueueGenericSend+0x1f8>)
 8004d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	e00a      	b.n	8004d30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d20:	4b39      	ldr	r3, [pc, #228]	; (8004e08 <xQueueGenericSend+0x1f8>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d30:	f7ff fd78 	bl	8004824 <vPortExitCritical>
				return pdPASS;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e063      	b.n	8004e00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d103      	bne.n	8004d46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d3e:	f7ff fd71 	bl	8004824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e05c      	b.n	8004e00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d4c:	f107 0314 	add.w	r3, r7, #20
 8004d50:	4618      	mov	r0, r3
 8004d52:	f001 f809 	bl	8005d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d56:	2301      	movs	r3, #1
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d5a:	f7ff fd63 	bl	8004824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d5e:	f000 fd7b 	bl	8005858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d62:	f7ff fd2f 	bl	80047c4 <vPortEnterCritical>
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d72:	d103      	bne.n	8004d7c <xQueueGenericSend+0x16c>
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d82:	b25b      	sxtb	r3, r3
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d88:	d103      	bne.n	8004d92 <xQueueGenericSend+0x182>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d92:	f7ff fd47 	bl	8004824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d96:	1d3a      	adds	r2, r7, #4
 8004d98:	f107 0314 	add.w	r3, r7, #20
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fff8 	bl	8005d94 <xTaskCheckForTimeOut>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d124      	bne.n	8004df4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dac:	f000 faa2 	bl	80052f4 <prvIsQueueFull>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d018      	beq.n	8004de8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	3310      	adds	r3, #16
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 ff1e 	bl	8005c00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dc6:	f000 fa2d 	bl	8005224 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dca:	f000 fd53 	bl	8005874 <xTaskResumeAll>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f47f af7c 	bne.w	8004cce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <xQueueGenericSend+0x1f8>)
 8004dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	e772      	b.n	8004cce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dea:	f000 fa1b 	bl	8005224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dee:	f000 fd41 	bl	8005874 <xTaskResumeAll>
 8004df2:	e76c      	b.n	8004cce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004df6:	f000 fa15 	bl	8005224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dfa:	f000 fd3b 	bl	8005874 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004dfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3738      	adds	r7, #56	; 0x38
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b090      	sub	sp, #64	; 0x40
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d103      	bne.n	8004e48 <xQueueGenericSendFromISR+0x3c>
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <xQueueGenericSendFromISR+0x40>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <xQueueGenericSendFromISR+0x42>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d103      	bne.n	8004e76 <xQueueGenericSendFromISR+0x6a>
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <xQueueGenericSendFromISR+0x6e>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <xQueueGenericSendFromISR+0x70>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	623b      	str	r3, [r7, #32]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e96:	f7ff fd77 	bl	8004988 <vPortValidateInterruptPriority>
	__asm volatile
 8004e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	61fa      	str	r2, [r7, #28]
 8004eb0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d302      	bcc.n	8004ec8 <xQueueGenericSendFromISR+0xbc>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d12f      	bne.n	8004f28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ede:	f000 f911 	bl	8005104 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ee2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eea:	d112      	bne.n	8004f12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d016      	beq.n	8004f22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	3324      	adds	r3, #36	; 0x24
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fed1 	bl	8005ca0 <xTaskRemoveFromEventList>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00e      	beq.n	8004f22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00b      	beq.n	8004f22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e007      	b.n	8004f22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f16:	3301      	adds	r3, #1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	b25a      	sxtb	r2, r3
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f22:	2301      	movs	r3, #1
 8004f24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004f26:	e001      	b.n	8004f2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f383 8811 	msr	BASEPRI, r3
}
 8004f36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3740      	adds	r7, #64	; 0x40
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08c      	sub	sp, #48	; 0x30
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f50:	2300      	movs	r3, #0
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <xQueueReceive+0x30>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	623b      	str	r3, [r7, #32]
}
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d103      	bne.n	8004f82 <xQueueReceive+0x3e>
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <xQueueReceive+0x42>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <xQueueReceive+0x44>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xQueueReceive+0x5e>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	61fb      	str	r3, [r7, #28]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fa2:	f001 f83b 	bl	800601c <xTaskGetSchedulerState>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d102      	bne.n	8004fb2 <xQueueReceive+0x6e>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <xQueueReceive+0x72>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <xQueueReceive+0x74>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <xQueueReceive+0x8e>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	61bb      	str	r3, [r7, #24]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fd2:	f7ff fbf7 	bl	80047c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01f      	beq.n	8005022 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe6:	f000 f8f7 	bl	80051d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00f      	beq.n	800501a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	3310      	adds	r3, #16
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fe4e 	bl	8005ca0 <xTaskRemoveFromEventList>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800500a:	4b3d      	ldr	r3, [pc, #244]	; (8005100 <xQueueReceive+0x1bc>)
 800500c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800501a:	f7ff fc03 	bl	8004824 <vPortExitCritical>
				return pdPASS;
 800501e:	2301      	movs	r3, #1
 8005020:	e069      	b.n	80050f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005028:	f7ff fbfc 	bl	8004824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800502c:	2300      	movs	r3, #0
 800502e:	e062      	b.n	80050f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005036:	f107 0310 	add.w	r3, r7, #16
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fe94 	bl	8005d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005044:	f7ff fbee 	bl	8004824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005048:	f000 fc06 	bl	8005858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800504c:	f7ff fbba 	bl	80047c4 <vPortEnterCritical>
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005056:	b25b      	sxtb	r3, r3
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800505c:	d103      	bne.n	8005066 <xQueueReceive+0x122>
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800506c:	b25b      	sxtb	r3, r3
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005072:	d103      	bne.n	800507c <xQueueReceive+0x138>
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800507c:	f7ff fbd2 	bl	8004824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005080:	1d3a      	adds	r2, r7, #4
 8005082:	f107 0310 	add.w	r3, r7, #16
 8005086:	4611      	mov	r1, r2
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fe83 	bl	8005d94 <xTaskCheckForTimeOut>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d123      	bne.n	80050dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005096:	f000 f917 	bl	80052c8 <prvIsQueueEmpty>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d017      	beq.n	80050d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	3324      	adds	r3, #36	; 0x24
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fda9 	bl	8005c00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b0:	f000 f8b8 	bl	8005224 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050b4:	f000 fbde 	bl	8005874 <xTaskResumeAll>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d189      	bne.n	8004fd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80050be:	4b10      	ldr	r3, [pc, #64]	; (8005100 <xQueueReceive+0x1bc>)
 80050c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	e780      	b.n	8004fd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d2:	f000 f8a7 	bl	8005224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050d6:	f000 fbcd 	bl	8005874 <xTaskResumeAll>
 80050da:	e77a      	b.n	8004fd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050de:	f000 f8a1 	bl	8005224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050e2:	f000 fbc7 	bl	8005874 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e8:	f000 f8ee 	bl	80052c8 <prvIsQueueEmpty>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f43f af6f 	beq.w	8004fd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3730      	adds	r7, #48	; 0x30
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	e000ed04 	.word	0xe000ed04

08005104 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10d      	bne.n	800513e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d14d      	bne.n	80051c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 ff92 	bl	8006058 <xTaskPriorityDisinherit>
 8005134:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	e043      	b.n	80051c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d119      	bne.n	8005178 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6858      	ldr	r0, [r3, #4]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	461a      	mov	r2, r3
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	f001 fbbc 	bl	80068cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	441a      	add	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	429a      	cmp	r2, r3
 800516c:	d32b      	bcc.n	80051c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	e026      	b.n	80051c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68d8      	ldr	r0, [r3, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	461a      	mov	r2, r3
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	f001 fba2 	bl	80068cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	425b      	negs	r3, r3
 8005192:	441a      	add	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d207      	bcs.n	80051b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	425b      	negs	r3, r3
 80051ae:	441a      	add	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d105      	bne.n	80051c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051ce:	697b      	ldr	r3, [r7, #20]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d018      	beq.n	800521c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	441a      	add	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	d303      	bcc.n	800520c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68d9      	ldr	r1, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	461a      	mov	r2, r3
 8005216:	6838      	ldr	r0, [r7, #0]
 8005218:	f001 fb58 	bl	80068cc <memcpy>
	}
}
 800521c:	bf00      	nop
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800522c:	f7ff faca 	bl	80047c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005236:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005238:	e011      	b.n	800525e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d012      	beq.n	8005268 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3324      	adds	r3, #36	; 0x24
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fd2a 	bl	8005ca0 <xTaskRemoveFromEventList>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005252:	f000 fe01 	bl	8005e58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	3b01      	subs	r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800525e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005262:	2b00      	cmp	r3, #0
 8005264:	dce9      	bgt.n	800523a <prvUnlockQueue+0x16>
 8005266:	e000      	b.n	800526a <prvUnlockQueue+0x46>
					break;
 8005268:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	22ff      	movs	r2, #255	; 0xff
 800526e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005272:	f7ff fad7 	bl	8004824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005276:	f7ff faa5 	bl	80047c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005280:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005282:	e011      	b.n	80052a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d012      	beq.n	80052b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3310      	adds	r3, #16
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fd05 	bl	8005ca0 <xTaskRemoveFromEventList>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800529c:	f000 fddc 	bl	8005e58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052a0:	7bbb      	ldrb	r3, [r7, #14]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	dce9      	bgt.n	8005284 <prvUnlockQueue+0x60>
 80052b0:	e000      	b.n	80052b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	22ff      	movs	r2, #255	; 0xff
 80052b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052bc:	f7ff fab2 	bl	8004824 <vPortExitCritical>
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052d0:	f7ff fa78 	bl	80047c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e001      	b.n	80052e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052e6:	f7ff fa9d 	bl	8004824 <vPortExitCritical>

	return xReturn;
 80052ea:	68fb      	ldr	r3, [r7, #12]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052fc:	f7ff fa62 	bl	80047c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	429a      	cmp	r2, r3
 800530a:	d102      	bne.n	8005312 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800530c:	2301      	movs	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e001      	b.n	8005316 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005316:	f7ff fa85 	bl	8004824 <vPortExitCritical>

	return xReturn;
 800531a:	68fb      	ldr	r3, [r7, #12]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e014      	b.n	800535e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005334:	4a0f      	ldr	r2, [pc, #60]	; (8005374 <vQueueAddToRegistry+0x50>)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005340:	490c      	ldr	r1, [pc, #48]	; (8005374 <vQueueAddToRegistry+0x50>)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800534a:	4a0a      	ldr	r2, [pc, #40]	; (8005374 <vQueueAddToRegistry+0x50>)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4413      	add	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005356:	e006      	b.n	8005366 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3301      	adds	r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b07      	cmp	r3, #7
 8005362:	d9e7      	bls.n	8005334 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	200044b8 	.word	0x200044b8

08005378 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005388:	f7ff fa1c 	bl	80047c4 <vPortEnterCritical>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005392:	b25b      	sxtb	r3, r3
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005398:	d103      	bne.n	80053a2 <vQueueWaitForMessageRestricted+0x2a>
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053a8:	b25b      	sxtb	r3, r3
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ae:	d103      	bne.n	80053b8 <vQueueWaitForMessageRestricted+0x40>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053b8:	f7ff fa34 	bl	8004824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d106      	bne.n	80053d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	3324      	adds	r3, #36	; 0x24
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fc3b 	bl	8005c48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053d2:	6978      	ldr	r0, [r7, #20]
 80053d4:	f7ff ff26 	bl	8005224 <prvUnlockQueue>
	}
 80053d8:	bf00      	nop
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08e      	sub	sp, #56	; 0x38
 80053e4:	af04      	add	r7, sp, #16
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xTaskCreateStatic+0x2a>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	623b      	str	r3, [r7, #32]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xTaskCreateStatic+0x46>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	61fb      	str	r3, [r7, #28]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005426:	235c      	movs	r3, #92	; 0x5c
 8005428:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b5c      	cmp	r3, #92	; 0x5c
 800542e:	d00a      	beq.n	8005446 <xTaskCreateStatic+0x66>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	61bb      	str	r3, [r7, #24]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005446:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01e      	beq.n	800548c <xTaskCreateStatic+0xac>
 800544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01b      	beq.n	800548c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800545c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	2202      	movs	r2, #2
 8005462:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005466:	2300      	movs	r3, #0
 8005468:	9303      	str	r3, [sp, #12]
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	9302      	str	r3, [sp, #8]
 800546e:	f107 0314 	add.w	r3, r7, #20
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f850 	bl	8005524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005486:	f000 f8dd 	bl	8005644 <prvAddNewTaskToReadyList>
 800548a:	e001      	b.n	8005490 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005490:	697b      	ldr	r3, [r7, #20]
	}
 8005492:	4618      	mov	r0, r3
 8005494:	3728      	adds	r7, #40	; 0x28
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800549a:	b580      	push	{r7, lr}
 800549c:	b08c      	sub	sp, #48	; 0x30
 800549e:	af04      	add	r7, sp, #16
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	4613      	mov	r3, r2
 80054a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe fdbe 	bl	8004030 <pvPortMalloc>
 80054b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00e      	beq.n	80054da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054bc:	205c      	movs	r0, #92	; 0x5c
 80054be:	f7fe fdb7 	bl	8004030 <pvPortMalloc>
 80054c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
 80054d0:	e005      	b.n	80054de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054d2:	6978      	ldr	r0, [r7, #20]
 80054d4:	f7fe fe78 	bl	80041c8 <vPortFree>
 80054d8:	e001      	b.n	80054de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d017      	beq.n	8005514 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054ec:	88fa      	ldrh	r2, [r7, #6]
 80054ee:	2300      	movs	r3, #0
 80054f0:	9303      	str	r3, [sp, #12]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	9302      	str	r3, [sp, #8]
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f80e 	bl	8005524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005508:	69f8      	ldr	r0, [r7, #28]
 800550a:	f000 f89b 	bl	8005644 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800550e:	2301      	movs	r3, #1
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	e002      	b.n	800551a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005518:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800551a:	69bb      	ldr	r3, [r7, #24]
	}
 800551c:	4618      	mov	r0, r3
 800551e:	3720      	adds	r7, #32
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	461a      	mov	r2, r3
 800553c:	21a5      	movs	r1, #165	; 0xa5
 800553e:	f001 f9d3 	bl	80068e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800554c:	3b01      	subs	r3, #1
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f023 0307 	bic.w	r3, r3, #7
 800555a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	617b      	str	r3, [r7, #20]
}
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01f      	beq.n	80055c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	e012      	b.n	80055ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	7819      	ldrb	r1, [r3, #0]
 8005590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	3334      	adds	r3, #52	; 0x34
 8005598:	460a      	mov	r2, r1
 800559a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	4413      	add	r3, r2
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d006      	beq.n	80055b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	3301      	adds	r3, #1
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	2b0f      	cmp	r3, #15
 80055b2:	d9e9      	bls.n	8005588 <prvInitialiseNewTask+0x64>
 80055b4:	e000      	b.n	80055b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80055b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055c0:	e003      	b.n	80055ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	2b37      	cmp	r3, #55	; 0x37
 80055ce:	d901      	bls.n	80055d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055d0:	2337      	movs	r3, #55	; 0x37
 80055d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	2200      	movs	r2, #0
 80055e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	3304      	adds	r3, #4
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe ff2a 	bl	8004444 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	3318      	adds	r3, #24
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fe ff25 	bl	8004444 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800560e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	2200      	movs	r2, #0
 8005614:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	68f9      	ldr	r1, [r7, #12]
 8005622:	69b8      	ldr	r0, [r7, #24]
 8005624:	f7fe ffa2 	bl	800456c <pxPortInitialiseStack>
 8005628:	4602      	mov	r2, r0
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800563a:	bf00      	nop
 800563c:	3720      	adds	r7, #32
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800564c:	f7ff f8ba 	bl	80047c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005650:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <prvAddNewTaskToReadyList+0xc4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	4a2c      	ldr	r2, [pc, #176]	; (8005708 <prvAddNewTaskToReadyList+0xc4>)
 8005658:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800565a:	4b2c      	ldr	r3, [pc, #176]	; (800570c <prvAddNewTaskToReadyList+0xc8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005662:	4a2a      	ldr	r2, [pc, #168]	; (800570c <prvAddNewTaskToReadyList+0xc8>)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005668:	4b27      	ldr	r3, [pc, #156]	; (8005708 <prvAddNewTaskToReadyList+0xc4>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d110      	bne.n	8005692 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005670:	f000 fc16 	bl	8005ea0 <prvInitialiseTaskLists>
 8005674:	e00d      	b.n	8005692 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005676:	4b26      	ldr	r3, [pc, #152]	; (8005710 <prvAddNewTaskToReadyList+0xcc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800567e:	4b23      	ldr	r3, [pc, #140]	; (800570c <prvAddNewTaskToReadyList+0xc8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	429a      	cmp	r2, r3
 800568a:	d802      	bhi.n	8005692 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800568c:	4a1f      	ldr	r2, [pc, #124]	; (800570c <prvAddNewTaskToReadyList+0xc8>)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005692:	4b20      	ldr	r3, [pc, #128]	; (8005714 <prvAddNewTaskToReadyList+0xd0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3301      	adds	r3, #1
 8005698:	4a1e      	ldr	r2, [pc, #120]	; (8005714 <prvAddNewTaskToReadyList+0xd0>)
 800569a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800569c:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <prvAddNewTaskToReadyList+0xd0>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <prvAddNewTaskToReadyList+0xd4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d903      	bls.n	80056b8 <prvAddNewTaskToReadyList+0x74>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4a18      	ldr	r2, [pc, #96]	; (8005718 <prvAddNewTaskToReadyList+0xd4>)
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4a15      	ldr	r2, [pc, #84]	; (800571c <prvAddNewTaskToReadyList+0xd8>)
 80056c6:	441a      	add	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f7fe fec5 	bl	800445e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056d4:	f7ff f8a6 	bl	8004824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056d8:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <prvAddNewTaskToReadyList+0xcc>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00e      	beq.n	80056fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056e0:	4b0a      	ldr	r3, [pc, #40]	; (800570c <prvAddNewTaskToReadyList+0xc8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d207      	bcs.n	80056fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056ee:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <prvAddNewTaskToReadyList+0xdc>)
 80056f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	200049cc 	.word	0x200049cc
 800570c:	200044f8 	.word	0x200044f8
 8005710:	200049d8 	.word	0x200049d8
 8005714:	200049e8 	.word	0x200049e8
 8005718:	200049d4 	.word	0x200049d4
 800571c:	200044fc 	.word	0x200044fc
 8005720:	e000ed04 	.word	0xe000ed04

08005724 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d017      	beq.n	8005766 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005736:	4b13      	ldr	r3, [pc, #76]	; (8005784 <vTaskDelay+0x60>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <vTaskDelay+0x30>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	60bb      	str	r3, [r7, #8]
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005754:	f000 f880 	bl	8005858 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005758:	2100      	movs	r1, #0
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fcea 	bl	8006134 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005760:	f000 f888 	bl	8005874 <xTaskResumeAll>
 8005764:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d107      	bne.n	800577c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <vTaskDelay+0x64>)
 800576e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	200049f4 	.word	0x200049f4
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800579a:	463a      	mov	r2, r7
 800579c:	1d39      	adds	r1, r7, #4
 800579e:	f107 0308 	add.w	r3, r7, #8
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe fc10 	bl	8003fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	9202      	str	r2, [sp, #8]
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	2300      	movs	r3, #0
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	2300      	movs	r3, #0
 80057b8:	460a      	mov	r2, r1
 80057ba:	4921      	ldr	r1, [pc, #132]	; (8005840 <vTaskStartScheduler+0xb4>)
 80057bc:	4821      	ldr	r0, [pc, #132]	; (8005844 <vTaskStartScheduler+0xb8>)
 80057be:	f7ff fe0f 	bl	80053e0 <xTaskCreateStatic>
 80057c2:	4603      	mov	r3, r0
 80057c4:	4a20      	ldr	r2, [pc, #128]	; (8005848 <vTaskStartScheduler+0xbc>)
 80057c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057c8:	4b1f      	ldr	r3, [pc, #124]	; (8005848 <vTaskStartScheduler+0xbc>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057d0:	2301      	movs	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	e001      	b.n	80057da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d102      	bne.n	80057e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057e0:	f000 fcfc 	bl	80061dc <xTimerCreateTimerTask>
 80057e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d116      	bne.n	800581a <vTaskStartScheduler+0x8e>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	613b      	str	r3, [r7, #16]
}
 80057fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005800:	4b12      	ldr	r3, [pc, #72]	; (800584c <vTaskStartScheduler+0xc0>)
 8005802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005806:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005808:	4b11      	ldr	r3, [pc, #68]	; (8005850 <vTaskStartScheduler+0xc4>)
 800580a:	2201      	movs	r2, #1
 800580c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800580e:	4b11      	ldr	r3, [pc, #68]	; (8005854 <vTaskStartScheduler+0xc8>)
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005814:	f7fe ff34 	bl	8004680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005818:	e00e      	b.n	8005838 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005820:	d10a      	bne.n	8005838 <vTaskStartScheduler+0xac>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	60fb      	str	r3, [r7, #12]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <vTaskStartScheduler+0xaa>
}
 8005838:	bf00      	nop
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	08007264 	.word	0x08007264
 8005844:	08005e71 	.word	0x08005e71
 8005848:	200049f0 	.word	0x200049f0
 800584c:	200049ec 	.word	0x200049ec
 8005850:	200049d8 	.word	0x200049d8
 8005854:	200049d0 	.word	0x200049d0

08005858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800585c:	4b04      	ldr	r3, [pc, #16]	; (8005870 <vTaskSuspendAll+0x18>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	4a03      	ldr	r2, [pc, #12]	; (8005870 <vTaskSuspendAll+0x18>)
 8005864:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005866:	bf00      	nop
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	200049f4 	.word	0x200049f4

08005874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005882:	4b42      	ldr	r3, [pc, #264]	; (800598c <xTaskResumeAll+0x118>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	603b      	str	r3, [r7, #0]
}
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058a0:	f7fe ff90 	bl	80047c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058a4:	4b39      	ldr	r3, [pc, #228]	; (800598c <xTaskResumeAll+0x118>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	4a38      	ldr	r2, [pc, #224]	; (800598c <xTaskResumeAll+0x118>)
 80058ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ae:	4b37      	ldr	r3, [pc, #220]	; (800598c <xTaskResumeAll+0x118>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d162      	bne.n	800597c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058b6:	4b36      	ldr	r3, [pc, #216]	; (8005990 <xTaskResumeAll+0x11c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d05e      	beq.n	800597c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058be:	e02f      	b.n	8005920 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c0:	4b34      	ldr	r3, [pc, #208]	; (8005994 <xTaskResumeAll+0x120>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3318      	adds	r3, #24
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe fe23 	bl	8004518 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3304      	adds	r3, #4
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe fe1e 	bl	8004518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e0:	4b2d      	ldr	r3, [pc, #180]	; (8005998 <xTaskResumeAll+0x124>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d903      	bls.n	80058f0 <xTaskResumeAll+0x7c>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	4a2a      	ldr	r2, [pc, #168]	; (8005998 <xTaskResumeAll+0x124>)
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4a27      	ldr	r2, [pc, #156]	; (800599c <xTaskResumeAll+0x128>)
 80058fe:	441a      	add	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f7fe fda9 	bl	800445e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005910:	4b23      	ldr	r3, [pc, #140]	; (80059a0 <xTaskResumeAll+0x12c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	429a      	cmp	r2, r3
 8005918:	d302      	bcc.n	8005920 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800591a:	4b22      	ldr	r3, [pc, #136]	; (80059a4 <xTaskResumeAll+0x130>)
 800591c:	2201      	movs	r2, #1
 800591e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005920:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <xTaskResumeAll+0x120>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1cb      	bne.n	80058c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800592e:	f000 fb55 	bl	8005fdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005932:	4b1d      	ldr	r3, [pc, #116]	; (80059a8 <xTaskResumeAll+0x134>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d010      	beq.n	8005960 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800593e:	f000 f847 	bl	80059d0 <xTaskIncrementTick>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005948:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <xTaskResumeAll+0x130>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3b01      	subs	r3, #1
 8005952:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f1      	bne.n	800593e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800595a:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <xTaskResumeAll+0x134>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005960:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <xTaskResumeAll+0x130>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005968:	2301      	movs	r3, #1
 800596a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800596c:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <xTaskResumeAll+0x138>)
 800596e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800597c:	f7fe ff52 	bl	8004824 <vPortExitCritical>

	return xAlreadyYielded;
 8005980:	68bb      	ldr	r3, [r7, #8]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200049f4 	.word	0x200049f4
 8005990:	200049cc 	.word	0x200049cc
 8005994:	2000498c 	.word	0x2000498c
 8005998:	200049d4 	.word	0x200049d4
 800599c:	200044fc 	.word	0x200044fc
 80059a0:	200044f8 	.word	0x200044f8
 80059a4:	200049e0 	.word	0x200049e0
 80059a8:	200049dc 	.word	0x200049dc
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059b6:	4b05      	ldr	r3, [pc, #20]	; (80059cc <xTaskGetTickCount+0x1c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059bc:	687b      	ldr	r3, [r7, #4]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	200049d0 	.word	0x200049d0

080059d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059da:	4b4f      	ldr	r3, [pc, #316]	; (8005b18 <xTaskIncrementTick+0x148>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f040 808f 	bne.w	8005b02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059e4:	4b4d      	ldr	r3, [pc, #308]	; (8005b1c <xTaskIncrementTick+0x14c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3301      	adds	r3, #1
 80059ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059ec:	4a4b      	ldr	r2, [pc, #300]	; (8005b1c <xTaskIncrementTick+0x14c>)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d120      	bne.n	8005a3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80059f8:	4b49      	ldr	r3, [pc, #292]	; (8005b20 <xTaskIncrementTick+0x150>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	603b      	str	r3, [r7, #0]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <xTaskIncrementTick+0x46>
 8005a18:	4b41      	ldr	r3, [pc, #260]	; (8005b20 <xTaskIncrementTick+0x150>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	4b41      	ldr	r3, [pc, #260]	; (8005b24 <xTaskIncrementTick+0x154>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a3f      	ldr	r2, [pc, #252]	; (8005b20 <xTaskIncrementTick+0x150>)
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4a3f      	ldr	r2, [pc, #252]	; (8005b24 <xTaskIncrementTick+0x154>)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	4b3e      	ldr	r3, [pc, #248]	; (8005b28 <xTaskIncrementTick+0x158>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3301      	adds	r3, #1
 8005a32:	4a3d      	ldr	r2, [pc, #244]	; (8005b28 <xTaskIncrementTick+0x158>)
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	f000 fad1 	bl	8005fdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a3a:	4b3c      	ldr	r3, [pc, #240]	; (8005b2c <xTaskIncrementTick+0x15c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d349      	bcc.n	8005ad8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a44:	4b36      	ldr	r3, [pc, #216]	; (8005b20 <xTaskIncrementTick+0x150>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4e:	4b37      	ldr	r3, [pc, #220]	; (8005b2c <xTaskIncrementTick+0x15c>)
 8005a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a54:	601a      	str	r2, [r3, #0]
					break;
 8005a56:	e03f      	b.n	8005ad8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a58:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <xTaskIncrementTick+0x150>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d203      	bcs.n	8005a78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a70:	4a2e      	ldr	r2, [pc, #184]	; (8005b2c <xTaskIncrementTick+0x15c>)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a76:	e02f      	b.n	8005ad8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fd4b 	bl	8004518 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	3318      	adds	r3, #24
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fd42 	bl	8004518 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a98:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <xTaskIncrementTick+0x160>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d903      	bls.n	8005aa8 <xTaskIncrementTick+0xd8>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	4a22      	ldr	r2, [pc, #136]	; (8005b30 <xTaskIncrementTick+0x160>)
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4a1f      	ldr	r2, [pc, #124]	; (8005b34 <xTaskIncrementTick+0x164>)
 8005ab6:	441a      	add	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f7fe fccd 	bl	800445e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	; (8005b38 <xTaskIncrementTick+0x168>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d3b8      	bcc.n	8005a44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad6:	e7b5      	b.n	8005a44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ad8:	4b17      	ldr	r3, [pc, #92]	; (8005b38 <xTaskIncrementTick+0x168>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ade:	4915      	ldr	r1, [pc, #84]	; (8005b34 <xTaskIncrementTick+0x164>)
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d901      	bls.n	8005af4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005af0:	2301      	movs	r3, #1
 8005af2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005af4:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <xTaskIncrementTick+0x16c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005afc:	2301      	movs	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e004      	b.n	8005b0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b02:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <xTaskIncrementTick+0x170>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3301      	adds	r3, #1
 8005b08:	4a0d      	ldr	r2, [pc, #52]	; (8005b40 <xTaskIncrementTick+0x170>)
 8005b0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b0c:	697b      	ldr	r3, [r7, #20]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200049f4 	.word	0x200049f4
 8005b1c:	200049d0 	.word	0x200049d0
 8005b20:	20004984 	.word	0x20004984
 8005b24:	20004988 	.word	0x20004988
 8005b28:	200049e4 	.word	0x200049e4
 8005b2c:	200049ec 	.word	0x200049ec
 8005b30:	200049d4 	.word	0x200049d4
 8005b34:	200044fc 	.word	0x200044fc
 8005b38:	200044f8 	.word	0x200044f8
 8005b3c:	200049e0 	.word	0x200049e0
 8005b40:	200049dc 	.word	0x200049dc

08005b44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b4a:	4b28      	ldr	r3, [pc, #160]	; (8005bec <vTaskSwitchContext+0xa8>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b52:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <vTaskSwitchContext+0xac>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b58:	e041      	b.n	8005bde <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005b5a:	4b25      	ldr	r3, [pc, #148]	; (8005bf0 <vTaskSwitchContext+0xac>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <vTaskSwitchContext+0xb0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e010      	b.n	8005b8a <vTaskSwitchContext+0x46>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	607b      	str	r3, [r7, #4]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <vTaskSwitchContext+0x3e>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	491b      	ldr	r1, [pc, #108]	; (8005bf8 <vTaskSwitchContext+0xb4>)
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0e4      	beq.n	8005b68 <vTaskSwitchContext+0x24>
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <vTaskSwitchContext+0xb4>)
 8005baa:	4413      	add	r3, r2
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	605a      	str	r2, [r3, #4]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d104      	bne.n	8005bce <vTaskSwitchContext+0x8a>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4a09      	ldr	r2, [pc, #36]	; (8005bfc <vTaskSwitchContext+0xb8>)
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	4a06      	ldr	r2, [pc, #24]	; (8005bf4 <vTaskSwitchContext+0xb0>)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6013      	str	r3, [r2, #0]
}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	200049f4 	.word	0x200049f4
 8005bf0:	200049e0 	.word	0x200049e0
 8005bf4:	200049d4 	.word	0x200049d4
 8005bf8:	200044fc 	.word	0x200044fc
 8005bfc:	200044f8 	.word	0x200044f8

08005c00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c26:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <vTaskPlaceOnEventList+0x44>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3318      	adds	r3, #24
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fe fc39 	bl	80044a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c34:	2101      	movs	r1, #1
 8005c36:	6838      	ldr	r0, [r7, #0]
 8005c38:	f000 fa7c 	bl	8006134 <prvAddCurrentTaskToDelayedList>
}
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	200044f8 	.word	0x200044f8

08005c48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	617b      	str	r3, [r7, #20]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <vTaskPlaceOnEventListRestricted+0x54>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3318      	adds	r3, #24
 8005c76:	4619      	mov	r1, r3
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7fe fbf0 	bl	800445e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	68b8      	ldr	r0, [r7, #8]
 8005c8e:	f000 fa51 	bl	8006134 <prvAddCurrentTaskToDelayedList>
	}
 8005c92:	bf00      	nop
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200044f8 	.word	0x200044f8

08005ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	60fb      	str	r3, [r7, #12]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	3318      	adds	r3, #24
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fe fc21 	bl	8004518 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cd6:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <xTaskRemoveFromEventList+0xb0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d11d      	bne.n	8005d1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe fc18 	bl	8004518 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	4b19      	ldr	r3, [pc, #100]	; (8005d54 <xTaskRemoveFromEventList+0xb4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d903      	bls.n	8005cfc <xTaskRemoveFromEventList+0x5c>
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	4a16      	ldr	r2, [pc, #88]	; (8005d54 <xTaskRemoveFromEventList+0xb4>)
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <xTaskRemoveFromEventList+0xb8>)
 8005d0a:	441a      	add	r2, r3
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f7fe fba3 	bl	800445e <vListInsertEnd>
 8005d18:	e005      	b.n	8005d26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	3318      	adds	r3, #24
 8005d1e:	4619      	mov	r1, r3
 8005d20:	480e      	ldr	r0, [pc, #56]	; (8005d5c <xTaskRemoveFromEventList+0xbc>)
 8005d22:	f7fe fb9c 	bl	800445e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <xTaskRemoveFromEventList+0xc0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d905      	bls.n	8005d40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d38:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <xTaskRemoveFromEventList+0xc4>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e001      	b.n	8005d44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d44:	697b      	ldr	r3, [r7, #20]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200049f4 	.word	0x200049f4
 8005d54:	200049d4 	.word	0x200049d4
 8005d58:	200044fc 	.word	0x200044fc
 8005d5c:	2000498c 	.word	0x2000498c
 8005d60:	200044f8 	.word	0x200044f8
 8005d64:	200049e0 	.word	0x200049e0

08005d68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d70:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <vTaskInternalSetTimeOutState+0x24>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <vTaskInternalSetTimeOutState+0x28>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	605a      	str	r2, [r3, #4]
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	200049e4 	.word	0x200049e4
 8005d90:	200049d0 	.word	0x200049d0

08005d94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	613b      	str	r3, [r7, #16]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	60fb      	str	r3, [r7, #12]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005dd6:	f7fe fcf5 	bl	80047c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dda:	4b1d      	ldr	r3, [pc, #116]	; (8005e50 <xTaskCheckForTimeOut+0xbc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df2:	d102      	bne.n	8005dfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e023      	b.n	8005e42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <xTaskCheckForTimeOut+0xc0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d007      	beq.n	8005e16 <xTaskCheckForTimeOut+0x82>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d302      	bcc.n	8005e16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	e015      	b.n	8005e42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d20b      	bcs.n	8005e38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	1ad2      	subs	r2, r2, r3
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff ff9b 	bl	8005d68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	61fb      	str	r3, [r7, #28]
 8005e36:	e004      	b.n	8005e42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e42:	f7fe fcef 	bl	8004824 <vPortExitCritical>

	return xReturn;
 8005e46:	69fb      	ldr	r3, [r7, #28]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3720      	adds	r7, #32
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	200049d0 	.word	0x200049d0
 8005e54:	200049e4 	.word	0x200049e4

08005e58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e5c:	4b03      	ldr	r3, [pc, #12]	; (8005e6c <vTaskMissedYield+0x14>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	200049e0 	.word	0x200049e0

08005e70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e78:	f000 f852 	bl	8005f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e7c:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <prvIdleTask+0x28>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d9f9      	bls.n	8005e78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <prvIdleTask+0x2c>)
 8005e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e94:	e7f0      	b.n	8005e78 <prvIdleTask+0x8>
 8005e96:	bf00      	nop
 8005e98:	200044fc 	.word	0x200044fc
 8005e9c:	e000ed04 	.word	0xe000ed04

08005ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	e00c      	b.n	8005ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4a12      	ldr	r2, [pc, #72]	; (8005f00 <prvInitialiseTaskLists+0x60>)
 8005eb8:	4413      	add	r3, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe faa2 	bl	8004404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	607b      	str	r3, [r7, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b37      	cmp	r3, #55	; 0x37
 8005eca:	d9ef      	bls.n	8005eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ecc:	480d      	ldr	r0, [pc, #52]	; (8005f04 <prvInitialiseTaskLists+0x64>)
 8005ece:	f7fe fa99 	bl	8004404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ed2:	480d      	ldr	r0, [pc, #52]	; (8005f08 <prvInitialiseTaskLists+0x68>)
 8005ed4:	f7fe fa96 	bl	8004404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ed8:	480c      	ldr	r0, [pc, #48]	; (8005f0c <prvInitialiseTaskLists+0x6c>)
 8005eda:	f7fe fa93 	bl	8004404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ede:	480c      	ldr	r0, [pc, #48]	; (8005f10 <prvInitialiseTaskLists+0x70>)
 8005ee0:	f7fe fa90 	bl	8004404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ee4:	480b      	ldr	r0, [pc, #44]	; (8005f14 <prvInitialiseTaskLists+0x74>)
 8005ee6:	f7fe fa8d 	bl	8004404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005eea:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <prvInitialiseTaskLists+0x78>)
 8005eec:	4a05      	ldr	r2, [pc, #20]	; (8005f04 <prvInitialiseTaskLists+0x64>)
 8005eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <prvInitialiseTaskLists+0x7c>)
 8005ef2:	4a05      	ldr	r2, [pc, #20]	; (8005f08 <prvInitialiseTaskLists+0x68>)
 8005ef4:	601a      	str	r2, [r3, #0]
}
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200044fc 	.word	0x200044fc
 8005f04:	2000495c 	.word	0x2000495c
 8005f08:	20004970 	.word	0x20004970
 8005f0c:	2000498c 	.word	0x2000498c
 8005f10:	200049a0 	.word	0x200049a0
 8005f14:	200049b8 	.word	0x200049b8
 8005f18:	20004984 	.word	0x20004984
 8005f1c:	20004988 	.word	0x20004988

08005f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f26:	e019      	b.n	8005f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f28:	f7fe fc4c 	bl	80047c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f2c:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <prvCheckTasksWaitingTermination+0x50>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe faed 	bl	8004518 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <prvCheckTasksWaitingTermination+0x54>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <prvCheckTasksWaitingTermination+0x54>)
 8005f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f48:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <prvCheckTasksWaitingTermination+0x58>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	4a0a      	ldr	r2, [pc, #40]	; (8005f78 <prvCheckTasksWaitingTermination+0x58>)
 8005f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f52:	f7fe fc67 	bl	8004824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f810 	bl	8005f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <prvCheckTasksWaitingTermination+0x58>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e1      	bne.n	8005f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	200049a0 	.word	0x200049a0
 8005f74:	200049cc 	.word	0x200049cc
 8005f78:	200049b4 	.word	0x200049b4

08005f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d108      	bne.n	8005fa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe f918 	bl	80041c8 <vPortFree>
				vPortFree( pxTCB );
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7fe f915 	bl	80041c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f9e:	e018      	b.n	8005fd2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d103      	bne.n	8005fb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fe f90c 	bl	80041c8 <vPortFree>
	}
 8005fb0:	e00f      	b.n	8005fd2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d00a      	beq.n	8005fd2 <prvDeleteTCB+0x56>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	60fb      	str	r3, [r7, #12]
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <prvDeleteTCB+0x54>
	}
 8005fd2:	bf00      	nop
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fe2:	4b0c      	ldr	r3, [pc, #48]	; (8006014 <prvResetNextTaskUnblockTime+0x38>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d104      	bne.n	8005ff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fec:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <prvResetNextTaskUnblockTime+0x3c>)
 8005fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ff4:	e008      	b.n	8006008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <prvResetNextTaskUnblockTime+0x38>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	4a04      	ldr	r2, [pc, #16]	; (8006018 <prvResetNextTaskUnblockTime+0x3c>)
 8006006:	6013      	str	r3, [r2, #0]
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	20004984 	.word	0x20004984
 8006018:	200049ec 	.word	0x200049ec

0800601c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006022:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <xTaskGetSchedulerState+0x34>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800602a:	2301      	movs	r3, #1
 800602c:	607b      	str	r3, [r7, #4]
 800602e:	e008      	b.n	8006042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006030:	4b08      	ldr	r3, [pc, #32]	; (8006054 <xTaskGetSchedulerState+0x38>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006038:	2302      	movs	r3, #2
 800603a:	607b      	str	r3, [r7, #4]
 800603c:	e001      	b.n	8006042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800603e:	2300      	movs	r3, #0
 8006040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006042:	687b      	ldr	r3, [r7, #4]
	}
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	200049d8 	.word	0x200049d8
 8006054:	200049f4 	.word	0x200049f4

08006058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d056      	beq.n	800611c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800606e:	4b2e      	ldr	r3, [pc, #184]	; (8006128 <xTaskPriorityDisinherit+0xd0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	429a      	cmp	r2, r3
 8006076:	d00a      	beq.n	800608e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	60fb      	str	r3, [r7, #12]
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	60bb      	str	r3, [r7, #8]
}
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b0:	1e5a      	subs	r2, r3, #1
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060be:	429a      	cmp	r2, r3
 80060c0:	d02c      	beq.n	800611c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d128      	bne.n	800611c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fa22 	bl	8004518 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <xTaskPriorityDisinherit+0xd4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d903      	bls.n	80060fc <xTaskPriorityDisinherit+0xa4>
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4a0c      	ldr	r2, [pc, #48]	; (800612c <xTaskPriorityDisinherit+0xd4>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <xTaskPriorityDisinherit+0xd8>)
 800610a:	441a      	add	r2, r3
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f7fe f9a3 	bl	800445e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006118:	2301      	movs	r3, #1
 800611a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800611c:	697b      	ldr	r3, [r7, #20]
	}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	200044f8 	.word	0x200044f8
 800612c:	200049d4 	.word	0x200049d4
 8006130:	200044fc 	.word	0x200044fc

08006134 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800613e:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006144:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3304      	adds	r3, #4
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe f9e4 	bl	8004518 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006156:	d10a      	bne.n	800616e <prvAddCurrentTaskToDelayedList+0x3a>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800615e:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4819      	ldr	r0, [pc, #100]	; (80061cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006168:	f7fe f979 	bl	800445e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800616c:	e026      	b.n	80061bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006176:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	429a      	cmp	r2, r3
 8006184:	d209      	bcs.n	800619a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006186:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f7fe f987 	bl	80044a6 <vListInsert>
}
 8006198:	e010      	b.n	80061bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800619a:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f7fe f97d 	bl	80044a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d202      	bcs.n	80061bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061b6:	4a08      	ldr	r2, [pc, #32]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6013      	str	r3, [r2, #0]
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	200049d0 	.word	0x200049d0
 80061c8:	200044f8 	.word	0x200044f8
 80061cc:	200049b8 	.word	0x200049b8
 80061d0:	20004988 	.word	0x20004988
 80061d4:	20004984 	.word	0x20004984
 80061d8:	200049ec 	.word	0x200049ec

080061dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	; 0x28
 80061e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061e6:	f000 fb07 	bl	80067f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061ea:	4b1c      	ldr	r3, [pc, #112]	; (800625c <xTimerCreateTimerTask+0x80>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d021      	beq.n	8006236 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061fa:	1d3a      	adds	r2, r7, #4
 80061fc:	f107 0108 	add.w	r1, r7, #8
 8006200:	f107 030c 	add.w	r3, r7, #12
 8006204:	4618      	mov	r0, r3
 8006206:	f7fd fef9 	bl	8003ffc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	9202      	str	r2, [sp, #8]
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	2302      	movs	r3, #2
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	2300      	movs	r3, #0
 800621a:	460a      	mov	r2, r1
 800621c:	4910      	ldr	r1, [pc, #64]	; (8006260 <xTimerCreateTimerTask+0x84>)
 800621e:	4811      	ldr	r0, [pc, #68]	; (8006264 <xTimerCreateTimerTask+0x88>)
 8006220:	f7ff f8de 	bl	80053e0 <xTaskCreateStatic>
 8006224:	4603      	mov	r3, r0
 8006226:	4a10      	ldr	r2, [pc, #64]	; (8006268 <xTimerCreateTimerTask+0x8c>)
 8006228:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800622a:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <xTimerCreateTimerTask+0x8c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006232:	2301      	movs	r3, #1
 8006234:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	613b      	str	r3, [r7, #16]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006252:	697b      	ldr	r3, [r7, #20]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20004a28 	.word	0x20004a28
 8006260:	0800726c 	.word	0x0800726c
 8006264:	080063a1 	.word	0x080063a1
 8006268:	20004a2c 	.word	0x20004a2c

0800626c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	; 0x28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800627a:	2300      	movs	r3, #0
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	623b      	str	r3, [r7, #32]
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800629a:	4b1a      	ldr	r3, [pc, #104]	; (8006304 <xTimerGenericCommand+0x98>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d02a      	beq.n	80062f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	dc18      	bgt.n	80062e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062b4:	f7ff feb2 	bl	800601c <xTaskGetSchedulerState>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d109      	bne.n	80062d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062be:	4b11      	ldr	r3, [pc, #68]	; (8006304 <xTimerGenericCommand+0x98>)
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	f107 0110 	add.w	r1, r7, #16
 80062c6:	2300      	movs	r3, #0
 80062c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ca:	f7fe fca1 	bl	8004c10 <xQueueGenericSend>
 80062ce:	6278      	str	r0, [r7, #36]	; 0x24
 80062d0:	e012      	b.n	80062f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062d2:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <xTimerGenericCommand+0x98>)
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	f107 0110 	add.w	r1, r7, #16
 80062da:	2300      	movs	r3, #0
 80062dc:	2200      	movs	r2, #0
 80062de:	f7fe fc97 	bl	8004c10 <xQueueGenericSend>
 80062e2:	6278      	str	r0, [r7, #36]	; 0x24
 80062e4:	e008      	b.n	80062f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062e6:	4b07      	ldr	r3, [pc, #28]	; (8006304 <xTimerGenericCommand+0x98>)
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	f107 0110 	add.w	r1, r7, #16
 80062ee:	2300      	movs	r3, #0
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	f7fe fd8b 	bl	8004e0c <xQueueGenericSendFromISR>
 80062f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3728      	adds	r7, #40	; 0x28
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20004a28 	.word	0x20004a28

08006308 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af02      	add	r7, sp, #8
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006312:	4b22      	ldr	r3, [pc, #136]	; (800639c <prvProcessExpiredTimer+0x94>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	3304      	adds	r3, #4
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe f8f9 	bl	8004518 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d022      	beq.n	800637a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	699a      	ldr	r2, [r3, #24]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	18d1      	adds	r1, r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	6978      	ldr	r0, [r7, #20]
 8006342:	f000 f8d1 	bl	80064e8 <prvInsertTimerInActiveList>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01f      	beq.n	800638c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800634c:	2300      	movs	r3, #0
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	2300      	movs	r3, #0
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	2100      	movs	r1, #0
 8006356:	6978      	ldr	r0, [r7, #20]
 8006358:	f7ff ff88 	bl	800626c <xTimerGenericCommand>
 800635c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d113      	bne.n	800638c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	60fb      	str	r3, [r7, #12]
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	6978      	ldr	r0, [r7, #20]
 8006392:	4798      	blx	r3
}
 8006394:	bf00      	nop
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20004a20 	.word	0x20004a20

080063a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063a8:	f107 0308 	add.w	r3, r7, #8
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 f857 	bl	8006460 <prvGetNextExpireTime>
 80063b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4619      	mov	r1, r3
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f803 	bl	80063c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063be:	f000 f8d5 	bl	800656c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063c2:	e7f1      	b.n	80063a8 <prvTimerTask+0x8>

080063c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063ce:	f7ff fa43 	bl	8005858 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063d2:	f107 0308 	add.w	r3, r7, #8
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 f866 	bl	80064a8 <prvSampleTimeNow>
 80063dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d130      	bne.n	8006446 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <prvProcessTimerOrBlockTask+0x3c>
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d806      	bhi.n	8006400 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063f2:	f7ff fa3f 	bl	8005874 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063f6:	68f9      	ldr	r1, [r7, #12]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff ff85 	bl	8006308 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063fe:	e024      	b.n	800644a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d008      	beq.n	8006418 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006406:	4b13      	ldr	r3, [pc, #76]	; (8006454 <prvProcessTimerOrBlockTask+0x90>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <prvProcessTimerOrBlockTask+0x50>
 8006410:	2301      	movs	r3, #1
 8006412:	e000      	b.n	8006416 <prvProcessTimerOrBlockTask+0x52>
 8006414:	2300      	movs	r3, #0
 8006416:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <prvProcessTimerOrBlockTask+0x94>)
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	4619      	mov	r1, r3
 8006426:	f7fe ffa7 	bl	8005378 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800642a:	f7ff fa23 	bl	8005874 <xTaskResumeAll>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006434:	4b09      	ldr	r3, [pc, #36]	; (800645c <prvProcessTimerOrBlockTask+0x98>)
 8006436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	f3bf 8f6f 	isb	sy
}
 8006444:	e001      	b.n	800644a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006446:	f7ff fa15 	bl	8005874 <xTaskResumeAll>
}
 800644a:	bf00      	nop
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20004a24 	.word	0x20004a24
 8006458:	20004a28 	.word	0x20004a28
 800645c:	e000ed04 	.word	0xe000ed04

08006460 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006468:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <prvGetNextExpireTime+0x44>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <prvGetNextExpireTime+0x16>
 8006472:	2201      	movs	r2, #1
 8006474:	e000      	b.n	8006478 <prvGetNextExpireTime+0x18>
 8006476:	2200      	movs	r2, #0
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006484:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <prvGetNextExpireTime+0x44>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	e001      	b.n	8006494 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006494:	68fb      	ldr	r3, [r7, #12]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20004a20 	.word	0x20004a20

080064a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064b0:	f7ff fa7e 	bl	80059b0 <xTaskGetTickCount>
 80064b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064b6:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <prvSampleTimeNow+0x3c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d205      	bcs.n	80064cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064c0:	f000 f936 	bl	8006730 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	e002      	b.n	80064d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064d2:	4a04      	ldr	r2, [pc, #16]	; (80064e4 <prvSampleTimeNow+0x3c>)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064d8:	68fb      	ldr	r3, [r7, #12]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20004a30 	.word	0x20004a30

080064e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	429a      	cmp	r2, r3
 800650c:	d812      	bhi.n	8006534 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	1ad2      	subs	r2, r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	429a      	cmp	r2, r3
 800651a:	d302      	bcc.n	8006522 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800651c:	2301      	movs	r3, #1
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e01b      	b.n	800655a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006522:	4b10      	ldr	r3, [pc, #64]	; (8006564 <prvInsertTimerInActiveList+0x7c>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3304      	adds	r3, #4
 800652a:	4619      	mov	r1, r3
 800652c:	4610      	mov	r0, r2
 800652e:	f7fd ffba 	bl	80044a6 <vListInsert>
 8006532:	e012      	b.n	800655a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d206      	bcs.n	800654a <prvInsertTimerInActiveList+0x62>
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d302      	bcc.n	800654a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	e007      	b.n	800655a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800654a:	4b07      	ldr	r3, [pc, #28]	; (8006568 <prvInsertTimerInActiveList+0x80>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3304      	adds	r3, #4
 8006552:	4619      	mov	r1, r3
 8006554:	4610      	mov	r0, r2
 8006556:	f7fd ffa6 	bl	80044a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800655a:	697b      	ldr	r3, [r7, #20]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20004a24 	.word	0x20004a24
 8006568:	20004a20 	.word	0x20004a20

0800656c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08e      	sub	sp, #56	; 0x38
 8006570:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006572:	e0ca      	b.n	800670a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	da18      	bge.n	80065ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800657a:	1d3b      	adds	r3, r7, #4
 800657c:	3304      	adds	r3, #4
 800657e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	61fb      	str	r3, [r7, #28]
}
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a2:	6850      	ldr	r0, [r2, #4]
 80065a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a6:	6892      	ldr	r2, [r2, #8]
 80065a8:	4611      	mov	r1, r2
 80065aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f2c0 80aa 	blt.w	8006708 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	3304      	adds	r3, #4
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fd ffa7 	bl	8004518 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065ca:	463b      	mov	r3, r7
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff ff6b 	bl	80064a8 <prvSampleTimeNow>
 80065d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b09      	cmp	r3, #9
 80065d8:	f200 8097 	bhi.w	800670a <prvProcessReceivedCommands+0x19e>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <prvProcessReceivedCommands+0x78>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	0800660d 	.word	0x0800660d
 80065e8:	0800660d 	.word	0x0800660d
 80065ec:	0800660d 	.word	0x0800660d
 80065f0:	08006681 	.word	0x08006681
 80065f4:	08006695 	.word	0x08006695
 80065f8:	080066df 	.word	0x080066df
 80065fc:	0800660d 	.word	0x0800660d
 8006600:	0800660d 	.word	0x0800660d
 8006604:	08006681 	.word	0x08006681
 8006608:	08006695 	.word	0x08006695
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006612:	f043 0301 	orr.w	r3, r3, #1
 8006616:	b2da      	uxtb	r2, r3
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	18d1      	adds	r1, r2, r3
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800662c:	f7ff ff5c 	bl	80064e8 <prvInsertTimerInActiveList>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d069      	beq.n	800670a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d05e      	beq.n	800670a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	441a      	add	r2, r3
 8006654:	2300      	movs	r3, #0
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	2300      	movs	r3, #0
 800665a:	2100      	movs	r1, #0
 800665c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800665e:	f7ff fe05 	bl	800626c <xTimerGenericCommand>
 8006662:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d14f      	bne.n	800670a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	61bb      	str	r3, [r7, #24]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	b2da      	uxtb	r2, r3
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006692:	e03a      	b.n	800670a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	617b      	str	r3, [r7, #20]
}
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	18d1      	adds	r1, r2, r3
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066d8:	f7ff ff06 	bl	80064e8 <prvInsertTimerInActiveList>
					break;
 80066dc:	e015      	b.n	800670a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d103      	bne.n	80066f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80066ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ee:	f7fd fd6b 	bl	80041c8 <vPortFree>
 80066f2:	e00a      	b.n	800670a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066fa:	f023 0301 	bic.w	r3, r3, #1
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006706:	e000      	b.n	800670a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006708:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <prvProcessReceivedCommands+0x1c0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	1d39      	adds	r1, r7, #4
 8006710:	2200      	movs	r2, #0
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe fc16 	bl	8004f44 <xQueueReceive>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	f47f af2a 	bne.w	8006574 <prvProcessReceivedCommands+0x8>
	}
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	3730      	adds	r7, #48	; 0x30
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20004a28 	.word	0x20004a28

08006730 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006736:	e048      	b.n	80067ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006738:	4b2d      	ldr	r3, [pc, #180]	; (80067f0 <prvSwitchTimerLists+0xc0>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006742:	4b2b      	ldr	r3, [pc, #172]	; (80067f0 <prvSwitchTimerLists+0xc0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3304      	adds	r3, #4
 8006750:	4618      	mov	r0, r3
 8006752:	f7fd fee1 	bl	8004518 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d02e      	beq.n	80067ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	429a      	cmp	r2, r3
 800677c:	d90e      	bls.n	800679c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800678a:	4b19      	ldr	r3, [pc, #100]	; (80067f0 <prvSwitchTimerLists+0xc0>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3304      	adds	r3, #4
 8006792:	4619      	mov	r1, r3
 8006794:	4610      	mov	r0, r2
 8006796:	f7fd fe86 	bl	80044a6 <vListInsert>
 800679a:	e016      	b.n	80067ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800679c:	2300      	movs	r3, #0
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	2300      	movs	r3, #0
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	2100      	movs	r1, #0
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff fd60 	bl	800626c <xTimerGenericCommand>
 80067ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	603b      	str	r3, [r7, #0]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <prvSwitchTimerLists+0xc0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1b1      	bne.n	8006738 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067d4:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <prvSwitchTimerLists+0xc0>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067da:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <prvSwitchTimerLists+0xc4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a04      	ldr	r2, [pc, #16]	; (80067f0 <prvSwitchTimerLists+0xc0>)
 80067e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067e2:	4a04      	ldr	r2, [pc, #16]	; (80067f4 <prvSwitchTimerLists+0xc4>)
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	6013      	str	r3, [r2, #0]
}
 80067e8:	bf00      	nop
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20004a20 	.word	0x20004a20
 80067f4:	20004a24 	.word	0x20004a24

080067f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067fe:	f7fd ffe1 	bl	80047c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <prvCheckForValidListAndQueue+0x60>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d120      	bne.n	800684c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800680a:	4814      	ldr	r0, [pc, #80]	; (800685c <prvCheckForValidListAndQueue+0x64>)
 800680c:	f7fd fdfa 	bl	8004404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006810:	4813      	ldr	r0, [pc, #76]	; (8006860 <prvCheckForValidListAndQueue+0x68>)
 8006812:	f7fd fdf7 	bl	8004404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006816:	4b13      	ldr	r3, [pc, #76]	; (8006864 <prvCheckForValidListAndQueue+0x6c>)
 8006818:	4a10      	ldr	r2, [pc, #64]	; (800685c <prvCheckForValidListAndQueue+0x64>)
 800681a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800681c:	4b12      	ldr	r3, [pc, #72]	; (8006868 <prvCheckForValidListAndQueue+0x70>)
 800681e:	4a10      	ldr	r2, [pc, #64]	; (8006860 <prvCheckForValidListAndQueue+0x68>)
 8006820:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006822:	2300      	movs	r3, #0
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	4b11      	ldr	r3, [pc, #68]	; (800686c <prvCheckForValidListAndQueue+0x74>)
 8006828:	4a11      	ldr	r2, [pc, #68]	; (8006870 <prvCheckForValidListAndQueue+0x78>)
 800682a:	2110      	movs	r1, #16
 800682c:	200a      	movs	r0, #10
 800682e:	f7fe f953 	bl	8004ad8 <xQueueGenericCreateStatic>
 8006832:	4603      	mov	r3, r0
 8006834:	4a08      	ldr	r2, [pc, #32]	; (8006858 <prvCheckForValidListAndQueue+0x60>)
 8006836:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006838:	4b07      	ldr	r3, [pc, #28]	; (8006858 <prvCheckForValidListAndQueue+0x60>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006840:	4b05      	ldr	r3, [pc, #20]	; (8006858 <prvCheckForValidListAndQueue+0x60>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	490b      	ldr	r1, [pc, #44]	; (8006874 <prvCheckForValidListAndQueue+0x7c>)
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe fd6c 	bl	8005324 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800684c:	f7fd ffea 	bl	8004824 <vPortExitCritical>
}
 8006850:	bf00      	nop
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20004a28 	.word	0x20004a28
 800685c:	200049f8 	.word	0x200049f8
 8006860:	20004a0c 	.word	0x20004a0c
 8006864:	20004a20 	.word	0x20004a20
 8006868:	20004a24 	.word	0x20004a24
 800686c:	20004ad4 	.word	0x20004ad4
 8006870:	20004a34 	.word	0x20004a34
 8006874:	08007274 	.word	0x08007274

08006878 <__errno>:
 8006878:	4b01      	ldr	r3, [pc, #4]	; (8006880 <__errno+0x8>)
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	20000010 	.word	0x20000010

08006884 <__libc_init_array>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4d0d      	ldr	r5, [pc, #52]	; (80068bc <__libc_init_array+0x38>)
 8006888:	4c0d      	ldr	r4, [pc, #52]	; (80068c0 <__libc_init_array+0x3c>)
 800688a:	1b64      	subs	r4, r4, r5
 800688c:	10a4      	asrs	r4, r4, #2
 800688e:	2600      	movs	r6, #0
 8006890:	42a6      	cmp	r6, r4
 8006892:	d109      	bne.n	80068a8 <__libc_init_array+0x24>
 8006894:	4d0b      	ldr	r5, [pc, #44]	; (80068c4 <__libc_init_array+0x40>)
 8006896:	4c0c      	ldr	r4, [pc, #48]	; (80068c8 <__libc_init_array+0x44>)
 8006898:	f000 fc8e 	bl	80071b8 <_init>
 800689c:	1b64      	subs	r4, r4, r5
 800689e:	10a4      	asrs	r4, r4, #2
 80068a0:	2600      	movs	r6, #0
 80068a2:	42a6      	cmp	r6, r4
 80068a4:	d105      	bne.n	80068b2 <__libc_init_array+0x2e>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ac:	4798      	blx	r3
 80068ae:	3601      	adds	r6, #1
 80068b0:	e7ee      	b.n	8006890 <__libc_init_array+0xc>
 80068b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b6:	4798      	blx	r3
 80068b8:	3601      	adds	r6, #1
 80068ba:	e7f2      	b.n	80068a2 <__libc_init_array+0x1e>
 80068bc:	080072f4 	.word	0x080072f4
 80068c0:	080072f4 	.word	0x080072f4
 80068c4:	080072f4 	.word	0x080072f4
 80068c8:	080072f8 	.word	0x080072f8

080068cc <memcpy>:
 80068cc:	440a      	add	r2, r1
 80068ce:	4291      	cmp	r1, r2
 80068d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80068d4:	d100      	bne.n	80068d8 <memcpy+0xc>
 80068d6:	4770      	bx	lr
 80068d8:	b510      	push	{r4, lr}
 80068da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e2:	4291      	cmp	r1, r2
 80068e4:	d1f9      	bne.n	80068da <memcpy+0xe>
 80068e6:	bd10      	pop	{r4, pc}

080068e8 <memset>:
 80068e8:	4402      	add	r2, r0
 80068ea:	4603      	mov	r3, r0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d100      	bne.n	80068f2 <memset+0xa>
 80068f0:	4770      	bx	lr
 80068f2:	f803 1b01 	strb.w	r1, [r3], #1
 80068f6:	e7f9      	b.n	80068ec <memset+0x4>

080068f8 <siprintf>:
 80068f8:	b40e      	push	{r1, r2, r3}
 80068fa:	b500      	push	{lr}
 80068fc:	b09c      	sub	sp, #112	; 0x70
 80068fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006900:	9002      	str	r0, [sp, #8]
 8006902:	9006      	str	r0, [sp, #24]
 8006904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006908:	4809      	ldr	r0, [pc, #36]	; (8006930 <siprintf+0x38>)
 800690a:	9107      	str	r1, [sp, #28]
 800690c:	9104      	str	r1, [sp, #16]
 800690e:	4909      	ldr	r1, [pc, #36]	; (8006934 <siprintf+0x3c>)
 8006910:	f853 2b04 	ldr.w	r2, [r3], #4
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	6800      	ldr	r0, [r0, #0]
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	a902      	add	r1, sp, #8
 800691c:	f000 f868 	bl	80069f0 <_svfiprintf_r>
 8006920:	9b02      	ldr	r3, [sp, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	b01c      	add	sp, #112	; 0x70
 8006928:	f85d eb04 	ldr.w	lr, [sp], #4
 800692c:	b003      	add	sp, #12
 800692e:	4770      	bx	lr
 8006930:	20000010 	.word	0x20000010
 8006934:	ffff0208 	.word	0xffff0208

08006938 <__ssputs_r>:
 8006938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693c:	688e      	ldr	r6, [r1, #8]
 800693e:	429e      	cmp	r6, r3
 8006940:	4682      	mov	sl, r0
 8006942:	460c      	mov	r4, r1
 8006944:	4690      	mov	r8, r2
 8006946:	461f      	mov	r7, r3
 8006948:	d838      	bhi.n	80069bc <__ssputs_r+0x84>
 800694a:	898a      	ldrh	r2, [r1, #12]
 800694c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006950:	d032      	beq.n	80069b8 <__ssputs_r+0x80>
 8006952:	6825      	ldr	r5, [r4, #0]
 8006954:	6909      	ldr	r1, [r1, #16]
 8006956:	eba5 0901 	sub.w	r9, r5, r1
 800695a:	6965      	ldr	r5, [r4, #20]
 800695c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006964:	3301      	adds	r3, #1
 8006966:	444b      	add	r3, r9
 8006968:	106d      	asrs	r5, r5, #1
 800696a:	429d      	cmp	r5, r3
 800696c:	bf38      	it	cc
 800696e:	461d      	movcc	r5, r3
 8006970:	0553      	lsls	r3, r2, #21
 8006972:	d531      	bpl.n	80069d8 <__ssputs_r+0xa0>
 8006974:	4629      	mov	r1, r5
 8006976:	f000 fb55 	bl	8007024 <_malloc_r>
 800697a:	4606      	mov	r6, r0
 800697c:	b950      	cbnz	r0, 8006994 <__ssputs_r+0x5c>
 800697e:	230c      	movs	r3, #12
 8006980:	f8ca 3000 	str.w	r3, [sl]
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006994:	6921      	ldr	r1, [r4, #16]
 8006996:	464a      	mov	r2, r9
 8006998:	f7ff ff98 	bl	80068cc <memcpy>
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a6:	81a3      	strh	r3, [r4, #12]
 80069a8:	6126      	str	r6, [r4, #16]
 80069aa:	6165      	str	r5, [r4, #20]
 80069ac:	444e      	add	r6, r9
 80069ae:	eba5 0509 	sub.w	r5, r5, r9
 80069b2:	6026      	str	r6, [r4, #0]
 80069b4:	60a5      	str	r5, [r4, #8]
 80069b6:	463e      	mov	r6, r7
 80069b8:	42be      	cmp	r6, r7
 80069ba:	d900      	bls.n	80069be <__ssputs_r+0x86>
 80069bc:	463e      	mov	r6, r7
 80069be:	6820      	ldr	r0, [r4, #0]
 80069c0:	4632      	mov	r2, r6
 80069c2:	4641      	mov	r1, r8
 80069c4:	f000 faa8 	bl	8006f18 <memmove>
 80069c8:	68a3      	ldr	r3, [r4, #8]
 80069ca:	1b9b      	subs	r3, r3, r6
 80069cc:	60a3      	str	r3, [r4, #8]
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	4433      	add	r3, r6
 80069d2:	6023      	str	r3, [r4, #0]
 80069d4:	2000      	movs	r0, #0
 80069d6:	e7db      	b.n	8006990 <__ssputs_r+0x58>
 80069d8:	462a      	mov	r2, r5
 80069da:	f000 fb97 	bl	800710c <_realloc_r>
 80069de:	4606      	mov	r6, r0
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d1e1      	bne.n	80069a8 <__ssputs_r+0x70>
 80069e4:	6921      	ldr	r1, [r4, #16]
 80069e6:	4650      	mov	r0, sl
 80069e8:	f000 fab0 	bl	8006f4c <_free_r>
 80069ec:	e7c7      	b.n	800697e <__ssputs_r+0x46>
	...

080069f0 <_svfiprintf_r>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	4698      	mov	r8, r3
 80069f6:	898b      	ldrh	r3, [r1, #12]
 80069f8:	061b      	lsls	r3, r3, #24
 80069fa:	b09d      	sub	sp, #116	; 0x74
 80069fc:	4607      	mov	r7, r0
 80069fe:	460d      	mov	r5, r1
 8006a00:	4614      	mov	r4, r2
 8006a02:	d50e      	bpl.n	8006a22 <_svfiprintf_r+0x32>
 8006a04:	690b      	ldr	r3, [r1, #16]
 8006a06:	b963      	cbnz	r3, 8006a22 <_svfiprintf_r+0x32>
 8006a08:	2140      	movs	r1, #64	; 0x40
 8006a0a:	f000 fb0b 	bl	8007024 <_malloc_r>
 8006a0e:	6028      	str	r0, [r5, #0]
 8006a10:	6128      	str	r0, [r5, #16]
 8006a12:	b920      	cbnz	r0, 8006a1e <_svfiprintf_r+0x2e>
 8006a14:	230c      	movs	r3, #12
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a1c:	e0d1      	b.n	8006bc2 <_svfiprintf_r+0x1d2>
 8006a1e:	2340      	movs	r3, #64	; 0x40
 8006a20:	616b      	str	r3, [r5, #20]
 8006a22:	2300      	movs	r3, #0
 8006a24:	9309      	str	r3, [sp, #36]	; 0x24
 8006a26:	2320      	movs	r3, #32
 8006a28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a30:	2330      	movs	r3, #48	; 0x30
 8006a32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006bdc <_svfiprintf_r+0x1ec>
 8006a36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a3a:	f04f 0901 	mov.w	r9, #1
 8006a3e:	4623      	mov	r3, r4
 8006a40:	469a      	mov	sl, r3
 8006a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a46:	b10a      	cbz	r2, 8006a4c <_svfiprintf_r+0x5c>
 8006a48:	2a25      	cmp	r2, #37	; 0x25
 8006a4a:	d1f9      	bne.n	8006a40 <_svfiprintf_r+0x50>
 8006a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8006a50:	d00b      	beq.n	8006a6a <_svfiprintf_r+0x7a>
 8006a52:	465b      	mov	r3, fp
 8006a54:	4622      	mov	r2, r4
 8006a56:	4629      	mov	r1, r5
 8006a58:	4638      	mov	r0, r7
 8006a5a:	f7ff ff6d 	bl	8006938 <__ssputs_r>
 8006a5e:	3001      	adds	r0, #1
 8006a60:	f000 80aa 	beq.w	8006bb8 <_svfiprintf_r+0x1c8>
 8006a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a66:	445a      	add	r2, fp
 8006a68:	9209      	str	r2, [sp, #36]	; 0x24
 8006a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 80a2 	beq.w	8006bb8 <_svfiprintf_r+0x1c8>
 8006a74:	2300      	movs	r3, #0
 8006a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a7e:	f10a 0a01 	add.w	sl, sl, #1
 8006a82:	9304      	str	r3, [sp, #16]
 8006a84:	9307      	str	r3, [sp, #28]
 8006a86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8006a8c:	4654      	mov	r4, sl
 8006a8e:	2205      	movs	r2, #5
 8006a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a94:	4851      	ldr	r0, [pc, #324]	; (8006bdc <_svfiprintf_r+0x1ec>)
 8006a96:	f7f9 fba3 	bl	80001e0 <memchr>
 8006a9a:	9a04      	ldr	r2, [sp, #16]
 8006a9c:	b9d8      	cbnz	r0, 8006ad6 <_svfiprintf_r+0xe6>
 8006a9e:	06d0      	lsls	r0, r2, #27
 8006aa0:	bf44      	itt	mi
 8006aa2:	2320      	movmi	r3, #32
 8006aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aa8:	0711      	lsls	r1, r2, #28
 8006aaa:	bf44      	itt	mi
 8006aac:	232b      	movmi	r3, #43	; 0x2b
 8006aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ab8:	d015      	beq.n	8006ae6 <_svfiprintf_r+0xf6>
 8006aba:	9a07      	ldr	r2, [sp, #28]
 8006abc:	4654      	mov	r4, sl
 8006abe:	2000      	movs	r0, #0
 8006ac0:	f04f 0c0a 	mov.w	ip, #10
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aca:	3b30      	subs	r3, #48	; 0x30
 8006acc:	2b09      	cmp	r3, #9
 8006ace:	d94e      	bls.n	8006b6e <_svfiprintf_r+0x17e>
 8006ad0:	b1b0      	cbz	r0, 8006b00 <_svfiprintf_r+0x110>
 8006ad2:	9207      	str	r2, [sp, #28]
 8006ad4:	e014      	b.n	8006b00 <_svfiprintf_r+0x110>
 8006ad6:	eba0 0308 	sub.w	r3, r0, r8
 8006ada:	fa09 f303 	lsl.w	r3, r9, r3
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	9304      	str	r3, [sp, #16]
 8006ae2:	46a2      	mov	sl, r4
 8006ae4:	e7d2      	b.n	8006a8c <_svfiprintf_r+0x9c>
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	1d19      	adds	r1, r3, #4
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	9103      	str	r1, [sp, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bfbb      	ittet	lt
 8006af2:	425b      	neglt	r3, r3
 8006af4:	f042 0202 	orrlt.w	r2, r2, #2
 8006af8:	9307      	strge	r3, [sp, #28]
 8006afa:	9307      	strlt	r3, [sp, #28]
 8006afc:	bfb8      	it	lt
 8006afe:	9204      	strlt	r2, [sp, #16]
 8006b00:	7823      	ldrb	r3, [r4, #0]
 8006b02:	2b2e      	cmp	r3, #46	; 0x2e
 8006b04:	d10c      	bne.n	8006b20 <_svfiprintf_r+0x130>
 8006b06:	7863      	ldrb	r3, [r4, #1]
 8006b08:	2b2a      	cmp	r3, #42	; 0x2a
 8006b0a:	d135      	bne.n	8006b78 <_svfiprintf_r+0x188>
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	1d1a      	adds	r2, r3, #4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	9203      	str	r2, [sp, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	bfb8      	it	lt
 8006b18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b1c:	3402      	adds	r4, #2
 8006b1e:	9305      	str	r3, [sp, #20]
 8006b20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006bec <_svfiprintf_r+0x1fc>
 8006b24:	7821      	ldrb	r1, [r4, #0]
 8006b26:	2203      	movs	r2, #3
 8006b28:	4650      	mov	r0, sl
 8006b2a:	f7f9 fb59 	bl	80001e0 <memchr>
 8006b2e:	b140      	cbz	r0, 8006b42 <_svfiprintf_r+0x152>
 8006b30:	2340      	movs	r3, #64	; 0x40
 8006b32:	eba0 000a 	sub.w	r0, r0, sl
 8006b36:	fa03 f000 	lsl.w	r0, r3, r0
 8006b3a:	9b04      	ldr	r3, [sp, #16]
 8006b3c:	4303      	orrs	r3, r0
 8006b3e:	3401      	adds	r4, #1
 8006b40:	9304      	str	r3, [sp, #16]
 8006b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b46:	4826      	ldr	r0, [pc, #152]	; (8006be0 <_svfiprintf_r+0x1f0>)
 8006b48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b4c:	2206      	movs	r2, #6
 8006b4e:	f7f9 fb47 	bl	80001e0 <memchr>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d038      	beq.n	8006bc8 <_svfiprintf_r+0x1d8>
 8006b56:	4b23      	ldr	r3, [pc, #140]	; (8006be4 <_svfiprintf_r+0x1f4>)
 8006b58:	bb1b      	cbnz	r3, 8006ba2 <_svfiprintf_r+0x1b2>
 8006b5a:	9b03      	ldr	r3, [sp, #12]
 8006b5c:	3307      	adds	r3, #7
 8006b5e:	f023 0307 	bic.w	r3, r3, #7
 8006b62:	3308      	adds	r3, #8
 8006b64:	9303      	str	r3, [sp, #12]
 8006b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b68:	4433      	add	r3, r6
 8006b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6c:	e767      	b.n	8006a3e <_svfiprintf_r+0x4e>
 8006b6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b72:	460c      	mov	r4, r1
 8006b74:	2001      	movs	r0, #1
 8006b76:	e7a5      	b.n	8006ac4 <_svfiprintf_r+0xd4>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	3401      	adds	r4, #1
 8006b7c:	9305      	str	r3, [sp, #20]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	f04f 0c0a 	mov.w	ip, #10
 8006b84:	4620      	mov	r0, r4
 8006b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b8a:	3a30      	subs	r2, #48	; 0x30
 8006b8c:	2a09      	cmp	r2, #9
 8006b8e:	d903      	bls.n	8006b98 <_svfiprintf_r+0x1a8>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0c5      	beq.n	8006b20 <_svfiprintf_r+0x130>
 8006b94:	9105      	str	r1, [sp, #20]
 8006b96:	e7c3      	b.n	8006b20 <_svfiprintf_r+0x130>
 8006b98:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e7f0      	b.n	8006b84 <_svfiprintf_r+0x194>
 8006ba2:	ab03      	add	r3, sp, #12
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	462a      	mov	r2, r5
 8006ba8:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <_svfiprintf_r+0x1f8>)
 8006baa:	a904      	add	r1, sp, #16
 8006bac:	4638      	mov	r0, r7
 8006bae:	f3af 8000 	nop.w
 8006bb2:	1c42      	adds	r2, r0, #1
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	d1d6      	bne.n	8006b66 <_svfiprintf_r+0x176>
 8006bb8:	89ab      	ldrh	r3, [r5, #12]
 8006bba:	065b      	lsls	r3, r3, #25
 8006bbc:	f53f af2c 	bmi.w	8006a18 <_svfiprintf_r+0x28>
 8006bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bc2:	b01d      	add	sp, #116	; 0x74
 8006bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc8:	ab03      	add	r3, sp, #12
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	462a      	mov	r2, r5
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <_svfiprintf_r+0x1f8>)
 8006bd0:	a904      	add	r1, sp, #16
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	f000 f87a 	bl	8006ccc <_printf_i>
 8006bd8:	e7eb      	b.n	8006bb2 <_svfiprintf_r+0x1c2>
 8006bda:	bf00      	nop
 8006bdc:	080072b8 	.word	0x080072b8
 8006be0:	080072c2 	.word	0x080072c2
 8006be4:	00000000 	.word	0x00000000
 8006be8:	08006939 	.word	0x08006939
 8006bec:	080072be 	.word	0x080072be

08006bf0 <_printf_common>:
 8006bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	4699      	mov	r9, r3
 8006bf8:	688a      	ldr	r2, [r1, #8]
 8006bfa:	690b      	ldr	r3, [r1, #16]
 8006bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c00:	4293      	cmp	r3, r2
 8006c02:	bfb8      	it	lt
 8006c04:	4613      	movlt	r3, r2
 8006c06:	6033      	str	r3, [r6, #0]
 8006c08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	b10a      	cbz	r2, 8006c16 <_printf_common+0x26>
 8006c12:	3301      	adds	r3, #1
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	0699      	lsls	r1, r3, #26
 8006c1a:	bf42      	ittt	mi
 8006c1c:	6833      	ldrmi	r3, [r6, #0]
 8006c1e:	3302      	addmi	r3, #2
 8006c20:	6033      	strmi	r3, [r6, #0]
 8006c22:	6825      	ldr	r5, [r4, #0]
 8006c24:	f015 0506 	ands.w	r5, r5, #6
 8006c28:	d106      	bne.n	8006c38 <_printf_common+0x48>
 8006c2a:	f104 0a19 	add.w	sl, r4, #25
 8006c2e:	68e3      	ldr	r3, [r4, #12]
 8006c30:	6832      	ldr	r2, [r6, #0]
 8006c32:	1a9b      	subs	r3, r3, r2
 8006c34:	42ab      	cmp	r3, r5
 8006c36:	dc26      	bgt.n	8006c86 <_printf_common+0x96>
 8006c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c3c:	1e13      	subs	r3, r2, #0
 8006c3e:	6822      	ldr	r2, [r4, #0]
 8006c40:	bf18      	it	ne
 8006c42:	2301      	movne	r3, #1
 8006c44:	0692      	lsls	r2, r2, #26
 8006c46:	d42b      	bmi.n	8006ca0 <_printf_common+0xb0>
 8006c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	4638      	mov	r0, r7
 8006c50:	47c0      	blx	r8
 8006c52:	3001      	adds	r0, #1
 8006c54:	d01e      	beq.n	8006c94 <_printf_common+0xa4>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	68e5      	ldr	r5, [r4, #12]
 8006c5a:	6832      	ldr	r2, [r6, #0]
 8006c5c:	f003 0306 	and.w	r3, r3, #6
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	bf08      	it	eq
 8006c64:	1aad      	subeq	r5, r5, r2
 8006c66:	68a3      	ldr	r3, [r4, #8]
 8006c68:	6922      	ldr	r2, [r4, #16]
 8006c6a:	bf0c      	ite	eq
 8006c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c70:	2500      	movne	r5, #0
 8006c72:	4293      	cmp	r3, r2
 8006c74:	bfc4      	itt	gt
 8006c76:	1a9b      	subgt	r3, r3, r2
 8006c78:	18ed      	addgt	r5, r5, r3
 8006c7a:	2600      	movs	r6, #0
 8006c7c:	341a      	adds	r4, #26
 8006c7e:	42b5      	cmp	r5, r6
 8006c80:	d11a      	bne.n	8006cb8 <_printf_common+0xc8>
 8006c82:	2000      	movs	r0, #0
 8006c84:	e008      	b.n	8006c98 <_printf_common+0xa8>
 8006c86:	2301      	movs	r3, #1
 8006c88:	4652      	mov	r2, sl
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	47c0      	blx	r8
 8006c90:	3001      	adds	r0, #1
 8006c92:	d103      	bne.n	8006c9c <_printf_common+0xac>
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9c:	3501      	adds	r5, #1
 8006c9e:	e7c6      	b.n	8006c2e <_printf_common+0x3e>
 8006ca0:	18e1      	adds	r1, r4, r3
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	2030      	movs	r0, #48	; 0x30
 8006ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006caa:	4422      	add	r2, r4
 8006cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	e7c7      	b.n	8006c48 <_printf_common+0x58>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	4622      	mov	r2, r4
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	47c0      	blx	r8
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	d0e6      	beq.n	8006c94 <_printf_common+0xa4>
 8006cc6:	3601      	adds	r6, #1
 8006cc8:	e7d9      	b.n	8006c7e <_printf_common+0x8e>
	...

08006ccc <_printf_i>:
 8006ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd0:	7e0f      	ldrb	r7, [r1, #24]
 8006cd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cd4:	2f78      	cmp	r7, #120	; 0x78
 8006cd6:	4691      	mov	r9, r2
 8006cd8:	4680      	mov	r8, r0
 8006cda:	460c      	mov	r4, r1
 8006cdc:	469a      	mov	sl, r3
 8006cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ce2:	d807      	bhi.n	8006cf4 <_printf_i+0x28>
 8006ce4:	2f62      	cmp	r7, #98	; 0x62
 8006ce6:	d80a      	bhi.n	8006cfe <_printf_i+0x32>
 8006ce8:	2f00      	cmp	r7, #0
 8006cea:	f000 80d8 	beq.w	8006e9e <_printf_i+0x1d2>
 8006cee:	2f58      	cmp	r7, #88	; 0x58
 8006cf0:	f000 80a3 	beq.w	8006e3a <_printf_i+0x16e>
 8006cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cfc:	e03a      	b.n	8006d74 <_printf_i+0xa8>
 8006cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d02:	2b15      	cmp	r3, #21
 8006d04:	d8f6      	bhi.n	8006cf4 <_printf_i+0x28>
 8006d06:	a101      	add	r1, pc, #4	; (adr r1, 8006d0c <_printf_i+0x40>)
 8006d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d0c:	08006d65 	.word	0x08006d65
 8006d10:	08006d79 	.word	0x08006d79
 8006d14:	08006cf5 	.word	0x08006cf5
 8006d18:	08006cf5 	.word	0x08006cf5
 8006d1c:	08006cf5 	.word	0x08006cf5
 8006d20:	08006cf5 	.word	0x08006cf5
 8006d24:	08006d79 	.word	0x08006d79
 8006d28:	08006cf5 	.word	0x08006cf5
 8006d2c:	08006cf5 	.word	0x08006cf5
 8006d30:	08006cf5 	.word	0x08006cf5
 8006d34:	08006cf5 	.word	0x08006cf5
 8006d38:	08006e85 	.word	0x08006e85
 8006d3c:	08006da9 	.word	0x08006da9
 8006d40:	08006e67 	.word	0x08006e67
 8006d44:	08006cf5 	.word	0x08006cf5
 8006d48:	08006cf5 	.word	0x08006cf5
 8006d4c:	08006ea7 	.word	0x08006ea7
 8006d50:	08006cf5 	.word	0x08006cf5
 8006d54:	08006da9 	.word	0x08006da9
 8006d58:	08006cf5 	.word	0x08006cf5
 8006d5c:	08006cf5 	.word	0x08006cf5
 8006d60:	08006e6f 	.word	0x08006e6f
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	1d1a      	adds	r2, r3, #4
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	602a      	str	r2, [r5, #0]
 8006d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d74:	2301      	movs	r3, #1
 8006d76:	e0a3      	b.n	8006ec0 <_printf_i+0x1f4>
 8006d78:	6820      	ldr	r0, [r4, #0]
 8006d7a:	6829      	ldr	r1, [r5, #0]
 8006d7c:	0606      	lsls	r6, r0, #24
 8006d7e:	f101 0304 	add.w	r3, r1, #4
 8006d82:	d50a      	bpl.n	8006d9a <_printf_i+0xce>
 8006d84:	680e      	ldr	r6, [r1, #0]
 8006d86:	602b      	str	r3, [r5, #0]
 8006d88:	2e00      	cmp	r6, #0
 8006d8a:	da03      	bge.n	8006d94 <_printf_i+0xc8>
 8006d8c:	232d      	movs	r3, #45	; 0x2d
 8006d8e:	4276      	negs	r6, r6
 8006d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d94:	485e      	ldr	r0, [pc, #376]	; (8006f10 <_printf_i+0x244>)
 8006d96:	230a      	movs	r3, #10
 8006d98:	e019      	b.n	8006dce <_printf_i+0x102>
 8006d9a:	680e      	ldr	r6, [r1, #0]
 8006d9c:	602b      	str	r3, [r5, #0]
 8006d9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006da2:	bf18      	it	ne
 8006da4:	b236      	sxthne	r6, r6
 8006da6:	e7ef      	b.n	8006d88 <_printf_i+0xbc>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	6820      	ldr	r0, [r4, #0]
 8006dac:	1d19      	adds	r1, r3, #4
 8006dae:	6029      	str	r1, [r5, #0]
 8006db0:	0601      	lsls	r1, r0, #24
 8006db2:	d501      	bpl.n	8006db8 <_printf_i+0xec>
 8006db4:	681e      	ldr	r6, [r3, #0]
 8006db6:	e002      	b.n	8006dbe <_printf_i+0xf2>
 8006db8:	0646      	lsls	r6, r0, #25
 8006dba:	d5fb      	bpl.n	8006db4 <_printf_i+0xe8>
 8006dbc:	881e      	ldrh	r6, [r3, #0]
 8006dbe:	4854      	ldr	r0, [pc, #336]	; (8006f10 <_printf_i+0x244>)
 8006dc0:	2f6f      	cmp	r7, #111	; 0x6f
 8006dc2:	bf0c      	ite	eq
 8006dc4:	2308      	moveq	r3, #8
 8006dc6:	230a      	movne	r3, #10
 8006dc8:	2100      	movs	r1, #0
 8006dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dce:	6865      	ldr	r5, [r4, #4]
 8006dd0:	60a5      	str	r5, [r4, #8]
 8006dd2:	2d00      	cmp	r5, #0
 8006dd4:	bfa2      	ittt	ge
 8006dd6:	6821      	ldrge	r1, [r4, #0]
 8006dd8:	f021 0104 	bicge.w	r1, r1, #4
 8006ddc:	6021      	strge	r1, [r4, #0]
 8006dde:	b90e      	cbnz	r6, 8006de4 <_printf_i+0x118>
 8006de0:	2d00      	cmp	r5, #0
 8006de2:	d04d      	beq.n	8006e80 <_printf_i+0x1b4>
 8006de4:	4615      	mov	r5, r2
 8006de6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006dea:	fb03 6711 	mls	r7, r3, r1, r6
 8006dee:	5dc7      	ldrb	r7, [r0, r7]
 8006df0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006df4:	4637      	mov	r7, r6
 8006df6:	42bb      	cmp	r3, r7
 8006df8:	460e      	mov	r6, r1
 8006dfa:	d9f4      	bls.n	8006de6 <_printf_i+0x11a>
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d10b      	bne.n	8006e18 <_printf_i+0x14c>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	07de      	lsls	r6, r3, #31
 8006e04:	d508      	bpl.n	8006e18 <_printf_i+0x14c>
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	6861      	ldr	r1, [r4, #4]
 8006e0a:	4299      	cmp	r1, r3
 8006e0c:	bfde      	ittt	le
 8006e0e:	2330      	movle	r3, #48	; 0x30
 8006e10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006e18:	1b52      	subs	r2, r2, r5
 8006e1a:	6122      	str	r2, [r4, #16]
 8006e1c:	f8cd a000 	str.w	sl, [sp]
 8006e20:	464b      	mov	r3, r9
 8006e22:	aa03      	add	r2, sp, #12
 8006e24:	4621      	mov	r1, r4
 8006e26:	4640      	mov	r0, r8
 8006e28:	f7ff fee2 	bl	8006bf0 <_printf_common>
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d14c      	bne.n	8006eca <_printf_i+0x1fe>
 8006e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e34:	b004      	add	sp, #16
 8006e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3a:	4835      	ldr	r0, [pc, #212]	; (8006f10 <_printf_i+0x244>)
 8006e3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e40:	6829      	ldr	r1, [r5, #0]
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e48:	6029      	str	r1, [r5, #0]
 8006e4a:	061d      	lsls	r5, r3, #24
 8006e4c:	d514      	bpl.n	8006e78 <_printf_i+0x1ac>
 8006e4e:	07df      	lsls	r7, r3, #31
 8006e50:	bf44      	itt	mi
 8006e52:	f043 0320 	orrmi.w	r3, r3, #32
 8006e56:	6023      	strmi	r3, [r4, #0]
 8006e58:	b91e      	cbnz	r6, 8006e62 <_printf_i+0x196>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	f023 0320 	bic.w	r3, r3, #32
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	2310      	movs	r3, #16
 8006e64:	e7b0      	b.n	8006dc8 <_printf_i+0xfc>
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	f043 0320 	orr.w	r3, r3, #32
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	2378      	movs	r3, #120	; 0x78
 8006e70:	4828      	ldr	r0, [pc, #160]	; (8006f14 <_printf_i+0x248>)
 8006e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e76:	e7e3      	b.n	8006e40 <_printf_i+0x174>
 8006e78:	0659      	lsls	r1, r3, #25
 8006e7a:	bf48      	it	mi
 8006e7c:	b2b6      	uxthmi	r6, r6
 8006e7e:	e7e6      	b.n	8006e4e <_printf_i+0x182>
 8006e80:	4615      	mov	r5, r2
 8006e82:	e7bb      	b.n	8006dfc <_printf_i+0x130>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	6826      	ldr	r6, [r4, #0]
 8006e88:	6961      	ldr	r1, [r4, #20]
 8006e8a:	1d18      	adds	r0, r3, #4
 8006e8c:	6028      	str	r0, [r5, #0]
 8006e8e:	0635      	lsls	r5, r6, #24
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	d501      	bpl.n	8006e98 <_printf_i+0x1cc>
 8006e94:	6019      	str	r1, [r3, #0]
 8006e96:	e002      	b.n	8006e9e <_printf_i+0x1d2>
 8006e98:	0670      	lsls	r0, r6, #25
 8006e9a:	d5fb      	bpl.n	8006e94 <_printf_i+0x1c8>
 8006e9c:	8019      	strh	r1, [r3, #0]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6123      	str	r3, [r4, #16]
 8006ea2:	4615      	mov	r5, r2
 8006ea4:	e7ba      	b.n	8006e1c <_printf_i+0x150>
 8006ea6:	682b      	ldr	r3, [r5, #0]
 8006ea8:	1d1a      	adds	r2, r3, #4
 8006eaa:	602a      	str	r2, [r5, #0]
 8006eac:	681d      	ldr	r5, [r3, #0]
 8006eae:	6862      	ldr	r2, [r4, #4]
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f7f9 f994 	bl	80001e0 <memchr>
 8006eb8:	b108      	cbz	r0, 8006ebe <_printf_i+0x1f2>
 8006eba:	1b40      	subs	r0, r0, r5
 8006ebc:	6060      	str	r0, [r4, #4]
 8006ebe:	6863      	ldr	r3, [r4, #4]
 8006ec0:	6123      	str	r3, [r4, #16]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ec8:	e7a8      	b.n	8006e1c <_printf_i+0x150>
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	462a      	mov	r2, r5
 8006ece:	4649      	mov	r1, r9
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	47d0      	blx	sl
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d0ab      	beq.n	8006e30 <_printf_i+0x164>
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	079b      	lsls	r3, r3, #30
 8006edc:	d413      	bmi.n	8006f06 <_printf_i+0x23a>
 8006ede:	68e0      	ldr	r0, [r4, #12]
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	4298      	cmp	r0, r3
 8006ee4:	bfb8      	it	lt
 8006ee6:	4618      	movlt	r0, r3
 8006ee8:	e7a4      	b.n	8006e34 <_printf_i+0x168>
 8006eea:	2301      	movs	r3, #1
 8006eec:	4632      	mov	r2, r6
 8006eee:	4649      	mov	r1, r9
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	47d0      	blx	sl
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d09b      	beq.n	8006e30 <_printf_i+0x164>
 8006ef8:	3501      	adds	r5, #1
 8006efa:	68e3      	ldr	r3, [r4, #12]
 8006efc:	9903      	ldr	r1, [sp, #12]
 8006efe:	1a5b      	subs	r3, r3, r1
 8006f00:	42ab      	cmp	r3, r5
 8006f02:	dcf2      	bgt.n	8006eea <_printf_i+0x21e>
 8006f04:	e7eb      	b.n	8006ede <_printf_i+0x212>
 8006f06:	2500      	movs	r5, #0
 8006f08:	f104 0619 	add.w	r6, r4, #25
 8006f0c:	e7f5      	b.n	8006efa <_printf_i+0x22e>
 8006f0e:	bf00      	nop
 8006f10:	080072c9 	.word	0x080072c9
 8006f14:	080072da 	.word	0x080072da

08006f18 <memmove>:
 8006f18:	4288      	cmp	r0, r1
 8006f1a:	b510      	push	{r4, lr}
 8006f1c:	eb01 0402 	add.w	r4, r1, r2
 8006f20:	d902      	bls.n	8006f28 <memmove+0x10>
 8006f22:	4284      	cmp	r4, r0
 8006f24:	4623      	mov	r3, r4
 8006f26:	d807      	bhi.n	8006f38 <memmove+0x20>
 8006f28:	1e43      	subs	r3, r0, #1
 8006f2a:	42a1      	cmp	r1, r4
 8006f2c:	d008      	beq.n	8006f40 <memmove+0x28>
 8006f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f36:	e7f8      	b.n	8006f2a <memmove+0x12>
 8006f38:	4402      	add	r2, r0
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	428a      	cmp	r2, r1
 8006f3e:	d100      	bne.n	8006f42 <memmove+0x2a>
 8006f40:	bd10      	pop	{r4, pc}
 8006f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f4a:	e7f7      	b.n	8006f3c <memmove+0x24>

08006f4c <_free_r>:
 8006f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f4e:	2900      	cmp	r1, #0
 8006f50:	d044      	beq.n	8006fdc <_free_r+0x90>
 8006f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f56:	9001      	str	r0, [sp, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f5e:	bfb8      	it	lt
 8006f60:	18e4      	addlt	r4, r4, r3
 8006f62:	f000 f913 	bl	800718c <__malloc_lock>
 8006f66:	4a1e      	ldr	r2, [pc, #120]	; (8006fe0 <_free_r+0x94>)
 8006f68:	9801      	ldr	r0, [sp, #4]
 8006f6a:	6813      	ldr	r3, [r2, #0]
 8006f6c:	b933      	cbnz	r3, 8006f7c <_free_r+0x30>
 8006f6e:	6063      	str	r3, [r4, #4]
 8006f70:	6014      	str	r4, [r2, #0]
 8006f72:	b003      	add	sp, #12
 8006f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f78:	f000 b90e 	b.w	8007198 <__malloc_unlock>
 8006f7c:	42a3      	cmp	r3, r4
 8006f7e:	d908      	bls.n	8006f92 <_free_r+0x46>
 8006f80:	6825      	ldr	r5, [r4, #0]
 8006f82:	1961      	adds	r1, r4, r5
 8006f84:	428b      	cmp	r3, r1
 8006f86:	bf01      	itttt	eq
 8006f88:	6819      	ldreq	r1, [r3, #0]
 8006f8a:	685b      	ldreq	r3, [r3, #4]
 8006f8c:	1949      	addeq	r1, r1, r5
 8006f8e:	6021      	streq	r1, [r4, #0]
 8006f90:	e7ed      	b.n	8006f6e <_free_r+0x22>
 8006f92:	461a      	mov	r2, r3
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	b10b      	cbz	r3, 8006f9c <_free_r+0x50>
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	d9fa      	bls.n	8006f92 <_free_r+0x46>
 8006f9c:	6811      	ldr	r1, [r2, #0]
 8006f9e:	1855      	adds	r5, r2, r1
 8006fa0:	42a5      	cmp	r5, r4
 8006fa2:	d10b      	bne.n	8006fbc <_free_r+0x70>
 8006fa4:	6824      	ldr	r4, [r4, #0]
 8006fa6:	4421      	add	r1, r4
 8006fa8:	1854      	adds	r4, r2, r1
 8006faa:	42a3      	cmp	r3, r4
 8006fac:	6011      	str	r1, [r2, #0]
 8006fae:	d1e0      	bne.n	8006f72 <_free_r+0x26>
 8006fb0:	681c      	ldr	r4, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	6053      	str	r3, [r2, #4]
 8006fb6:	4421      	add	r1, r4
 8006fb8:	6011      	str	r1, [r2, #0]
 8006fba:	e7da      	b.n	8006f72 <_free_r+0x26>
 8006fbc:	d902      	bls.n	8006fc4 <_free_r+0x78>
 8006fbe:	230c      	movs	r3, #12
 8006fc0:	6003      	str	r3, [r0, #0]
 8006fc2:	e7d6      	b.n	8006f72 <_free_r+0x26>
 8006fc4:	6825      	ldr	r5, [r4, #0]
 8006fc6:	1961      	adds	r1, r4, r5
 8006fc8:	428b      	cmp	r3, r1
 8006fca:	bf04      	itt	eq
 8006fcc:	6819      	ldreq	r1, [r3, #0]
 8006fce:	685b      	ldreq	r3, [r3, #4]
 8006fd0:	6063      	str	r3, [r4, #4]
 8006fd2:	bf04      	itt	eq
 8006fd4:	1949      	addeq	r1, r1, r5
 8006fd6:	6021      	streq	r1, [r4, #0]
 8006fd8:	6054      	str	r4, [r2, #4]
 8006fda:	e7ca      	b.n	8006f72 <_free_r+0x26>
 8006fdc:	b003      	add	sp, #12
 8006fde:	bd30      	pop	{r4, r5, pc}
 8006fe0:	20004b24 	.word	0x20004b24

08006fe4 <sbrk_aligned>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	4e0e      	ldr	r6, [pc, #56]	; (8007020 <sbrk_aligned+0x3c>)
 8006fe8:	460c      	mov	r4, r1
 8006fea:	6831      	ldr	r1, [r6, #0]
 8006fec:	4605      	mov	r5, r0
 8006fee:	b911      	cbnz	r1, 8006ff6 <sbrk_aligned+0x12>
 8006ff0:	f000 f8bc 	bl	800716c <_sbrk_r>
 8006ff4:	6030      	str	r0, [r6, #0]
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f000 f8b7 	bl	800716c <_sbrk_r>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d00a      	beq.n	8007018 <sbrk_aligned+0x34>
 8007002:	1cc4      	adds	r4, r0, #3
 8007004:	f024 0403 	bic.w	r4, r4, #3
 8007008:	42a0      	cmp	r0, r4
 800700a:	d007      	beq.n	800701c <sbrk_aligned+0x38>
 800700c:	1a21      	subs	r1, r4, r0
 800700e:	4628      	mov	r0, r5
 8007010:	f000 f8ac 	bl	800716c <_sbrk_r>
 8007014:	3001      	adds	r0, #1
 8007016:	d101      	bne.n	800701c <sbrk_aligned+0x38>
 8007018:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800701c:	4620      	mov	r0, r4
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	20004b28 	.word	0x20004b28

08007024 <_malloc_r>:
 8007024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007028:	1ccd      	adds	r5, r1, #3
 800702a:	f025 0503 	bic.w	r5, r5, #3
 800702e:	3508      	adds	r5, #8
 8007030:	2d0c      	cmp	r5, #12
 8007032:	bf38      	it	cc
 8007034:	250c      	movcc	r5, #12
 8007036:	2d00      	cmp	r5, #0
 8007038:	4607      	mov	r7, r0
 800703a:	db01      	blt.n	8007040 <_malloc_r+0x1c>
 800703c:	42a9      	cmp	r1, r5
 800703e:	d905      	bls.n	800704c <_malloc_r+0x28>
 8007040:	230c      	movs	r3, #12
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	2600      	movs	r6, #0
 8007046:	4630      	mov	r0, r6
 8007048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800704c:	4e2e      	ldr	r6, [pc, #184]	; (8007108 <_malloc_r+0xe4>)
 800704e:	f000 f89d 	bl	800718c <__malloc_lock>
 8007052:	6833      	ldr	r3, [r6, #0]
 8007054:	461c      	mov	r4, r3
 8007056:	bb34      	cbnz	r4, 80070a6 <_malloc_r+0x82>
 8007058:	4629      	mov	r1, r5
 800705a:	4638      	mov	r0, r7
 800705c:	f7ff ffc2 	bl	8006fe4 <sbrk_aligned>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	4604      	mov	r4, r0
 8007064:	d14d      	bne.n	8007102 <_malloc_r+0xde>
 8007066:	6834      	ldr	r4, [r6, #0]
 8007068:	4626      	mov	r6, r4
 800706a:	2e00      	cmp	r6, #0
 800706c:	d140      	bne.n	80070f0 <_malloc_r+0xcc>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	4631      	mov	r1, r6
 8007072:	4638      	mov	r0, r7
 8007074:	eb04 0803 	add.w	r8, r4, r3
 8007078:	f000 f878 	bl	800716c <_sbrk_r>
 800707c:	4580      	cmp	r8, r0
 800707e:	d13a      	bne.n	80070f6 <_malloc_r+0xd2>
 8007080:	6821      	ldr	r1, [r4, #0]
 8007082:	3503      	adds	r5, #3
 8007084:	1a6d      	subs	r5, r5, r1
 8007086:	f025 0503 	bic.w	r5, r5, #3
 800708a:	3508      	adds	r5, #8
 800708c:	2d0c      	cmp	r5, #12
 800708e:	bf38      	it	cc
 8007090:	250c      	movcc	r5, #12
 8007092:	4629      	mov	r1, r5
 8007094:	4638      	mov	r0, r7
 8007096:	f7ff ffa5 	bl	8006fe4 <sbrk_aligned>
 800709a:	3001      	adds	r0, #1
 800709c:	d02b      	beq.n	80070f6 <_malloc_r+0xd2>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	442b      	add	r3, r5
 80070a2:	6023      	str	r3, [r4, #0]
 80070a4:	e00e      	b.n	80070c4 <_malloc_r+0xa0>
 80070a6:	6822      	ldr	r2, [r4, #0]
 80070a8:	1b52      	subs	r2, r2, r5
 80070aa:	d41e      	bmi.n	80070ea <_malloc_r+0xc6>
 80070ac:	2a0b      	cmp	r2, #11
 80070ae:	d916      	bls.n	80070de <_malloc_r+0xba>
 80070b0:	1961      	adds	r1, r4, r5
 80070b2:	42a3      	cmp	r3, r4
 80070b4:	6025      	str	r5, [r4, #0]
 80070b6:	bf18      	it	ne
 80070b8:	6059      	strne	r1, [r3, #4]
 80070ba:	6863      	ldr	r3, [r4, #4]
 80070bc:	bf08      	it	eq
 80070be:	6031      	streq	r1, [r6, #0]
 80070c0:	5162      	str	r2, [r4, r5]
 80070c2:	604b      	str	r3, [r1, #4]
 80070c4:	4638      	mov	r0, r7
 80070c6:	f104 060b 	add.w	r6, r4, #11
 80070ca:	f000 f865 	bl	8007198 <__malloc_unlock>
 80070ce:	f026 0607 	bic.w	r6, r6, #7
 80070d2:	1d23      	adds	r3, r4, #4
 80070d4:	1af2      	subs	r2, r6, r3
 80070d6:	d0b6      	beq.n	8007046 <_malloc_r+0x22>
 80070d8:	1b9b      	subs	r3, r3, r6
 80070da:	50a3      	str	r3, [r4, r2]
 80070dc:	e7b3      	b.n	8007046 <_malloc_r+0x22>
 80070de:	6862      	ldr	r2, [r4, #4]
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	bf0c      	ite	eq
 80070e4:	6032      	streq	r2, [r6, #0]
 80070e6:	605a      	strne	r2, [r3, #4]
 80070e8:	e7ec      	b.n	80070c4 <_malloc_r+0xa0>
 80070ea:	4623      	mov	r3, r4
 80070ec:	6864      	ldr	r4, [r4, #4]
 80070ee:	e7b2      	b.n	8007056 <_malloc_r+0x32>
 80070f0:	4634      	mov	r4, r6
 80070f2:	6876      	ldr	r6, [r6, #4]
 80070f4:	e7b9      	b.n	800706a <_malloc_r+0x46>
 80070f6:	230c      	movs	r3, #12
 80070f8:	603b      	str	r3, [r7, #0]
 80070fa:	4638      	mov	r0, r7
 80070fc:	f000 f84c 	bl	8007198 <__malloc_unlock>
 8007100:	e7a1      	b.n	8007046 <_malloc_r+0x22>
 8007102:	6025      	str	r5, [r4, #0]
 8007104:	e7de      	b.n	80070c4 <_malloc_r+0xa0>
 8007106:	bf00      	nop
 8007108:	20004b24 	.word	0x20004b24

0800710c <_realloc_r>:
 800710c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007110:	4680      	mov	r8, r0
 8007112:	4614      	mov	r4, r2
 8007114:	460e      	mov	r6, r1
 8007116:	b921      	cbnz	r1, 8007122 <_realloc_r+0x16>
 8007118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800711c:	4611      	mov	r1, r2
 800711e:	f7ff bf81 	b.w	8007024 <_malloc_r>
 8007122:	b92a      	cbnz	r2, 8007130 <_realloc_r+0x24>
 8007124:	f7ff ff12 	bl	8006f4c <_free_r>
 8007128:	4625      	mov	r5, r4
 800712a:	4628      	mov	r0, r5
 800712c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007130:	f000 f838 	bl	80071a4 <_malloc_usable_size_r>
 8007134:	4284      	cmp	r4, r0
 8007136:	4607      	mov	r7, r0
 8007138:	d802      	bhi.n	8007140 <_realloc_r+0x34>
 800713a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800713e:	d812      	bhi.n	8007166 <_realloc_r+0x5a>
 8007140:	4621      	mov	r1, r4
 8007142:	4640      	mov	r0, r8
 8007144:	f7ff ff6e 	bl	8007024 <_malloc_r>
 8007148:	4605      	mov	r5, r0
 800714a:	2800      	cmp	r0, #0
 800714c:	d0ed      	beq.n	800712a <_realloc_r+0x1e>
 800714e:	42bc      	cmp	r4, r7
 8007150:	4622      	mov	r2, r4
 8007152:	4631      	mov	r1, r6
 8007154:	bf28      	it	cs
 8007156:	463a      	movcs	r2, r7
 8007158:	f7ff fbb8 	bl	80068cc <memcpy>
 800715c:	4631      	mov	r1, r6
 800715e:	4640      	mov	r0, r8
 8007160:	f7ff fef4 	bl	8006f4c <_free_r>
 8007164:	e7e1      	b.n	800712a <_realloc_r+0x1e>
 8007166:	4635      	mov	r5, r6
 8007168:	e7df      	b.n	800712a <_realloc_r+0x1e>
	...

0800716c <_sbrk_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d06      	ldr	r5, [pc, #24]	; (8007188 <_sbrk_r+0x1c>)
 8007170:	2300      	movs	r3, #0
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	f7fa f8f2 	bl	8001360 <_sbrk>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d102      	bne.n	8007186 <_sbrk_r+0x1a>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	b103      	cbz	r3, 8007186 <_sbrk_r+0x1a>
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	bd38      	pop	{r3, r4, r5, pc}
 8007188:	20004b2c 	.word	0x20004b2c

0800718c <__malloc_lock>:
 800718c:	4801      	ldr	r0, [pc, #4]	; (8007194 <__malloc_lock+0x8>)
 800718e:	f000 b811 	b.w	80071b4 <__retarget_lock_acquire_recursive>
 8007192:	bf00      	nop
 8007194:	20004b30 	.word	0x20004b30

08007198 <__malloc_unlock>:
 8007198:	4801      	ldr	r0, [pc, #4]	; (80071a0 <__malloc_unlock+0x8>)
 800719a:	f000 b80c 	b.w	80071b6 <__retarget_lock_release_recursive>
 800719e:	bf00      	nop
 80071a0:	20004b30 	.word	0x20004b30

080071a4 <_malloc_usable_size_r>:
 80071a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071a8:	1f18      	subs	r0, r3, #4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bfbc      	itt	lt
 80071ae:	580b      	ldrlt	r3, [r1, r0]
 80071b0:	18c0      	addlt	r0, r0, r3
 80071b2:	4770      	bx	lr

080071b4 <__retarget_lock_acquire_recursive>:
 80071b4:	4770      	bx	lr

080071b6 <__retarget_lock_release_recursive>:
 80071b6:	4770      	bx	lr

080071b8 <_init>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	bf00      	nop
 80071bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071be:	bc08      	pop	{r3}
 80071c0:	469e      	mov	lr, r3
 80071c2:	4770      	bx	lr

080071c4 <_fini>:
 80071c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c6:	bf00      	nop
 80071c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ca:	bc08      	pop	{r3}
 80071cc:	469e      	mov	lr, r3
 80071ce:	4770      	bx	lr
