
P5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d74  0800ea50  0800ea50  0001ea50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117c4  080117c4  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  080117c4  080117c4  000217c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117cc  080117cc  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117cc  080117cc  000217cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080117d0  080117d0  000217d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080117d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f58  200001fc  080119d0  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005154  080119d0  00035154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb61  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fda  00000000  00000000  0004bd8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  0004fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  000513f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a387  00000000  00000000  00052910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb82  00000000  00000000  0006cc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0f30  00000000  00000000  00088819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007380  00000000  00000000  0012979c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ea38 	.word	0x0800ea38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800ea38 	.word	0x0800ea38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;

// ----------------------------------------------------------------
uint8_t bcd2bin(uint8_t data){
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	b2db      	uxtb	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	4413      	add	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 030f 	and.w	r3, r3, #15
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4413      	add	r3, r2
 800102c:	b2db      	uxtb	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <bin2bcd>:
// ----------------------------------------------------------------

uint8_t bin2bcd(uint8_t data){
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	return ((data/10)<<4)|(data%10);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <bin2bcd+0x44>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	b258      	sxtb	r0, r3
 8001056:	79fa      	ldrb	r2, [r7, #7]
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <bin2bcd+0x44>)
 800105a:	fba3 1302 	umull	r1, r3, r3, r2
 800105e:	08d9      	lsrs	r1, r3, #3
 8001060:	460b      	mov	r3, r1
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4303      	orrs	r3, r0
 8001070:	b25b      	sxtb	r3, r3
 8001072:	b2db      	uxtb	r3, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	cccccccd 	.word	0xcccccccd

08001084 <rtc_write>:
	return data;
}
// ----------------------------------------------------------------

void rtc_write(uint8_t address,uint8_t data)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af04      	add	r7, sp, #16
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,address,I2C_MEMADD_SIZE_8BIT,&data,1,100)!=HAL_OK){
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	b29a      	uxth	r2, r3
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2301      	movs	r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	1dbb      	adds	r3, r7, #6
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <rtc_write+0x34>)
 80010ac:	f003 f96e 	bl	800438c <HAL_I2C_Mem_Write>
		//Error_Handler();
	}
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000260 	.word	0x20000260

080010bc <rtc_init>:
// ----------------------------------------------------------------

void rtc_init(uint8_t rs,uint8_t sqwe,uint8_t out)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	460b      	mov	r3, r1
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	4613      	mov	r3, r2
 80010cc:	717b      	strb	r3, [r7, #5]
	rs&=3;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	71fb      	strb	r3, [r7, #7]
	if (sqwe) rs|=0x10;
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <rtc_init+0x28>
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	71fb      	strb	r3, [r7, #7]
	if (out) rs|=0x80;
 80010e4:	797b      	ldrb	r3, [r7, #5]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <rtc_init+0x36>
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f0:	71fb      	strb	r3, [r7, #7]

	rtc_write(0x07,rs);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	4619      	mov	r1, r3
 80010f6:	2007      	movs	r0, #7
 80010f8:	f7ff ffc4 	bl	8001084 <rtc_write>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <rtc_get_time>:
// ----------------------------------------------------------------

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af04      	add	r7, sp, #16
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8001110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2303      	movs	r3, #3
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2200      	movs	r2, #0
 8001124:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <rtc_get_time+0x64>)
 800112a:	f003 fa29 	bl	8004580 <HAL_I2C_Mem_Read>
		//Error_Handler();
	}

	*sec=bcd2bin(data[0]);
 800112e:	7d3b      	ldrb	r3, [r7, #20]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff69 	bl	8001008 <bcd2bin>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 800113e:	7d7b      	ldrb	r3, [r7, #21]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff61 	bl	8001008 <bcd2bin>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 800114e:	7dbb      	ldrb	r3, [r7, #22]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff59 	bl	8001008 <bcd2bin>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	701a      	strb	r2, [r3, #0]
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000260 	.word	0x20000260

0800116c <rtc_set_time>:
// ----------------------------------------------------------------

void rtc_set_time(uint8_t hour,uint8_t min,uint8_t sec)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af04      	add	r7, sp, #16
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	460b      	mov	r3, r1
 8001178:	71bb      	strb	r3, [r7, #6]
 800117a:	4613      	mov	r3, r2
 800117c:	717b      	strb	r3, [r7, #5]
	uint8_t data[3]={bin2bcd(sec),bin2bcd(min),bin2bcd(hour)};
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5b 	bl	800103c <bin2bcd>
 8001186:	4603      	mov	r3, r0
 8001188:	733b      	strb	r3, [r7, #12]
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff55 	bl	800103c <bin2bcd>
 8001192:	4603      	mov	r3, r0
 8001194:	737b      	strb	r3, [r7, #13]
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff4f 	bl	800103c <bin2bcd>
 800119e:	4603      	mov	r3, r0
 80011a0:	73bb      	strb	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	2303      	movs	r3, #3
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	2200      	movs	r2, #0
 80011b6:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 80011ba:	4803      	ldr	r0, [pc, #12]	; (80011c8 <rtc_set_time+0x5c>)
 80011bc:	f003 f8e6 	bl	800438c <HAL_I2C_Mem_Write>
		//Error_Handler();
	}
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000260 	.word	0x20000260

080011cc <rtc_get_date>:
// ----------------------------------------------------------------

void rtc_get_date(uint8_t *week_day,uint8_t *day,uint8_t *month,uint8_t *year)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
	uint8_t data[4]={0,0,0,0};
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	9302      	str	r3, [sp, #8]
 80011e4:	2304      	movs	r3, #4
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 80011f6:	4811      	ldr	r0, [pc, #68]	; (800123c <rtc_get_date+0x70>)
 80011f8:	f003 f9c2 	bl	8004580 <HAL_I2C_Mem_Read>
		//Error_Handler();
	}

	*week_day=data[0];
 80011fc:	7d3a      	ldrb	r2, [r7, #20]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	701a      	strb	r2, [r3, #0]
	*day=bcd2bin(data[1]);
 8001202:	7d7b      	ldrb	r3, [r7, #21]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff feff 	bl	8001008 <bcd2bin>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	701a      	strb	r2, [r3, #0]
	*month=bcd2bin(data[2]);
 8001212:	7dbb      	ldrb	r3, [r7, #22]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fef7 	bl	8001008 <bcd2bin>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	701a      	strb	r2, [r3, #0]
	*year=bcd2bin(data[3]);
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff feef 	bl	8001008 <bcd2bin>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	701a      	strb	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000260 	.word	0x20000260

08001240 <rtc_set_date>:
// ----------------------------------------------------------------

void rtc_set_date(uint8_t week_day,uint8_t day,uint8_t month,uint8_t year)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af04      	add	r7, sp, #16
 8001246:	4604      	mov	r4, r0
 8001248:	4608      	mov	r0, r1
 800124a:	4611      	mov	r1, r2
 800124c:	461a      	mov	r2, r3
 800124e:	4623      	mov	r3, r4
 8001250:	71fb      	strb	r3, [r7, #7]
 8001252:	4603      	mov	r3, r0
 8001254:	71bb      	strb	r3, [r7, #6]
 8001256:	460b      	mov	r3, r1
 8001258:	717b      	strb	r3, [r7, #5]
 800125a:	4613      	mov	r3, r2
 800125c:	713b      	strb	r3, [r7, #4]
	uint8_t data[4]={week_day,bin2bcd(day),bin2bcd(month),bin2bcd(year)};
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	733b      	strb	r3, [r7, #12]
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fee9 	bl	800103c <bin2bcd>
 800126a:	4603      	mov	r3, r0
 800126c:	737b      	strb	r3, [r7, #13]
 800126e:	797b      	ldrb	r3, [r7, #5]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fee3 	bl	800103c <bin2bcd>
 8001276:	4603      	mov	r3, r0
 8001278:	73bb      	strb	r3, [r7, #14]
 800127a:	793b      	ldrb	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fedd 	bl	800103c <bin2bcd>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2304      	movs	r3, #4
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <rtc_set_date+0x6c>)
 80012a0:	f003 f874 	bl	800438c <HAL_I2C_Mem_Write>
		//Error_Handler();
	}
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	20000260 	.word	0x20000260

080012b0 <lcd_begin>:
static void lcd_sendCmd(LCD_t *lcd, char cmd);
static void delay_us(uint16_t time);

/* Exported functions --------------------------------------------------------*/
//init lcd display
void lcd_begin(LCD_t *lcd, uint8_t cols, uint8_t rows, uint8_t dotsize) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	4608      	mov	r0, r1
 80012ba:	4611      	mov	r1, r2
 80012bc:	461a      	mov	r2, r3
 80012be:	4603      	mov	r3, r0
 80012c0:	70fb      	strb	r3, [r7, #3]
 80012c2:	460b      	mov	r3, r1
 80012c4:	70bb      	strb	r3, [r7, #2]
 80012c6:	4613      	mov	r3, r2
 80012c8:	707b      	strb	r3, [r7, #1]
	// 4 bit initialization
	lcd->displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if (rows > 1) lcd->displayfunction |= LCD_2LINE;
 80012d2:	78bb      	ldrb	r3, [r7, #2]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d908      	bls.n	80012ea <lcd_begin+0x3a>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	lcd->rows = rows;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	78ba      	ldrb	r2, [r7, #2]
 80012ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	lcd->cols = cols;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	78fa      	ldrb	r2, [r7, #3]
 80012f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	lcd_setRowOffsets(lcd, 0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80012fa:	78fa      	ldrb	r2, [r7, #3]
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	3340      	adds	r3, #64	; 0x40
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	4613      	mov	r3, r2
 8001304:	2240      	movs	r2, #64	; 0x40
 8001306:	2100      	movs	r1, #0
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f8ee 	bl	80014ea <lcd_setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (rows == 1)) {
 800130e:	787b      	ldrb	r3, [r7, #1]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00b      	beq.n	800132c <lcd_begin+0x7c>
 8001314:	78bb      	ldrb	r3, [r7, #2]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d108      	bne.n	800132c <lcd_begin+0x7c>
		lcd->displayfunction |= LCD_5x10DOTS;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}

	HAL_Delay(50);			// wait for >40ms
 800132c:	2032      	movs	r0, #50	; 0x32
 800132e:	f001 fe51 	bl	8002fd4 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 8001332:	2103      	movs	r1, #3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f972 	bl	800161e <lcd_sendCmd>
	HAL_Delay(5);			// wait for >4.1ms
 800133a:	2005      	movs	r0, #5
 800133c:	f001 fe4a 	bl	8002fd4 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 8001340:	2103      	movs	r1, #3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f96b 	bl	800161e <lcd_sendCmd>
	delay_us(150);			// wait for >100us
 8001348:	2096      	movs	r0, #150	; 0x96
 800134a:	f000 f985 	bl	8001658 <delay_us>
	lcd_sendCmd(lcd, 0x03);
 800134e:	2103      	movs	r1, #3
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f964 	bl	800161e <lcd_sendCmd>
	lcd_sendCmd(lcd, 0x02);	//set 4 bit mode
 8001356:	2102      	movs	r1, #2
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f960 	bl	800161e <lcd_sendCmd>
	HAL_Delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f001 fe38 	bl	8002fd4 <HAL_Delay>

	// finally, set interface type, # lines and font size
	lcd_sendCmd(lcd, LCD_FUNCTIONSET | lcd->displayfunction);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800136a:	f043 0320 	orr.w	r3, r3, #32
 800136e:	b2db      	uxtb	r3, r3
 8001370:	4619      	mov	r1, r3
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f953 	bl	800161e <lcd_sendCmd>
	//set display control D=1,C=0, B=0, display on, cursor off and cursor blink off
	lcd->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2204      	movs	r2, #4
 800137c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_display(lcd);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f84e 	bl	8001422 <lcd_display>
	lcd_clear(lcd);  // clear display
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f815 	bl	80013b6 <lcd_clear>
	HAL_Delay(2);
 800138c:	2002      	movs	r0, #2
 800138e:	f001 fe21 	bl	8002fd4 <HAL_Delay>
	// set the entry mode --> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2202      	movs	r2, #2
 8001396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd_sendCmd(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4619      	mov	r1, r3
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f938 	bl	800161e <lcd_sendCmd>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <lcd_clear>:
// ----------------------------------------------------------------

//clear lcd display
void lcd_clear(LCD_t *lcd) {
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_CLEARDISPLAY);
 80013be:	2101      	movs	r1, #1
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f92c 	bl	800161e <lcd_sendCmd>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <lcd_home>:
// ----------------------------------------------------------------

// set cursor position to zero
void lcd_home(LCD_t *lcd) {
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_RETURNHOME);
 80013d6:	2102      	movs	r1, #2
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f920 	bl	800161e <lcd_sendCmd>
	HAL_Delay(2);	//delay >= 1.52ms
 80013de:	2002      	movs	r0, #2
 80013e0:	f001 fdf8 	bl	8002fd4 <HAL_Delay>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <lcd_noDisplay>:
// ----------------------------------------------------------------

// Turn the display off
void lcd_noDisplay(LCD_t *lcd) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol &= ~LCD_DISPLAYON;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80013fa:	f023 0304 	bic.w	r3, r3, #4
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f902 	bl	800161e <lcd_sendCmd>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <lcd_display>:

// ----------------------------------------------------------------

// Turn the display on
void lcd_display(LCD_t *lcd) {
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_DISPLAYON;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	b2da      	uxtb	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4619      	mov	r1, r3
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f8e7 	bl	800161e <lcd_sendCmd>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <lcd_setCursor>:
}
/¡*/
// ----------------------------------------------------------------

//set cursor position
void lcd_setCursor(LCD_t *lcd, uint8_t col, uint8_t row) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
 8001464:	4613      	mov	r3, r2
 8001466:	70bb      	strb	r3, [r7, #2]
	const size_t max_rows = sizeof(lcd->row_offsets) / sizeof(*lcd->row_offsets);
 8001468:	2304      	movs	r3, #4
 800146a:	60fb      	str	r3, [r7, #12]
	if (row >= max_rows) {
 800146c:	78bb      	ldrb	r3, [r7, #2]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d803      	bhi.n	800147c <lcd_setCursor+0x24>
		row = max_rows - 1;    // we count rows starting w/0
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	3b01      	subs	r3, #1
 800147a:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= lcd->rows) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001482:	78ba      	ldrb	r2, [r7, #2]
 8001484:	429a      	cmp	r2, r3
 8001486:	d304      	bcc.n	8001492 <lcd_setCursor+0x3a>
		row = lcd->rows - 1;    // we count rows starting w/0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800148e:	3b01      	subs	r3, #1
 8001490:	70bb      	strb	r3, [r7, #2]
	}

	lcd_sendCmd(lcd, LCD_SETDDRAMADDR | (col + lcd->row_offsets[row]));
 8001492:	78bb      	ldrb	r3, [r7, #2]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	4413      	add	r3, r2
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	4619      	mov	r1, r3
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f8b5 	bl	800161e <lcd_sendCmd>
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <lcd_print>:
// ----------------------------------------------------------------

//send strings to lcd
void lcd_print(LCD_t *lcd, char *str) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	while (*str)
 80014c6:	e007      	b.n	80014d8 <lcd_print+0x1c>
		lcd_sendData(lcd, *str++);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	603a      	str	r2, [r7, #0]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f886 	bl	80015e4 <lcd_sendData>
	while (*str)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f3      	bne.n	80014c8 <lcd_print+0xc>
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <lcd_setRowOffsets>:
// ----------------------------------------------------------------

/* Privated functions --------------------------------------------------------*/
//set row offset for diferent display
static void lcd_setRowOffsets(LCD_t *lcd, int row0, int row1, int row2,
    int row3) {
 80014ea:	b480      	push	{r7}
 80014ec:	b085      	sub	sp, #20
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	603b      	str	r3, [r7, #0]
	lcd->row_offsets[0] = row0;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	lcd->row_offsets[1] = row1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	lcd->row_offsets[2] = row2;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	lcd->row_offsets[3] = row3;
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <lcd_send>:
// ----------------------------------------------------------------

//send info to lcd in 4 byte mode
static void lcd_send(LCD_t *lcd, char data, uint8_t rs) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
 8001538:	4613      	mov	r3, r2
 800153a:	70bb      	strb	r3, [r7, #2]
	// rs = 1 for data, rs=0 for command
	HAL_GPIO_WritePin(lcd->RS_port, lcd->RS_pin, rs);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	889b      	ldrh	r3, [r3, #4]
 8001544:	78ba      	ldrb	r2, [r7, #2]
 8001546:	4619      	mov	r1, r3
 8001548:	f002 fdaa 	bl	80040a0 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(lcd->D7_port, lcd->D7_pin, ((data >> 3) & 0x01));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	08db      	lsrs	r3, r3, #3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	f002 fd9d 	bl	80040a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_port, lcd->D6_pin, ((data >> 2) & 0x01));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	f002 fd90 	bl	80040a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_port, lcd->D5_pin, ((data >> 1) & 0x01));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a18      	ldr	r0, [r3, #32]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	f002 fd83 	bl	80040a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_port, lcd->D4_pin, ((data >> 0) & 0x01));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6998      	ldr	r0, [r3, #24]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	8b99      	ldrh	r1, [r3, #28]
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	f002 fd78 	bl	80040a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_SET);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6918      	ldr	r0, [r3, #16]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	8a9b      	ldrh	r3, [r3, #20]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4619      	mov	r1, r3
 80015bc:	f002 fd70 	bl	80040a0 <HAL_GPIO_WritePin>
	delay_us(1);	// enable pulse must be > 450ns
 80015c0:	2001      	movs	r0, #1
 80015c2:	f000 f849 	bl	8001658 <delay_us>
	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_RESET);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6918      	ldr	r0, [r3, #16]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	8a9b      	ldrh	r3, [r3, #20]
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	f002 fd65 	bl	80040a0 <HAL_GPIO_WritePin>
	delay_us(50);	// commands need > 37us to settle
 80015d6:	2032      	movs	r0, #50	; 0x32
 80015d8:	f000 f83e 	bl	8001658 <delay_us>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <lcd_sendData>:
// ----------------------------------------------------------------

//When 4bit bus mode, it needs to transfer 4bit data by two times
//send data to lcd
static void lcd_sendData(LCD_t *lcd, char data) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
	char _data;

	// send higher nibble
	_data = ((data >> 4) & 0x0f);
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);  // rs =1 for sending data
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4619      	mov	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff95 	bl	800152c <lcd_send>

	// send Lower nibble
	_data = ((data) & 0x0f);
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	2201      	movs	r2, #1
 800160e:	4619      	mov	r1, r3
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff8b 	bl	800152c <lcd_send>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <lcd_sendCmd>:
// ----------------------------------------------------------------

//When 4bit bus mode, it needs to transfer 4bit data by two times
//send command to lcd
static void lcd_sendCmd(LCD_t *lcd, char cmd) {
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	70fb      	strb	r3, [r7, #3]
	char _cmd;

	// send higher nibble
	_cmd = ((cmd >> 4) & 0x0f);
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);  // rs = 0 for sending command
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2200      	movs	r2, #0
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff78 	bl	800152c <lcd_send>

	// send Lower nibble
	_cmd = ((cmd) & 0x0f);
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2200      	movs	r2, #0
 8001648:	4619      	mov	r1, r3
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ff6e 	bl	800152c <lcd_send>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <delay_us>:
// ----------------------------------------------------------------

//set delay in microseconds
static void delay_us(uint16_t time) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	uint16_t delay = time * (HAL_RCC_GetHCLKFreq() / 1000000);
 8001662:	f004 f973 	bl	800594c <HAL_RCC_GetHCLKFreq>
 8001666:	4603      	mov	r3, r0
 8001668:	4a0c      	ldr	r2, [pc, #48]	; (800169c <delay_us+0x44>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9b      	lsrs	r3, r3, #18
 8001670:	b29b      	uxth	r3, r3
 8001672:	88fa      	ldrh	r2, [r7, #6]
 8001674:	fb12 f303 	smulbb	r3, r2, r3
 8001678:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < delay; i += 14) {
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e003      	b.n	8001688 <delay_us+0x30>
		__ASM("NOP");
 8001680:	bf00      	nop
	for (int i = 0; i < delay; i += 14) {
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	330e      	adds	r3, #14
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	897b      	ldrh	r3, [r7, #10]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf7      	blt.n	8001680 <delay_us+0x28>
	}
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	431bde83 	.word	0x431bde83

080016a0 <set_RGB>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void set_RGB(uint8_t red, uint8_t green, uint8_t blue) //¿¿¿En el modulo esta cambiado R por G????
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
 80016aa:	460b      	mov	r3, r1
 80016ac:	71bb      	strb	r3, [r7, #6]
 80016ae:	4613      	mov	r3, r2
 80016b0:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, blue);
 80016b2:	797b      	ldrb	r3, [r7, #5]
 80016b4:	461a      	mov	r2, r3
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	480a      	ldr	r0, [pc, #40]	; (80016e4 <set_RGB+0x44>)
 80016ba:	f002 fcf1 	bl	80040a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, green);
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	461a      	mov	r2, r3
 80016c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <set_RGB+0x48>)
 80016c8:	f002 fcea 	bl	80040a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, red);
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <set_RGB+0x48>)
 80016d6:	f002 fce3 	bl	80040a0 <HAL_GPIO_WritePin>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020000 	.word	0x40020000

080016ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f0:	f001 fbfe 	bl	8002ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f4:	f000 f896 	bl	8001824 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  lcd_config();
 80016f8:	f000 fa88 	bl	8001c0c <lcd_config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fc:	f000 f9d6 	bl	8001aac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001700:	f000 f9aa 	bl	8001a58 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001704:	f000 f94c 	bl	80019a0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001708:	f000 f8f8 	bl	80018fc <MX_ADC1_Init>
  MX_I2C3_Init();
 800170c:	f000 f976 	bl	80019fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001710:	f000 ff3a 	bl	8002588 <ssd1306_Init>
  lcd_rgb_init(&lcd);
 8001714:	482b      	ldr	r0, [pc, #172]	; (80017c4 <main+0xd8>)
 8001716:	f000 faad 	bl	8001c74 <lcd_rgb_init>
  ds1307_init();
 800171a:	f000 fadf 	bl	8001cdc <ds1307_init>
  rtc_set_date(1, 1, 1, 23);
  */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800171e:	f005 f92f 	bl	8006980 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of datos */
  datosHandle = osMessageQueueNew (32, sizeof(float), &datos_attributes);
 8001722:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <main+0xdc>)
 8001724:	2104      	movs	r1, #4
 8001726:	2020      	movs	r0, #32
 8001728:	f005 fb5d 	bl	8006de6 <osMessageQueueNew>
 800172c:	4603      	mov	r3, r0
 800172e:	4a27      	ldr	r2, [pc, #156]	; (80017cc <main+0xe0>)
 8001730:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001732:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <main+0xe4>)
 8001734:	2100      	movs	r1, #0
 8001736:	4827      	ldr	r0, [pc, #156]	; (80017d4 <main+0xe8>)
 8001738:	f005 f96c 	bl	8006a14 <osThreadNew>
 800173c:	4603      	mov	r3, r0
 800173e:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <main+0xec>)
 8001740:	6013      	str	r3, [r2, #0]

  /* creation of mostrarLCD */
  mostrarLCDHandle = osThreadNew(MostrarDatosLCD, NULL, &mostrarLCD_attributes);
 8001742:	4a26      	ldr	r2, [pc, #152]	; (80017dc <main+0xf0>)
 8001744:	2100      	movs	r1, #0
 8001746:	4826      	ldr	r0, [pc, #152]	; (80017e0 <main+0xf4>)
 8001748:	f005 f964 	bl	8006a14 <osThreadNew>
 800174c:	4603      	mov	r3, r0
 800174e:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <main+0xf8>)
 8001750:	6013      	str	r3, [r2, #0]

  /* creation of lectura */
  lecturaHandle = osThreadNew(Lectura, NULL, &lectura_attributes);
 8001752:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <main+0xfc>)
 8001754:	2100      	movs	r1, #0
 8001756:	4825      	ldr	r0, [pc, #148]	; (80017ec <main+0x100>)
 8001758:	f005 f95c 	bl	8006a14 <osThreadNew>
 800175c:	4603      	mov	r3, r0
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <main+0x104>)
 8001760:	6013      	str	r3, [r2, #0]

  /* creation of setRGB */
  setRGBHandle = osThreadNew(SetRGB, NULL, &setRGB_attributes);
 8001762:	4a24      	ldr	r2, [pc, #144]	; (80017f4 <main+0x108>)
 8001764:	2100      	movs	r1, #0
 8001766:	4824      	ldr	r0, [pc, #144]	; (80017f8 <main+0x10c>)
 8001768:	f005 f954 	bl	8006a14 <osThreadNew>
 800176c:	4603      	mov	r3, r0
 800176e:	4a23      	ldr	r2, [pc, #140]	; (80017fc <main+0x110>)
 8001770:	6013      	str	r3, [r2, #0]

  /* creation of OLED_TASKHAndle */
  OLED_TASKHAndleHandle = osThreadNew(StartTask06, NULL, &OLED_TASKHAndle_attributes);
 8001772:	4a23      	ldr	r2, [pc, #140]	; (8001800 <main+0x114>)
 8001774:	2100      	movs	r1, #0
 8001776:	4823      	ldr	r0, [pc, #140]	; (8001804 <main+0x118>)
 8001778:	f005 f94c 	bl	8006a14 <osThreadNew>
 800177c:	4603      	mov	r3, r0
 800177e:	4a22      	ldr	r2, [pc, #136]	; (8001808 <main+0x11c>)
 8001780:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of lcdDisplayFlag */
  lcdDisplayFlagHandle = osEventFlagsNew(&lcdDisplayFlag_attributes);
 8001782:	4822      	ldr	r0, [pc, #136]	; (800180c <main+0x120>)
 8001784:	f005 f9f3 	bl	8006b6e <osEventFlagsNew>
 8001788:	4603      	mov	r3, r0
 800178a:	4a21      	ldr	r2, [pc, #132]	; (8001810 <main+0x124>)
 800178c:	6013      	str	r3, [r2, #0]

  /* creation of rgbModeFlag */
  rgbModeFlagHandle = osEventFlagsNew(&rgbModeFlag_attributes);
 800178e:	4821      	ldr	r0, [pc, #132]	; (8001814 <main+0x128>)
 8001790:	f005 f9ed 	bl	8006b6e <osEventFlagsNew>
 8001794:	4603      	mov	r3, r0
 8001796:	4a20      	ldr	r2, [pc, #128]	; (8001818 <main+0x12c>)
 8001798:	6013      	str	r3, [r2, #0]

  /* creation of myEvent01 */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 800179a:	4820      	ldr	r0, [pc, #128]	; (800181c <main+0x130>)
 800179c:	f005 f9e7 	bl	8006b6e <osEventFlagsNew>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <main+0x134>)
 80017a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  osEventFlagsSet(lcdDisplayFlagHandle, 0x00000001U);
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <main+0x124>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2101      	movs	r1, #1
 80017ac:	4618      	mov	r0, r3
 80017ae:	f005 fa1d 	bl	8006bec <osEventFlagsSet>
  osEventFlagsSet(rgbModeFlagHandle, 0x00000080U);
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <main+0x12c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	4618      	mov	r0, r3
 80017ba:	f005 fa17 	bl	8006bec <osEventFlagsSet>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017be:	f005 f903 	bl	80069c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <main+0xd6>
 80017c4:	20000370 	.word	0x20000370
 80017c8:	0800ec24 	.word	0x0800ec24
 80017cc:	20000360 	.word	0x20000360
 80017d0:	0800eb70 	.word	0x0800eb70
 80017d4:	08002191 	.word	0x08002191
 80017d8:	2000034c 	.word	0x2000034c
 80017dc:	0800eb94 	.word	0x0800eb94
 80017e0:	080021e1 	.word	0x080021e1
 80017e4:	20000350 	.word	0x20000350
 80017e8:	0800ebb8 	.word	0x0800ebb8
 80017ec:	080022f1 	.word	0x080022f1
 80017f0:	20000354 	.word	0x20000354
 80017f4:	0800ebdc 	.word	0x0800ebdc
 80017f8:	0800239d 	.word	0x0800239d
 80017fc:	20000358 	.word	0x20000358
 8001800:	0800ec00 	.word	0x0800ec00
 8001804:	080024c9 	.word	0x080024c9
 8001808:	2000035c 	.word	0x2000035c
 800180c:	0800ec3c 	.word	0x0800ec3c
 8001810:	20000364 	.word	0x20000364
 8001814:	0800ec4c 	.word	0x0800ec4c
 8001818:	20000368 	.word	0x20000368
 800181c:	0800ec5c 	.word	0x0800ec5c
 8001820:	2000036c 	.word	0x2000036c

08001824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	2230      	movs	r2, #48	; 0x30
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f008 fc98 	bl	800a168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <SystemClock_Config+0xd0>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <SystemClock_Config+0xd0>)
 8001852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001856:	6413      	str	r3, [r2, #64]	; 0x40
 8001858:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <SystemClock_Config+0xd0>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <SystemClock_Config+0xd4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001870:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <SystemClock_Config+0xd4>)
 8001872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <SystemClock_Config+0xd4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001884:	2302      	movs	r3, #2
 8001886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001888:	2301      	movs	r3, #1
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800188c:	2310      	movs	r3, #16
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001890:	2302      	movs	r3, #2
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001894:	2300      	movs	r3, #0
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001898:	2310      	movs	r3, #16
 800189a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800189c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018a2:	2304      	movs	r3, #4
 80018a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018a6:	2307      	movs	r3, #7
 80018a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 fbe8 	bl	8005084 <HAL_RCC_OscConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018ba:	f000 fe27 	bl	800250c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018be:	230f      	movs	r3, #15
 80018c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c2:	2302      	movs	r3, #2
 80018c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2102      	movs	r1, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fe4a 	bl	8005574 <HAL_RCC_ClockConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018e6:	f000 fe11 	bl	800250c <Error_Handler>
  }
}
 80018ea:	bf00      	nop
 80018ec:	3750      	adds	r7, #80	; 0x50
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40007000 	.word	0x40007000

080018fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <MX_ADC1_Init+0x98>)
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <MX_ADC1_Init+0x9c>)
 8001912:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <MX_ADC1_Init+0x98>)
 8001916:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800191a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <MX_ADC1_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <MX_ADC1_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <MX_ADC1_Init+0x98>)
 800192a:	2200      	movs	r2, #0
 800192c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <MX_ADC1_Init+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <MX_ADC1_Init+0x98>)
 8001938:	2200      	movs	r2, #0
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_ADC1_Init+0x98>)
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <MX_ADC1_Init+0xa0>)
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <MX_ADC1_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_ADC1_Init+0x98>)
 800194a:	2201      	movs	r2, #1
 800194c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_ADC1_Init+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_ADC1_Init+0x98>)
 8001958:	2201      	movs	r2, #1
 800195a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <MX_ADC1_Init+0x98>)
 800195e:	f001 fb5d 	bl	800301c <HAL_ADC_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001968:	f000 fdd0 	bl	800250c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001970:	2301      	movs	r3, #1
 8001972:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_ADC1_Init+0x98>)
 800197e:	f001 fe3f 	bl	8003600 <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001988:	f000 fdc0 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000218 	.word	0x20000218
 8001998:	40012000 	.word	0x40012000
 800199c:	0f000001 	.word	0x0f000001

080019a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <MX_I2C1_Init+0x54>)
 80019a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <MX_I2C1_Init+0x58>)
 80019ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019de:	f002 fb91 	bl	8004104 <HAL_I2C_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019e8:	f000 fd90 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000260 	.word	0x20000260
 80019f4:	40005400 	.word	0x40005400
 80019f8:	000186a0 	.word	0x000186a0

080019fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <MX_I2C3_Init+0x54>)
 8001a04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a08:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <MX_I2C3_Init+0x58>)
 8001a0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a1e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a3a:	f002 fb63 	bl	8004104 <HAL_I2C_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a44:	f000 fd62 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200002b4 	.word	0x200002b4
 8001a50:	40005c00 	.word	0x40005c00
 8001a54:	000186a0 	.word	0x000186a0

08001a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <MX_USART2_UART_Init+0x50>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a90:	f003 ff90 	bl	80059b4 <HAL_UART_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a9a:	f000 fd37 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000308 	.word	0x20000308
 8001aa8:	40004400 	.word	0x40004400

08001aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b46      	ldr	r3, [pc, #280]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a45      	ldr	r2, [pc, #276]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a3e      	ldr	r2, [pc, #248]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b3c      	ldr	r3, [pc, #240]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a37      	ldr	r2, [pc, #220]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RGB_green_Pin|RGB_red_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001b38:	4831      	ldr	r0, [pc, #196]	; (8001c00 <MX_GPIO_Init+0x154>)
 8001b3a:	f002 fab1 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|D7_Pin|D6_Pin
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f24f 4102 	movw	r1, #62466	; 0xf402
 8001b44:	482f      	ldr	r0, [pc, #188]	; (8001c04 <MX_GPIO_Init+0x158>)
 8001b46:	f002 faab 	bl	80040a0 <HAL_GPIO_WritePin>
                          |D5_Pin|D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_blue_GPIO_Port, RGB_blue_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	482e      	ldr	r0, [pc, #184]	; (8001c08 <MX_GPIO_Init+0x15c>)
 8001b50:	f002 faa6 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4827      	ldr	r0, [pc, #156]	; (8001c08 <MX_GPIO_Init+0x15c>)
 8001b6c:	f002 f914 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RGB_green_Pin RGB_red_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RGB_green_Pin|RGB_red_Pin;
 8001b70:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8001b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	481d      	ldr	r0, [pc, #116]	; (8001c00 <MX_GPIO_Init+0x154>)
 8001b8a:	f002 f905 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin D7_Pin D6_Pin
                           D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|D7_Pin|D6_Pin
 8001b8e:	f24f 4302 	movw	r3, #62466	; 0xf402
 8001b92:	617b      	str	r3, [r7, #20]
                          |D5_Pin|D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4817      	ldr	r0, [pc, #92]	; (8001c04 <MX_GPIO_Init+0x158>)
 8001ba8:	f002 f8f6 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_blue_Pin */
  GPIO_InitStruct.Pin = RGB_blue_Pin;
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RGB_blue_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4811      	ldr	r0, [pc, #68]	; (8001c08 <MX_GPIO_Init+0x15c>)
 8001bc4:	f002 f8e8 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : BotonDisplay_Pin BotonRGB_Pin */
  GPIO_InitStruct.Pin = BotonDisplay_Pin|BotonRGB_Pin;
 8001bc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480a      	ldr	r0, [pc, #40]	; (8001c08 <MX_GPIO_Init+0x15c>)
 8001be0:	f002 f8da 	bl	8003d98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2105      	movs	r1, #5
 8001be8:	2028      	movs	r0, #40	; 0x28
 8001bea:	f002 f80c 	bl	8003c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bee:	2028      	movs	r0, #40	; 0x28
 8001bf0:	f002 f825 	bl	8003c3e <HAL_NVIC_EnableIRQ>

}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020800 	.word	0x40020800

08001c0c <lcd_config>:

/* USER CODE BEGIN 4 */
void lcd_config(void) {
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
	lcd.RS_port= LCD_RS_GPIO_Port;
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <lcd_config+0x60>)
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <lcd_config+0x64>)
 8001c14:	601a      	str	r2, [r3, #0]
	lcd.RS_pin = LCD_RS_Pin;
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <lcd_config+0x60>)
 8001c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c1c:	809a      	strh	r2, [r3, #4]
	//lcd.RW_port = LCD_RW_GPIO_Port;
	//lcd.RW_pin = LCD_RW_Pin;
	lcd.EN_port = LCD_EN_GPIO_Port;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <lcd_config+0x60>)
 8001c20:	4a13      	ldr	r2, [pc, #76]	; (8001c70 <lcd_config+0x64>)
 8001c22:	611a      	str	r2, [r3, #16]
	lcd.EN_pin = LCD_EN_Pin;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <lcd_config+0x60>)
 8001c26:	2202      	movs	r2, #2
 8001c28:	829a      	strh	r2, [r3, #20]
	lcd.D4_port = D4_GPIO_Port;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <lcd_config+0x60>)
 8001c2c:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <lcd_config+0x64>)
 8001c2e:	619a      	str	r2, [r3, #24]
	lcd.D4_pin = D4_Pin;
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <lcd_config+0x60>)
 8001c32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c36:	839a      	strh	r2, [r3, #28]
	lcd.D5_port = D5_GPIO_Port;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <lcd_config+0x60>)
 8001c3a:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <lcd_config+0x64>)
 8001c3c:	621a      	str	r2, [r3, #32]
	lcd.D5_pin = D5_Pin;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <lcd_config+0x60>)
 8001c40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c44:	849a      	strh	r2, [r3, #36]	; 0x24
	lcd.D6_port = D6_GPIO_Port;
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <lcd_config+0x60>)
 8001c48:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <lcd_config+0x64>)
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
	lcd.D6_pin = D6_Pin;
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <lcd_config+0x60>)
 8001c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c52:	859a      	strh	r2, [r3, #44]	; 0x2c
	lcd.D7_port = D7_GPIO_Port;
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <lcd_config+0x60>)
 8001c56:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <lcd_config+0x64>)
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
	lcd.D7_pin = D7_Pin;
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <lcd_config+0x60>)
 8001c5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c60:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	20000370 	.word	0x20000370
 8001c70:	40020400 	.word	0x40020400

08001c74 <lcd_rgb_init>:

void lcd_rgb_init(LCD_t *lcd_dir) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	lcd_begin(lcd_dir, 16, 2, LCD_5x8DOTS);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2202      	movs	r2, #2
 8001c80:	2110      	movs	r1, #16
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fb14 	bl	80012b0 <lcd_begin>

	// Mensaje inicial
	lcd_setCursor(lcd_dir, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fbe3 	bl	8001458 <lcd_setCursor>
	lcd_print(lcd_dir, "  Tiempo Real   ");
 8001c92:	4910      	ldr	r1, [pc, #64]	; (8001cd4 <lcd_rgb_init+0x60>)
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff fc11 	bl	80014bc <lcd_print>
	lcd_setCursor(lcd_dir, 0, 1);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fbda 	bl	8001458 <lcd_setCursor>
	lcd_print(lcd_dir, "  Xiang & Alex  ");
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <lcd_rgb_init+0x64>)
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fc08 	bl	80014bc <lcd_print>
	set_RGB(1,1,1);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2101      	movs	r1, #1
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f7ff fcf5 	bl	80016a0 <set_RGB>
	HAL_Delay(3000);
 8001cb6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001cba:	f001 f98b 	bl	8002fd4 <HAL_Delay>
	lcd_clear(lcd_dir);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fb79 	bl	80013b6 <lcd_clear>
	lcd_home(lcd_dir);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fb82 	bl	80013ce <lcd_home>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	0800ead4 	.word	0x0800ead4
 8001cd8:	0800eae8 	.word	0x0800eae8

08001cdc <ds1307_init>:

void ds1307_init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	rtc_init(0,1,0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff f9e9 	bl	80010bc <rtc_init>

	rtc_set_time(00,00,00);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff fa3c 	bl	800116c <rtc_set_time>
	rtc_set_date(1, 1, 1, 23);
 8001cf4:	2317      	movs	r3, #23
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7ff faa0 	bl	8001240 <rtc_set_date>
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <ssd1306_IniText>:

void ssd1306_IniText()
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	71fb      	strb	r3, [r7, #7]

    //ssd1306_Init();
    ssd1306_Fill(Black);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 fca4 	bl	800265c <ssd1306_Fill>

	#ifdef SSD1306_INCLUDE_FONT_11x18
	ssd1306_SetCursor(10, y);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4619      	mov	r1, r3
 8001d18:	200a      	movs	r0, #10
 8001d1a:	f000 fded 	bl	80028f8 <ssd1306_SetCursor>
	ssd1306_WriteString("Comando:", Font_6x8, White);
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <ssd1306_IniText+0x74>)
 8001d20:	2301      	movs	r3, #1
 8001d22:	ca06      	ldmia	r2, {r1, r2}
 8001d24:	4815      	ldr	r0, [pc, #84]	; (8001d7c <ssd1306_IniText+0x78>)
 8001d26:	f000 fdc1 	bl	80028ac <ssd1306_WriteString>
	//y += 19;
	//sprintf(mensaje, "%d", data);
	ssd1306_SetCursor(75, y);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	204b      	movs	r0, #75	; 0x4b
 8001d30:	f000 fde2 	bl	80028f8 <ssd1306_SetCursor>
	//ssd1306_WriteString(mensaje, Font_16x26, White);
	ssd1306_WriteString(buffer, Font_11x18, White);
 8001d34:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <ssd1306_IniText+0x7c>)
 8001d36:	2301      	movs	r3, #1
 8001d38:	ca06      	ldmia	r2, {r1, r2}
 8001d3a:	4812      	ldr	r0, [pc, #72]	; (8001d84 <ssd1306_IniText+0x80>)
 8001d3c:	f000 fdb6 	bl	80028ac <ssd1306_WriteString>
	y += 19;
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	3313      	adds	r3, #19
 8001d44:	71fb      	strb	r3, [r7, #7]
	ssd1306_SetCursor(10, y);
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	200a      	movs	r0, #10
 8001d4c:	f000 fdd4 	bl	80028f8 <ssd1306_SetCursor>
	sprintf(buff ,"%d", H_data);
 8001d50:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <ssd1306_IniText+0x84>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	490d      	ldr	r1, [pc, #52]	; (8001d8c <ssd1306_IniText+0x88>)
 8001d58:	480d      	ldr	r0, [pc, #52]	; (8001d90 <ssd1306_IniText+0x8c>)
 8001d5a:	f009 f88d 	bl	800ae78 <siprintf>
	ssd1306_WriteString(buff, Font_16x26, White);
 8001d5e:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <ssd1306_IniText+0x90>)
 8001d60:	2301      	movs	r3, #1
 8001d62:	ca06      	ldmia	r2, {r1, r2}
 8001d64:	480a      	ldr	r0, [pc, #40]	; (8001d90 <ssd1306_IniText+0x8c>)
 8001d66:	f000 fda1 	bl	80028ac <ssd1306_WriteString>
	#endif

    ssd1306_UpdateScreen();
 8001d6a:	f000 fc9b 	bl	80026a4 <ssd1306_UpdateScreen>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	0800eafc 	.word	0x0800eafc
 8001d80:	20000008 	.word	0x20000008
 8001d84:	200003c8 	.word	0x200003c8
 8001d88:	200003d8 	.word	0x200003d8
 8001d8c:	0800eb08 	.word	0x0800eb08
 8001d90:	200003d0 	.word	0x200003d0
 8001d94:	20000010 	.word	0x20000010

08001d98 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	int comand = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
		data += (buffer[1] - 48);
		osEventFlagsSet(myEvent01Handle, 0x00000001U);
	}else{
		__NOP();
	}*/
	if(buffer[1] == 58)
 8001da4:	4b6c      	ldr	r3, [pc, #432]	; (8001f58 <HAL_UART_RxCpltCallback+0x1c0>)
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	2b3a      	cmp	r3, #58	; 0x3a
 8001daa:	f040 80bc 	bne.w	8001f26 <HAL_UART_RxCpltCallback+0x18e>
	{
		if(buffer[2] >= 48 && buffer[2] <= 57) H_data = (buffer[2] - 48); //decimal
 8001dae:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_UART_RxCpltCallback+0x1c0>)
 8001db0:	789b      	ldrb	r3, [r3, #2]
 8001db2:	2b2f      	cmp	r3, #47	; 0x2f
 8001db4:	d909      	bls.n	8001dca <HAL_UART_RxCpltCallback+0x32>
 8001db6:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_UART_RxCpltCallback+0x1c0>)
 8001db8:	789b      	ldrb	r3, [r3, #2]
 8001dba:	2b39      	cmp	r3, #57	; 0x39
 8001dbc:	d805      	bhi.n	8001dca <HAL_UART_RxCpltCallback+0x32>
 8001dbe:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <HAL_UART_RxCpltCallback+0x1c0>)
 8001dc0:	789b      	ldrb	r3, [r3, #2]
 8001dc2:	3b30      	subs	r3, #48	; 0x30
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b65      	ldr	r3, [pc, #404]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001dc8:	701a      	strb	r2, [r3, #0]
		if(buffer[3] >= 48 && buffer[3] <= 57){H_data = (H_data * 10); H_data += (buffer[3] - 48);} //unidad
 8001dca:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <HAL_UART_RxCpltCallback+0x1c0>)
 8001dcc:	78db      	ldrb	r3, [r3, #3]
 8001dce:	2b2f      	cmp	r3, #47	; 0x2f
 8001dd0:	d916      	bls.n	8001e00 <HAL_UART_RxCpltCallback+0x68>
 8001dd2:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <HAL_UART_RxCpltCallback+0x1c0>)
 8001dd4:	78db      	ldrb	r3, [r3, #3]
 8001dd6:	2b39      	cmp	r3, #57	; 0x39
 8001dd8:	d812      	bhi.n	8001e00 <HAL_UART_RxCpltCallback+0x68>
 8001dda:	4b60      	ldr	r3, [pc, #384]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	4b5c      	ldr	r3, [pc, #368]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	4b5a      	ldr	r3, [pc, #360]	; (8001f58 <HAL_UART_RxCpltCallback+0x1c0>)
 8001dee:	78da      	ldrb	r2, [r3, #3]
 8001df0:	4b5a      	ldr	r3, [pc, #360]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3b30      	subs	r3, #48	; 0x30
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001dfe:	701a      	strb	r2, [r3, #0]

		comand = buffer[0];
 8001e00:	4b55      	ldr	r3, [pc, #340]	; (8001f58 <HAL_UART_RxCpltCallback+0x1c0>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
		switch(comand){
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3b48      	subs	r3, #72	; 0x48
 8001e0a:	2b31      	cmp	r3, #49	; 0x31
 8001e0c:	f200 808c 	bhi.w	8001f28 <HAL_UART_RxCpltCallback+0x190>
 8001e10:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <HAL_UART_RxCpltCallback+0x80>)
 8001e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e16:	bf00      	nop
 8001e18:	08001ee1 	.word	0x08001ee1
 8001e1c:	08001f29 	.word	0x08001f29
 8001e20:	08001f29 	.word	0x08001f29
 8001e24:	08001f29 	.word	0x08001f29
 8001e28:	08001f29 	.word	0x08001f29
 8001e2c:	08001eeb 	.word	0x08001eeb
 8001e30:	08001f29 	.word	0x08001f29
 8001e34:	08001f29 	.word	0x08001f29
 8001e38:	08001f29 	.word	0x08001f29
 8001e3c:	08001f29 	.word	0x08001f29
 8001e40:	08001f29 	.word	0x08001f29
 8001e44:	08001ef5 	.word	0x08001ef5
 8001e48:	08001f29 	.word	0x08001f29
 8001e4c:	08001f29 	.word	0x08001f29
 8001e50:	08001f29 	.word	0x08001f29
 8001e54:	08001f29 	.word	0x08001f29
 8001e58:	08001f29 	.word	0x08001f29
 8001e5c:	08001f29 	.word	0x08001f29
 8001e60:	08001f29 	.word	0x08001f29
 8001e64:	08001f29 	.word	0x08001f29
 8001e68:	08001f29 	.word	0x08001f29
 8001e6c:	08001f29 	.word	0x08001f29
 8001e70:	08001f29 	.word	0x08001f29
 8001e74:	08001f29 	.word	0x08001f29
 8001e78:	08001f29 	.word	0x08001f29
 8001e7c:	08001f29 	.word	0x08001f29
 8001e80:	08001f29 	.word	0x08001f29
 8001e84:	08001f29 	.word	0x08001f29
 8001e88:	08001eff 	.word	0x08001eff
 8001e8c:	08001f29 	.word	0x08001f29
 8001e90:	08001f29 	.word	0x08001f29
 8001e94:	08001f29 	.word	0x08001f29
 8001e98:	08001f29 	.word	0x08001f29
 8001e9c:	08001f29 	.word	0x08001f29
 8001ea0:	08001f29 	.word	0x08001f29
 8001ea4:	08001f29 	.word	0x08001f29
 8001ea8:	08001f29 	.word	0x08001f29
 8001eac:	08001f09 	.word	0x08001f09
 8001eb0:	08001f29 	.word	0x08001f29
 8001eb4:	08001f29 	.word	0x08001f29
 8001eb8:	08001f29 	.word	0x08001f29
 8001ebc:	08001f29 	.word	0x08001f29
 8001ec0:	08001f29 	.word	0x08001f29
 8001ec4:	08001f29 	.word	0x08001f29
 8001ec8:	08001f29 	.word	0x08001f29
 8001ecc:	08001f29 	.word	0x08001f29
 8001ed0:	08001f29 	.word	0x08001f29
 8001ed4:	08001f1d 	.word	0x08001f1d
 8001ed8:	08001f29 	.word	0x08001f29
 8001edc:	08001f13 	.word	0x08001f13
		case 72: //H-->hora
			set_hora[0] = H_data;
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_UART_RxCpltCallback+0x1c8>)
 8001ee6:	701a      	strb	r2, [r3, #0]
			break;
 8001ee8:	e01e      	b.n	8001f28 <HAL_UART_RxCpltCallback+0x190>
		case 77: //M-->min
			set_hora[1] = H_data;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_UART_RxCpltCallback+0x1c8>)
 8001ef0:	705a      	strb	r2, [r3, #1]
			break;
 8001ef2:	e019      	b.n	8001f28 <HAL_UART_RxCpltCallback+0x190>
		case 83: //S-->seg
			set_hora[2] = H_data;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_UART_RxCpltCallback+0x1c8>)
 8001efa:	709a      	strb	r2, [r3, #2]
			break;
 8001efc:	e014      	b.n	8001f28 <HAL_UART_RxCpltCallback+0x190>
		case 100: // d-->dia
			set_date[0] = H_data;
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_UART_RxCpltCallback+0x1cc>)
 8001f04:	701a      	strb	r2, [r3, #0]
			break;
 8001f06:	e00f      	b.n	8001f28 <HAL_UART_RxCpltCallback+0x190>
		case 109: // m-->mes
			set_date[1] = H_data;
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_UART_RxCpltCallback+0x1cc>)
 8001f0e:	705a      	strb	r2, [r3, #1]
			break;
 8001f10:	e00a      	b.n	8001f28 <HAL_UART_RxCpltCallback+0x190>
		case 121: // y-->year
			set_date[2] = H_data;
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_UART_RxCpltCallback+0x1cc>)
 8001f18:	709a      	strb	r2, [r3, #2]
			break;
 8001f1a:	e005      	b.n	8001f28 <HAL_UART_RxCpltCallback+0x190>
		case 119: // w-->week day
			set_date[3] = H_data;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c4>)
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_UART_RxCpltCallback+0x1cc>)
 8001f22:	70da      	strb	r2, [r3, #3]
			break;
 8001f24:	e000      	b.n	8001f28 <HAL_UART_RxCpltCallback+0x190>
		}
	}
 8001f26:	bf00      	nop

	if(1) rtc_set_time(set_hora[0], set_hora[1], set_hora[2]);
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_UART_RxCpltCallback+0x1c8>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <HAL_UART_RxCpltCallback+0x1c8>)
 8001f2e:	7851      	ldrb	r1, [r2, #1]
 8001f30:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_UART_RxCpltCallback+0x1c8>)
 8001f32:	7892      	ldrb	r2, [r2, #2]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f919 	bl	800116c <rtc_set_time>
	else rtc_set_date(set_date[3], set_date[0], set_date[1], set_date[2]);

	osEventFlagsSet(myEvent01Handle, 0x00000001U);
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_UART_RxCpltCallback+0x1d0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4618      	mov	r0, r3
 8001f42:	f004 fe53 	bl	8006bec <osEventFlagsSet>
	HAL_UART_Receive_IT(&huart2, buffer, 5);
 8001f46:	2205      	movs	r2, #5
 8001f48:	4903      	ldr	r1, [pc, #12]	; (8001f58 <HAL_UART_RxCpltCallback+0x1c0>)
 8001f4a:	4808      	ldr	r0, [pc, #32]	; (8001f6c <HAL_UART_RxCpltCallback+0x1d4>)
 8001f4c:	f003 fdc4 	bl	8005ad8 <HAL_UART_Receive_IT>
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200003c8 	.word	0x200003c8
 8001f5c:	200003d8 	.word	0x200003d8
 8001f60:	200003dc 	.word	0x200003dc
 8001f64:	200003e0 	.word	0x200003e0
 8001f68:	2000036c 	.word	0x2000036c
 8001f6c:	20000308 	.word	0x20000308

08001f70 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == GPIO_PIN_11) //Boton RGB
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f94:	f040 80c3 	bne.w	800211e <HAL_GPIO_EXTI_Callback+0x19a>
	{
		switch(osEventFlagsGet(rgbModeFlagHandle))
 8001f98:	4b7a      	ldr	r3, [pc, #488]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 fe9b 	bl	8006cd8 <osEventFlagsGet>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b80      	cmp	r3, #128	; 0x80
 8001fa6:	d052      	beq.n	800204e <HAL_GPIO_EXTI_Callback+0xca>
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	f200 80b9 	bhi.w	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d84a      	bhi.n	8002048 <HAL_GPIO_EXTI_Callback+0xc4>
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 80b4 	beq.w	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	2b1f      	cmp	r3, #31
 8001fbc:	f200 80b0 	bhi.w	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
 8001fc0:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <HAL_GPIO_EXTI_Callback+0x44>)
 8001fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc6:	bf00      	nop
 8001fc8:	08002069 	.word	0x08002069
 8001fcc:	08002083 	.word	0x08002083
 8001fd0:	08002121 	.word	0x08002121
 8001fd4:	0800209d 	.word	0x0800209d
 8001fd8:	08002121 	.word	0x08002121
 8001fdc:	08002121 	.word	0x08002121
 8001fe0:	08002121 	.word	0x08002121
 8001fe4:	080020b7 	.word	0x080020b7
 8001fe8:	08002121 	.word	0x08002121
 8001fec:	08002121 	.word	0x08002121
 8001ff0:	08002121 	.word	0x08002121
 8001ff4:	08002121 	.word	0x08002121
 8001ff8:	08002121 	.word	0x08002121
 8001ffc:	08002121 	.word	0x08002121
 8002000:	08002121 	.word	0x08002121
 8002004:	080020d1 	.word	0x080020d1
 8002008:	08002121 	.word	0x08002121
 800200c:	08002121 	.word	0x08002121
 8002010:	08002121 	.word	0x08002121
 8002014:	08002121 	.word	0x08002121
 8002018:	08002121 	.word	0x08002121
 800201c:	08002121 	.word	0x08002121
 8002020:	08002121 	.word	0x08002121
 8002024:	08002121 	.word	0x08002121
 8002028:	08002121 	.word	0x08002121
 800202c:	08002121 	.word	0x08002121
 8002030:	08002121 	.word	0x08002121
 8002034:	08002121 	.word	0x08002121
 8002038:	08002121 	.word	0x08002121
 800203c:	08002121 	.word	0x08002121
 8002040:	08002121 	.word	0x08002121
 8002044:	080020eb 	.word	0x080020eb
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d05b      	beq.n	8002104 <HAL_GPIO_EXTI_Callback+0x180>
 800204c:	e068      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
		{
			case 0x00000080U:
				osEventFlagsClear(rgbModeFlagHandle, 0x00000080U);
 800204e:	4b4d      	ldr	r3, [pc, #308]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	4618      	mov	r0, r3
 8002056:	f004 fe0d 	bl	8006c74 <osEventFlagsClear>
				osEventFlagsSet(rgbModeFlagHandle, 0x00000001U);
 800205a:	4b4a      	ldr	r3, [pc, #296]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2101      	movs	r1, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f004 fdc3 	bl	8006bec <osEventFlagsSet>
				break;
 8002066:	e05b      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
			case 0x00000001U:
				osEventFlagsClear(rgbModeFlagHandle, 0x00000001U);
 8002068:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f004 fe00 	bl	8006c74 <osEventFlagsClear>
				osEventFlagsSet(rgbModeFlagHandle, 0x00000002U);
 8002074:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2102      	movs	r1, #2
 800207a:	4618      	mov	r0, r3
 800207c:	f004 fdb6 	bl	8006bec <osEventFlagsSet>
				break;
 8002080:	e04e      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
			case 0x00000002U:
				osEventFlagsClear(rgbModeFlagHandle, 0x00000002U);
 8002082:	4b40      	ldr	r3, [pc, #256]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2102      	movs	r1, #2
 8002088:	4618      	mov	r0, r3
 800208a:	f004 fdf3 	bl	8006c74 <osEventFlagsClear>
				osEventFlagsSet(rgbModeFlagHandle, 0x00000004U);
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2104      	movs	r1, #4
 8002094:	4618      	mov	r0, r3
 8002096:	f004 fda9 	bl	8006bec <osEventFlagsSet>
				break;
 800209a:	e041      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
			case 0x00000004U:
				osEventFlagsClear(rgbModeFlagHandle, 0x00000004U);
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2104      	movs	r1, #4
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 fde6 	bl	8006c74 <osEventFlagsClear>
				osEventFlagsSet(rgbModeFlagHandle, 0x00000008U);
 80020a8:	4b36      	ldr	r3, [pc, #216]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2108      	movs	r1, #8
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 fd9c 	bl	8006bec <osEventFlagsSet>
				break;
 80020b4:	e034      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
			case 0x00000008U:
				osEventFlagsClear(rgbModeFlagHandle, 0x00000008U);
 80020b6:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2108      	movs	r1, #8
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 fdd9 	bl	8006c74 <osEventFlagsClear>
				osEventFlagsSet(rgbModeFlagHandle, 0x00000010U);
 80020c2:	4b30      	ldr	r3, [pc, #192]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2110      	movs	r1, #16
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 fd8f 	bl	8006bec <osEventFlagsSet>
				break;
 80020ce:	e027      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
			case 0x00000010U:
				osEventFlagsClear(rgbModeFlagHandle, 0x00000010U);
 80020d0:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2110      	movs	r1, #16
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 fdcc 	bl	8006c74 <osEventFlagsClear>
				osEventFlagsSet(rgbModeFlagHandle, 0x00000020U);
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2120      	movs	r1, #32
 80020e2:	4618      	mov	r0, r3
 80020e4:	f004 fd82 	bl	8006bec <osEventFlagsSet>
				break;
 80020e8:	e01a      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
			case 0x00000020U:
				osEventFlagsClear(rgbModeFlagHandle, 0x000000020U);
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2120      	movs	r1, #32
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 fdbf 	bl	8006c74 <osEventFlagsClear>
				osEventFlagsSet(rgbModeFlagHandle, 0x00000040U);
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2140      	movs	r1, #64	; 0x40
 80020fc:	4618      	mov	r0, r3
 80020fe:	f004 fd75 	bl	8006bec <osEventFlagsSet>
				break;
 8002102:	e00d      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
			case 0x00000040U:
				osEventFlagsClear(rgbModeFlagHandle, 0x00000040U);
 8002104:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2140      	movs	r1, #64	; 0x40
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fdb2 	bl	8006c74 <osEventFlagsClear>
				osEventFlagsSet(rgbModeFlagHandle, 0x00000080U);
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_GPIO_EXTI_Callback+0x200>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	4618      	mov	r0, r3
 8002118:	f004 fd68 	bl	8006bec <osEventFlagsSet>
				break;
 800211c:	e000      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x19c>
		}
	}
 800211e:	bf00      	nop
	if(GPIO_pin == GPIO_PIN_10) //Boton display
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002126:	d127      	bne.n	8002178 <HAL_GPIO_EXTI_Callback+0x1f4>
	{
		if((osEventFlagsGet(lcdDisplayFlagHandle))==0x00000001U)
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_GPIO_EXTI_Callback+0x204>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f004 fdd3 	bl	8006cd8 <osEventFlagsGet>
 8002132:	4603      	mov	r3, r0
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10f      	bne.n	8002158 <HAL_GPIO_EXTI_Callback+0x1d4>
		{
			lcd_noDisplay(&lcd);
 8002138:	4814      	ldr	r0, [pc, #80]	; (800218c <HAL_GPIO_EXTI_Callback+0x208>)
 800213a:	f7ff f957 	bl	80013ec <lcd_noDisplay>
			osEventFlagsClear(lcdDisplayFlagHandle, 0x00000001U);
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_GPIO_EXTI_Callback+0x204>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2101      	movs	r1, #1
 8002144:	4618      	mov	r0, r3
 8002146:	f004 fd95 	bl	8006c74 <osEventFlagsClear>
			osEventFlagsSet(lcdDisplayFlagHandle, 0x00000002U);
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_GPIO_EXTI_Callback+0x204>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2102      	movs	r1, #2
 8002150:	4618      	mov	r0, r3
 8002152:	f004 fd4b 	bl	8006bec <osEventFlagsSet>
			osEventFlagsClear(lcdDisplayFlagHandle, 0x00000002U);
			osEventFlagsSet(lcdDisplayFlagHandle, 0x00000001U);
		}
	}
	else __NOP();
}
 8002156:	e010      	b.n	800217a <HAL_GPIO_EXTI_Callback+0x1f6>
			lcd_display(&lcd);
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <HAL_GPIO_EXTI_Callback+0x208>)
 800215a:	f7ff f962 	bl	8001422 <lcd_display>
			osEventFlagsClear(lcdDisplayFlagHandle, 0x00000002U);
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_GPIO_EXTI_Callback+0x204>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2102      	movs	r1, #2
 8002164:	4618      	mov	r0, r3
 8002166:	f004 fd85 	bl	8006c74 <osEventFlagsClear>
			osEventFlagsSet(lcdDisplayFlagHandle, 0x00000001U);
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_GPIO_EXTI_Callback+0x204>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f004 fd3b 	bl	8006bec <osEventFlagsSet>
}
 8002176:	e000      	b.n	800217a <HAL_GPIO_EXTI_Callback+0x1f6>
	else __NOP();
 8002178:	bf00      	nop
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000368 	.word	0x20000368
 8002188:	20000364 	.word	0x20000364
 800218c:	20000370 	.word	0x20000370

08002190 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HAL_UART_Receive_IT(&huart2, buffer, 5);
 8002198:	2205      	movs	r2, #5
 800219a:	490d      	ldr	r1, [pc, #52]	; (80021d0 <StartDefaultTask+0x40>)
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <StartDefaultTask+0x44>)
 800219e:	f003 fc9b 	bl	8005ad8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
    osEventFlagsWait(myEvent01Handle, 0x00000002U, osFlagsNoClear, osWaitForever);
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <StartDefaultTask+0x48>)
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021aa:	2202      	movs	r2, #2
 80021ac:	2102      	movs	r1, #2
 80021ae:	f004 fdb4 	bl	8006d1a <osEventFlagsWait>
    HAL_UART_Transmit_IT(&huart2, "Y\n", 2);
 80021b2:	2202      	movs	r2, #2
 80021b4:	4909      	ldr	r1, [pc, #36]	; (80021dc <StartDefaultTask+0x4c>)
 80021b6:	4807      	ldr	r0, [pc, #28]	; (80021d4 <StartDefaultTask+0x44>)
 80021b8:	f003 fc49 	bl	8005a4e <HAL_UART_Transmit_IT>
    osEventFlagsClear(myEvent01Handle, 0x00000002U);
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <StartDefaultTask+0x48>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2102      	movs	r1, #2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f004 fd56 	bl	8006c74 <osEventFlagsClear>
    osDelay(10);
 80021c8:	200a      	movs	r0, #10
 80021ca:	f004 fcb5 	bl	8006b38 <osDelay>
    osEventFlagsWait(myEvent01Handle, 0x00000002U, osFlagsNoClear, osWaitForever);
 80021ce:	e7e8      	b.n	80021a2 <StartDefaultTask+0x12>
 80021d0:	200003c8 	.word	0x200003c8
 80021d4:	20000308 	.word	0x20000308
 80021d8:	2000036c 	.word	0x2000036c
 80021dc:	0800eb0c 	.word	0x0800eb0c

080021e0 <MostrarDatosLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MostrarDatosLCD */
void MostrarDatosLCD(void *argument)
{
 80021e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e2:	b08f      	sub	sp, #60	; 0x3c
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MostrarDatosLCD */
  float datoMostrar;
  char *dayName[] = {"LUN", "MAR", "MIE", "JUE", "VIE", "SAB", "DOM"};
 80021e8:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <MostrarDatosLCD+0xd8>)
 80021ea:	f107 0408 	add.w	r4, r7, #8
 80021ee:	461d      	mov	r5, r3
 80021f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(datosHandle, &datoMostrar, NULL, osWaitForever);
 80021fc:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <MostrarDatosLCD+0xdc>)
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002208:	2200      	movs	r2, #0
 800220a:	f004 febf 	bl	8006f8c <osMessageQueueGet>

	rtc_get_time(&hour, &min, &sec);
 800220e:	4a2c      	ldr	r2, [pc, #176]	; (80022c0 <MostrarDatosLCD+0xe0>)
 8002210:	492c      	ldr	r1, [pc, #176]	; (80022c4 <MostrarDatosLCD+0xe4>)
 8002212:	482d      	ldr	r0, [pc, #180]	; (80022c8 <MostrarDatosLCD+0xe8>)
 8002214:	f7fe ff76 	bl	8001104 <rtc_get_time>
	rtc_get_date(&week_day, &day, &month, &year);
 8002218:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <MostrarDatosLCD+0xec>)
 800221a:	4a2d      	ldr	r2, [pc, #180]	; (80022d0 <MostrarDatosLCD+0xf0>)
 800221c:	492d      	ldr	r1, [pc, #180]	; (80022d4 <MostrarDatosLCD+0xf4>)
 800221e:	482e      	ldr	r0, [pc, #184]	; (80022d8 <MostrarDatosLCD+0xf8>)
 8002220:	f7fe ffd4 	bl	80011cc <rtc_get_date>

	lcd_home(&lcd);
 8002224:	482d      	ldr	r0, [pc, #180]	; (80022dc <MostrarDatosLCD+0xfc>)
 8002226:	f7ff f8d2 	bl	80013ce <lcd_home>
	lcd_setCursor(&lcd, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	482b      	ldr	r0, [pc, #172]	; (80022dc <MostrarDatosLCD+0xfc>)
 8002230:	f7ff f912 	bl	8001458 <lcd_setCursor>
	sprintf(str,"%02d/%02d/%02d   %s", day, month, year, dayName[week_day-1]);
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <MostrarDatosLCD+0xf4>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <MostrarDatosLCD+0xf0>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <MostrarDatosLCD+0xec>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <MostrarDatosLCD+0xf8>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3b01      	subs	r3, #1
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	3328      	adds	r3, #40	; 0x28
 8002250:	443b      	add	r3, r7
 8002252:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	9200      	str	r2, [sp, #0]
 800225a:	4603      	mov	r3, r0
 800225c:	460a      	mov	r2, r1
 800225e:	4920      	ldr	r1, [pc, #128]	; (80022e0 <MostrarDatosLCD+0x100>)
 8002260:	4820      	ldr	r0, [pc, #128]	; (80022e4 <MostrarDatosLCD+0x104>)
 8002262:	f008 fe09 	bl	800ae78 <siprintf>
	lcd_print(&lcd, str);
 8002266:	491f      	ldr	r1, [pc, #124]	; (80022e4 <MostrarDatosLCD+0x104>)
 8002268:	481c      	ldr	r0, [pc, #112]	; (80022dc <MostrarDatosLCD+0xfc>)
 800226a:	f7ff f927 	bl	80014bc <lcd_print>
	lcd_setCursor(&lcd, 0, 1);
 800226e:	2201      	movs	r2, #1
 8002270:	2100      	movs	r1, #0
 8002272:	481a      	ldr	r0, [pc, #104]	; (80022dc <MostrarDatosLCD+0xfc>)
 8002274:	f7ff f8f0 	bl	8001458 <lcd_setCursor>
	sprintf(str,"%02d:%02d:%02d T=%2.1fC", hour, min, sec, datoMostrar);
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <MostrarDatosLCD+0xe8>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461d      	mov	r5, r3
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MostrarDatosLCD+0xe4>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461e      	mov	r6, r3
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <MostrarDatosLCD+0xe0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461c      	mov	r4, r3
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f963 	bl	8000558 <__aeabi_f2d>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800229a:	9400      	str	r4, [sp, #0]
 800229c:	4633      	mov	r3, r6
 800229e:	462a      	mov	r2, r5
 80022a0:	4911      	ldr	r1, [pc, #68]	; (80022e8 <MostrarDatosLCD+0x108>)
 80022a2:	4810      	ldr	r0, [pc, #64]	; (80022e4 <MostrarDatosLCD+0x104>)
 80022a4:	f008 fde8 	bl	800ae78 <siprintf>
	lcd_print(&lcd, str);
 80022a8:	490e      	ldr	r1, [pc, #56]	; (80022e4 <MostrarDatosLCD+0x104>)
 80022aa:	480c      	ldr	r0, [pc, #48]	; (80022dc <MostrarDatosLCD+0xfc>)
 80022ac:	f7ff f906 	bl	80014bc <lcd_print>

    osDelay(10);
 80022b0:	200a      	movs	r0, #10
 80022b2:	f004 fc41 	bl	8006b38 <osDelay>
	osMessageQueueGet(datosHandle, &datoMostrar, NULL, osWaitForever);
 80022b6:	e7a1      	b.n	80021fc <MostrarDatosLCD+0x1c>
 80022b8:	0800eb3c 	.word	0x0800eb3c
 80022bc:	20000360 	.word	0x20000360
 80022c0:	200003b0 	.word	0x200003b0
 80022c4:	200003b1 	.word	0x200003b1
 80022c8:	200003b2 	.word	0x200003b2
 80022cc:	200003b6 	.word	0x200003b6
 80022d0:	200003b5 	.word	0x200003b5
 80022d4:	200003b4 	.word	0x200003b4
 80022d8:	200003b3 	.word	0x200003b3
 80022dc:	20000370 	.word	0x20000370
 80022e0:	0800eb10 	.word	0x0800eb10
 80022e4:	200003b8 	.word	0x200003b8
 80022e8:	0800eb24 	.word	0x0800eb24
 80022ec:	00000000 	.word	0x00000000

080022f0 <Lectura>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Lectura */
void Lectura(void *argument)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc1);
 80022f8:	4825      	ldr	r0, [pc, #148]	; (8002390 <Lectura+0xa0>)
 80022fa:	f000 fed3 	bl	80030a4 <HAL_ADC_Start>
	status = HAL_ADC_PollForConversion(&hadc1, 1);
 80022fe:	2101      	movs	r1, #1
 8002300:	4823      	ldr	r0, [pc, #140]	; (8002390 <Lectura+0xa0>)
 8002302:	f000 ffb6 	bl	8003272 <HAL_ADC_PollForConversion>
 8002306:	4603      	mov	r3, r0
 8002308:	73bb      	strb	r3, [r7, #14]
	if(status==HAL_OK)
 800230a:	7bbb      	ldrb	r3, [r7, #14]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <Lectura+0x2a>
		temp = HAL_ADC_GetValue(&hadc1);
 8002310:	481f      	ldr	r0, [pc, #124]	; (8002390 <Lectura+0xa0>)
 8002312:	f001 f949 	bl	80035a8 <HAL_ADC_GetValue>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
	HAL_ADC_Stop(&hadc1);
 800231a:	481d      	ldr	r0, [pc, #116]	; (8002390 <Lectura+0xa0>)
 800231c:	f000 ff76 	bl	800320c <HAL_ADC_Stop>
	temp_celsius = (((0.001221)*temp)-0.5)/(0.01); //¿¿mal o quemado??
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f906 	bl	8000534 <__aeabi_i2d>
 8002328:	a315      	add	r3, pc, #84	; (adr r3, 8002380 <Lectura+0x90>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f96b 	bl	8000608 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <Lectura+0xa4>)
 8002340:	f7fd ffaa 	bl	8000298 <__aeabi_dsub>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	a30e      	add	r3, pc, #56	; (adr r3, 8002388 <Lectura+0x98>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe fa83 	bl	800085c <__aeabi_ddiv>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f7fe fc4b 	bl	8000bf8 <__aeabi_d2f>
 8002362:	4603      	mov	r3, r0
 8002364:	60bb      	str	r3, [r7, #8]

	osMessageQueuePut(datosHandle, &temp_celsius, osPriorityNormal, osWaitForever);
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <Lectura+0xa8>)
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	f107 0108 	add.w	r1, r7, #8
 800236e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002372:	2218      	movs	r2, #24
 8002374:	f004 fdaa 	bl	8006ecc <osMessageQueuePut>
    osDelay(10);
 8002378:	200a      	movs	r0, #10
 800237a:	f004 fbdd 	bl	8006b38 <osDelay>
	HAL_ADC_Start(&hadc1);
 800237e:	e7bb      	b.n	80022f8 <Lectura+0x8>
 8002380:	c460ed81 	.word	0xc460ed81
 8002384:	3f54013e 	.word	0x3f54013e
 8002388:	47ae147b 	.word	0x47ae147b
 800238c:	3f847ae1 	.word	0x3f847ae1
 8002390:	20000218 	.word	0x20000218
 8002394:	3fe00000 	.word	0x3fe00000
 8002398:	20000360 	.word	0x20000360

0800239c <SetRGB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SetRGB */
void SetRGB(void *argument)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SetRGB */
  /* Infinite loop */
  for(;;)
  {
	switch(osEventFlagsWait(rgbModeFlagHandle, 0xFF, osFlagsNoClear, osWaitForever))
 80023a4:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <SetRGB+0x128>)
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ac:	2202      	movs	r2, #2
 80023ae:	21ff      	movs	r1, #255	; 0xff
 80023b0:	f004 fcb3 	bl	8006d1a <osEventFlagsWait>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b80      	cmp	r3, #128	; 0x80
 80023b8:	d079      	beq.n	80024ae <SetRGB+0x112>
 80023ba:	2b80      	cmp	r3, #128	; 0x80
 80023bc:	d87d      	bhi.n	80024ba <SetRGB+0x11e>
 80023be:	2b20      	cmp	r3, #32
 80023c0:	d848      	bhi.n	8002454 <SetRGB+0xb8>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d079      	beq.n	80024ba <SetRGB+0x11e>
 80023c6:	3b01      	subs	r3, #1
 80023c8:	2b1f      	cmp	r3, #31
 80023ca:	d876      	bhi.n	80024ba <SetRGB+0x11e>
 80023cc:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <SetRGB+0x38>)
 80023ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d2:	bf00      	nop
 80023d4:	0800245b 	.word	0x0800245b
 80023d8:	08002467 	.word	0x08002467
 80023dc:	080024bb 	.word	0x080024bb
 80023e0:	08002473 	.word	0x08002473
 80023e4:	080024bb 	.word	0x080024bb
 80023e8:	080024bb 	.word	0x080024bb
 80023ec:	080024bb 	.word	0x080024bb
 80023f0:	0800247f 	.word	0x0800247f
 80023f4:	080024bb 	.word	0x080024bb
 80023f8:	080024bb 	.word	0x080024bb
 80023fc:	080024bb 	.word	0x080024bb
 8002400:	080024bb 	.word	0x080024bb
 8002404:	080024bb 	.word	0x080024bb
 8002408:	080024bb 	.word	0x080024bb
 800240c:	080024bb 	.word	0x080024bb
 8002410:	0800248b 	.word	0x0800248b
 8002414:	080024bb 	.word	0x080024bb
 8002418:	080024bb 	.word	0x080024bb
 800241c:	080024bb 	.word	0x080024bb
 8002420:	080024bb 	.word	0x080024bb
 8002424:	080024bb 	.word	0x080024bb
 8002428:	080024bb 	.word	0x080024bb
 800242c:	080024bb 	.word	0x080024bb
 8002430:	080024bb 	.word	0x080024bb
 8002434:	080024bb 	.word	0x080024bb
 8002438:	080024bb 	.word	0x080024bb
 800243c:	080024bb 	.word	0x080024bb
 8002440:	080024bb 	.word	0x080024bb
 8002444:	080024bb 	.word	0x080024bb
 8002448:	080024bb 	.word	0x080024bb
 800244c:	080024bb 	.word	0x080024bb
 8002450:	08002497 	.word	0x08002497
 8002454:	2b40      	cmp	r3, #64	; 0x40
 8002456:	d024      	beq.n	80024a2 <SetRGB+0x106>
 8002458:	e02f      	b.n	80024ba <SetRGB+0x11e>
	{
		case 0x0000001U:
			set_RGB(1,0,0); // R
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	2001      	movs	r0, #1
 8002460:	f7ff f91e 	bl	80016a0 <set_RGB>
		    break;
 8002464:	e029      	b.n	80024ba <SetRGB+0x11e>
		case 0x0000002U:
			set_RGB(0,1,0); // G
 8002466:	2200      	movs	r2, #0
 8002468:	2101      	movs	r1, #1
 800246a:	2000      	movs	r0, #0
 800246c:	f7ff f918 	bl	80016a0 <set_RGB>
			break;
 8002470:	e023      	b.n	80024ba <SetRGB+0x11e>
		case 0x00000004U:
			set_RGB(0,0,1); // B
 8002472:	2201      	movs	r2, #1
 8002474:	2100      	movs	r1, #0
 8002476:	2000      	movs	r0, #0
 8002478:	f7ff f912 	bl	80016a0 <set_RGB>
			break;
 800247c:	e01d      	b.n	80024ba <SetRGB+0x11e>
		case 0x00000008U:
			set_RGB(1,1,0); // R+G
 800247e:	2200      	movs	r2, #0
 8002480:	2101      	movs	r1, #1
 8002482:	2001      	movs	r0, #1
 8002484:	f7ff f90c 	bl	80016a0 <set_RGB>
			break;
 8002488:	e017      	b.n	80024ba <SetRGB+0x11e>
		case 0x00000010U:
			set_RGB(1,0,1); // R+B
 800248a:	2201      	movs	r2, #1
 800248c:	2100      	movs	r1, #0
 800248e:	2001      	movs	r0, #1
 8002490:	f7ff f906 	bl	80016a0 <set_RGB>
			break;
 8002494:	e011      	b.n	80024ba <SetRGB+0x11e>
		case 0x00000020U:
			set_RGB(0,1,1); // G+B
 8002496:	2201      	movs	r2, #1
 8002498:	2101      	movs	r1, #1
 800249a:	2000      	movs	r0, #0
 800249c:	f7ff f900 	bl	80016a0 <set_RGB>
			break;
 80024a0:	e00b      	b.n	80024ba <SetRGB+0x11e>
		case 0x00000040U:
			set_RGB(1,1,1); // R+G+B
 80024a2:	2201      	movs	r2, #1
 80024a4:	2101      	movs	r1, #1
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7ff f8fa 	bl	80016a0 <set_RGB>
			break;
 80024ac:	e005      	b.n	80024ba <SetRGB+0x11e>
		case 0x00000080U:
			set_RGB(0,0,0); // apagado
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7ff f8f4 	bl	80016a0 <set_RGB>
			break;
 80024b8:	bf00      	nop
	}
    osDelay(10);
 80024ba:	200a      	movs	r0, #10
 80024bc:	f004 fb3c 	bl	8006b38 <osDelay>
	switch(osEventFlagsWait(rgbModeFlagHandle, 0xFF, osFlagsNoClear, osWaitForever))
 80024c0:	e770      	b.n	80023a4 <SetRGB+0x8>
 80024c2:	bf00      	nop
 80024c4:	20000368 	.word	0x20000368

080024c8 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
	ssd1306_IniText();
 80024d0:	f7ff fc18 	bl	8001d04 <ssd1306_IniText>
  /* Infinite loop */
  for(;;)
  {
	osEventFlagsWait(myEvent01Handle, 0x00000001U, osFlagsNoClear, osWaitForever);
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <StartTask06+0x40>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024dc:	2202      	movs	r2, #2
 80024de:	2101      	movs	r1, #1
 80024e0:	f004 fc1b 	bl	8006d1a <osEventFlagsWait>
	ssd1306_IniText();
 80024e4:	f7ff fc0e 	bl	8001d04 <ssd1306_IniText>
	osEventFlagsSet(myEvent01Handle, 0x00000002U);
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <StartTask06+0x40>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2102      	movs	r1, #2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fb7c 	bl	8006bec <osEventFlagsSet>
	osEventFlagsClear(myEvent01Handle, 0x00000001U);
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <StartTask06+0x40>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2101      	movs	r1, #1
 80024fa:	4618      	mov	r0, r3
 80024fc:	f004 fbba 	bl	8006c74 <osEventFlagsClear>
    osDelay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f004 fb19 	bl	8006b38 <osDelay>
	osEventFlagsWait(myEvent01Handle, 0x00000001U, osFlagsNoClear, osWaitForever);
 8002506:	e7e5      	b.n	80024d4 <StartTask06+0xc>
 8002508:	2000036c 	.word	0x2000036c

0800250c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002510:	b672      	cpsid	i
}
 8002512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002514:	e7fe      	b.n	8002514 <Error_Handler+0x8>

08002516 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af04      	add	r7, sp, #16
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800252e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	2301      	movs	r3, #1
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2301      	movs	r3, #1
 800253e:	2200      	movs	r2, #0
 8002540:	2178      	movs	r1, #120	; 0x78
 8002542:	4803      	ldr	r0, [pc, #12]	; (8002550 <ssd1306_WriteCommand+0x2c>)
 8002544:	f001 ff22 	bl	800438c <HAL_I2C_Mem_Write>
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200002b4 	.word	0x200002b4

08002554 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af04      	add	r7, sp, #16
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002566:	9202      	str	r2, [sp, #8]
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2301      	movs	r3, #1
 8002570:	2240      	movs	r2, #64	; 0x40
 8002572:	2178      	movs	r1, #120	; 0x78
 8002574:	4803      	ldr	r0, [pc, #12]	; (8002584 <ssd1306_WriteData+0x30>)
 8002576:	f001 ff09 	bl	800438c <HAL_I2C_Mem_Write>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200002b4 	.word	0x200002b4

08002588 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800258c:	f7ff ffc3 	bl	8002516 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002590:	2064      	movs	r0, #100	; 0x64
 8002592:	f000 fd1f 	bl	8002fd4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002596:	2000      	movs	r0, #0
 8002598:	f000 f9da 	bl	8002950 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800259c:	2020      	movs	r0, #32
 800259e:	f7ff ffc1 	bl	8002524 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7ff ffbe 	bl	8002524 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80025a8:	20b0      	movs	r0, #176	; 0xb0
 80025aa:	f7ff ffbb 	bl	8002524 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80025ae:	20c8      	movs	r0, #200	; 0xc8
 80025b0:	f7ff ffb8 	bl	8002524 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff ffb5 	bl	8002524 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80025ba:	2010      	movs	r0, #16
 80025bc:	f7ff ffb2 	bl	8002524 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80025c0:	2040      	movs	r0, #64	; 0x40
 80025c2:	f7ff ffaf 	bl	8002524 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80025c6:	20ff      	movs	r0, #255	; 0xff
 80025c8:	f000 f9ae 	bl	8002928 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80025cc:	20a1      	movs	r0, #161	; 0xa1
 80025ce:	f7ff ffa9 	bl	8002524 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80025d2:	20a6      	movs	r0, #166	; 0xa6
 80025d4:	f7ff ffa6 	bl	8002524 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80025d8:	20a8      	movs	r0, #168	; 0xa8
 80025da:	f7ff ffa3 	bl	8002524 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80025de:	203f      	movs	r0, #63	; 0x3f
 80025e0:	f7ff ffa0 	bl	8002524 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80025e4:	20a4      	movs	r0, #164	; 0xa4
 80025e6:	f7ff ff9d 	bl	8002524 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80025ea:	20d3      	movs	r0, #211	; 0xd3
 80025ec:	f7ff ff9a 	bl	8002524 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7ff ff97 	bl	8002524 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80025f6:	20d5      	movs	r0, #213	; 0xd5
 80025f8:	f7ff ff94 	bl	8002524 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80025fc:	20f0      	movs	r0, #240	; 0xf0
 80025fe:	f7ff ff91 	bl	8002524 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002602:	20d9      	movs	r0, #217	; 0xd9
 8002604:	f7ff ff8e 	bl	8002524 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002608:	2022      	movs	r0, #34	; 0x22
 800260a:	f7ff ff8b 	bl	8002524 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800260e:	20da      	movs	r0, #218	; 0xda
 8002610:	f7ff ff88 	bl	8002524 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002614:	2012      	movs	r0, #18
 8002616:	f7ff ff85 	bl	8002524 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800261a:	20db      	movs	r0, #219	; 0xdb
 800261c:	f7ff ff82 	bl	8002524 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002620:	2020      	movs	r0, #32
 8002622:	f7ff ff7f 	bl	8002524 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002626:	208d      	movs	r0, #141	; 0x8d
 8002628:	f7ff ff7c 	bl	8002524 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800262c:	2014      	movs	r0, #20
 800262e:	f7ff ff79 	bl	8002524 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002632:	2001      	movs	r0, #1
 8002634:	f000 f98c 	bl	8002950 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002638:	2000      	movs	r0, #0
 800263a:	f000 f80f 	bl	800265c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800263e:	f000 f831 	bl	80026a4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <ssd1306_Init+0xd0>)
 8002644:	2200      	movs	r2, #0
 8002646:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <ssd1306_Init+0xd0>)
 800264a:	2200      	movs	r2, #0
 800264c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800264e:	4b02      	ldr	r3, [pc, #8]	; (8002658 <ssd1306_Init+0xd0>)
 8002650:	2201      	movs	r2, #1
 8002652:	711a      	strb	r2, [r3, #4]
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}
 8002658:	200007e4 	.word	0x200007e4

0800265c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e00d      	b.n	8002688 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <ssd1306_Fill+0x1a>
 8002672:	2100      	movs	r1, #0
 8002674:	e000      	b.n	8002678 <ssd1306_Fill+0x1c>
 8002676:	21ff      	movs	r1, #255	; 0xff
 8002678:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <ssd1306_Fill+0x44>)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4413      	add	r3, r2
 800267e:	460a      	mov	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3301      	adds	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268e:	d3ed      	bcc.n	800266c <ssd1306_Fill+0x10>
    }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	200003e4 	.word	0x200003e4

080026a4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026aa:	2300      	movs	r3, #0
 80026ac:	71fb      	strb	r3, [r7, #7]
 80026ae:	e016      	b.n	80026de <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	3b50      	subs	r3, #80	; 0x50
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff34 	bl	8002524 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff ff31 	bl	8002524 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80026c2:	2010      	movs	r0, #16
 80026c4:	f7ff ff2e 	bl	8002524 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	01db      	lsls	r3, r3, #7
 80026cc:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <ssd1306_UpdateScreen+0x4c>)
 80026ce:	4413      	add	r3, r2
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff3e 	bl	8002554 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	3301      	adds	r3, #1
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	2b07      	cmp	r3, #7
 80026e2:	d9e5      	bls.n	80026b0 <ssd1306_UpdateScreen+0xc>
    }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200003e4 	.word	0x200003e4

080026f4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
 80026fe:	460b      	mov	r3, r1
 8002700:	71bb      	strb	r3, [r7, #6]
 8002702:	4613      	mov	r3, r2
 8002704:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db3d      	blt.n	800278a <ssd1306_DrawPixel+0x96>
 800270e:	79bb      	ldrb	r3, [r7, #6]
 8002710:	2b3f      	cmp	r3, #63	; 0x3f
 8002712:	d83a      	bhi.n	800278a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8002714:	797b      	ldrb	r3, [r7, #5]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d11a      	bne.n	8002750 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800271a:	79fa      	ldrb	r2, [r7, #7]
 800271c:	79bb      	ldrb	r3, [r7, #6]
 800271e:	08db      	lsrs	r3, r3, #3
 8002720:	b2d8      	uxtb	r0, r3
 8002722:	4603      	mov	r3, r0
 8002724:	01db      	lsls	r3, r3, #7
 8002726:	4413      	add	r3, r2
 8002728:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <ssd1306_DrawPixel+0xa4>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	b25a      	sxtb	r2, r3
 800272e:	79bb      	ldrb	r3, [r7, #6]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	b25b      	sxtb	r3, r3
 800273c:	4313      	orrs	r3, r2
 800273e:	b259      	sxtb	r1, r3
 8002740:	79fa      	ldrb	r2, [r7, #7]
 8002742:	4603      	mov	r3, r0
 8002744:	01db      	lsls	r3, r3, #7
 8002746:	4413      	add	r3, r2
 8002748:	b2c9      	uxtb	r1, r1
 800274a:	4a13      	ldr	r2, [pc, #76]	; (8002798 <ssd1306_DrawPixel+0xa4>)
 800274c:	54d1      	strb	r1, [r2, r3]
 800274e:	e01d      	b.n	800278c <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002750:	79fa      	ldrb	r2, [r7, #7]
 8002752:	79bb      	ldrb	r3, [r7, #6]
 8002754:	08db      	lsrs	r3, r3, #3
 8002756:	b2d8      	uxtb	r0, r3
 8002758:	4603      	mov	r3, r0
 800275a:	01db      	lsls	r3, r3, #7
 800275c:	4413      	add	r3, r2
 800275e:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <ssd1306_DrawPixel+0xa4>)
 8002760:	5cd3      	ldrb	r3, [r2, r3]
 8002762:	b25a      	sxtb	r2, r3
 8002764:	79bb      	ldrb	r3, [r7, #6]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	b25b      	sxtb	r3, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	b25b      	sxtb	r3, r3
 8002776:	4013      	ands	r3, r2
 8002778:	b259      	sxtb	r1, r3
 800277a:	79fa      	ldrb	r2, [r7, #7]
 800277c:	4603      	mov	r3, r0
 800277e:	01db      	lsls	r3, r3, #7
 8002780:	4413      	add	r3, r2
 8002782:	b2c9      	uxtb	r1, r1
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <ssd1306_DrawPixel+0xa4>)
 8002786:	54d1      	strb	r1, [r2, r3]
 8002788:	e000      	b.n	800278c <ssd1306_DrawPixel+0x98>
        return;
 800278a:	bf00      	nop
    }
}
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	200003e4 	.word	0x200003e4

0800279c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4604      	mov	r4, r0
 80027a4:	1d38      	adds	r0, r7, #4
 80027a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80027aa:	461a      	mov	r2, r3
 80027ac:	4623      	mov	r3, r4
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	4613      	mov	r3, r2
 80027b2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b1f      	cmp	r3, #31
 80027b8:	d902      	bls.n	80027c0 <ssd1306_WriteChar+0x24>
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b7e      	cmp	r3, #126	; 0x7e
 80027be:	d901      	bls.n	80027c4 <ssd1306_WriteChar+0x28>
        return 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e06d      	b.n	80028a0 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80027c4:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <ssd1306_WriteChar+0x10c>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	793b      	ldrb	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	2b80      	cmp	r3, #128	; 0x80
 80027d0:	dc06      	bgt.n	80027e0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <ssd1306_WriteChar+0x10c>)
 80027d4:	885b      	ldrh	r3, [r3, #2]
 80027d6:	461a      	mov	r2, r3
 80027d8:	797b      	ldrb	r3, [r7, #5]
 80027da:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	dd01      	ble.n	80027e4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e05d      	b.n	80028a0 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	e04c      	b.n	8002884 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	3b20      	subs	r3, #32
 80027f0:	7979      	ldrb	r1, [r7, #5]
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4619      	mov	r1, r3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	440b      	add	r3, r1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	e034      	b.n	8002874 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d012      	beq.n	8002840 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <ssd1306_WriteChar+0x10c>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	4413      	add	r3, r2
 8002826:	b2d8      	uxtb	r0, r3
 8002828:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <ssd1306_WriteChar+0x10c>)
 800282a:	885b      	ldrh	r3, [r3, #2]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	4413      	add	r3, r2
 8002834:	b2db      	uxtb	r3, r3
 8002836:	7bba      	ldrb	r2, [r7, #14]
 8002838:	4619      	mov	r1, r3
 800283a:	f7ff ff5b 	bl	80026f4 <ssd1306_DrawPixel>
 800283e:	e016      	b.n	800286e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <ssd1306_WriteChar+0x10c>)
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	4413      	add	r3, r2
 800284c:	b2d8      	uxtb	r0, r3
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <ssd1306_WriteChar+0x10c>)
 8002850:	885b      	ldrh	r3, [r3, #2]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4413      	add	r3, r2
 800285a:	b2d9      	uxtb	r1, r3
 800285c:	7bbb      	ldrb	r3, [r7, #14]
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	f7ff ff43 	bl	80026f4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	3301      	adds	r3, #1
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	793b      	ldrb	r3, [r7, #4]
 8002876:	461a      	mov	r2, r3
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4293      	cmp	r3, r2
 800287c:	d3c5      	bcc.n	800280a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3301      	adds	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	797b      	ldrb	r3, [r7, #5]
 8002886:	461a      	mov	r2, r3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	4293      	cmp	r3, r2
 800288c:	d3ad      	bcc.n	80027ea <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <ssd1306_WriteChar+0x10c>)
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	793b      	ldrb	r3, [r7, #4]
 8002894:	b29b      	uxth	r3, r3
 8002896:	4413      	add	r3, r2
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <ssd1306_WriteChar+0x10c>)
 800289c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3724      	adds	r7, #36	; 0x24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd90      	pop	{r4, r7, pc}
 80028a8:	200007e4 	.word	0x200007e4

080028ac <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	1d38      	adds	r0, r7, #4
 80028b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80028ba:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80028bc:	e012      	b.n	80028e4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	7818      	ldrb	r0, [r3, #0]
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	1d3a      	adds	r2, r7, #4
 80028c6:	ca06      	ldmia	r2, {r1, r2}
 80028c8:	f7ff ff68 	bl	800279c <ssd1306_WriteChar>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d002      	beq.n	80028de <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	e008      	b.n	80028f0 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3301      	adds	r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e8      	bne.n	80028be <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	781b      	ldrb	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	460a      	mov	r2, r1
 8002902:	71fb      	strb	r3, [r7, #7]
 8002904:	4613      	mov	r3, r2
 8002906:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	b29a      	uxth	r2, r3
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <ssd1306_SetCursor+0x2c>)
 800290e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002910:	79bb      	ldrb	r3, [r7, #6]
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <ssd1306_SetCursor+0x2c>)
 8002916:	805a      	strh	r2, [r3, #2]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	200007e4 	.word	0x200007e4

08002928 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002932:	2381      	movs	r3, #129	; 0x81
 8002934:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fdf3 	bl	8002524 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fdef 	bl	8002524 <ssd1306_WriteCommand>
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002960:	23af      	movs	r3, #175	; 0xaf
 8002962:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <ssd1306_SetDisplayOn+0x38>)
 8002966:	2201      	movs	r2, #1
 8002968:	715a      	strb	r2, [r3, #5]
 800296a:	e004      	b.n	8002976 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800296c:	23ae      	movs	r3, #174	; 0xae
 800296e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <ssd1306_SetDisplayOn+0x38>)
 8002972:	2200      	movs	r2, #0
 8002974:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fdd3 	bl	8002524 <ssd1306_WriteCommand>
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200007e4 	.word	0x200007e4

0800298c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_MspInit+0x54>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <HAL_MspInit+0x54>)
 800299c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_MspInit+0x54>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_MspInit+0x54>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_MspInit+0x54>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_MspInit+0x54>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	210f      	movs	r1, #15
 80029ce:	f06f 0001 	mvn.w	r0, #1
 80029d2:	f001 f918 	bl	8003c06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800

080029e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <HAL_ADC_MspInit+0x8c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d12f      	bne.n	8002a66 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_ADC_MspInit+0x90>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <HAL_ADC_MspInit+0x90>)
 8002a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a14:	6453      	str	r3, [r2, #68]	; 0x44
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <HAL_ADC_MspInit+0x90>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_ADC_MspInit+0x90>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_ADC_MspInit+0x90>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_ADC_MspInit+0x90>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a42:	2303      	movs	r3, #3
 8002a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4809      	ldr	r0, [pc, #36]	; (8002a78 <HAL_ADC_MspInit+0x94>)
 8002a52:	f001 f9a1 	bl	8003d98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2105      	movs	r1, #5
 8002a5a:	2012      	movs	r0, #18
 8002a5c:	f001 f8d3 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a60:	2012      	movs	r0, #18
 8002a62:	f001 f8ec 	bl	8003c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a66:	bf00      	nop
 8002a68:	3728      	adds	r7, #40	; 0x28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40012000 	.word	0x40012000
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000

08002a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	; 0x30
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a42      	ldr	r2, [pc, #264]	; (8002ba4 <HAL_I2C_MspInit+0x128>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d12c      	bne.n	8002af8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a40      	ldr	r2, [pc, #256]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aba:	23c0      	movs	r3, #192	; 0xc0
 8002abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002abe:	2312      	movs	r3, #18
 8002ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aca:	2304      	movs	r3, #4
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 031c 	add.w	r3, r7, #28
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4835      	ldr	r0, [pc, #212]	; (8002bac <HAL_I2C_MspInit+0x130>)
 8002ad6:	f001 f95f 	bl	8003d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	4b32      	ldr	r3, [pc, #200]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a31      	ldr	r2, [pc, #196]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002ae4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002af6:	e050      	b.n	8002b9a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <HAL_I2C_MspInit+0x134>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d14b      	bne.n	8002b9a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b40:	2312      	movs	r3, #18
 8002b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	4619      	mov	r1, r3
 8002b56:	4817      	ldr	r0, [pc, #92]	; (8002bb4 <HAL_I2C_MspInit+0x138>)
 8002b58:	f001 f91e 	bl	8003d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b62:	2312      	movs	r3, #18
 8002b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b6e:	2304      	movs	r3, #4
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	f107 031c 	add.w	r3, r7, #28
 8002b76:	4619      	mov	r1, r3
 8002b78:	480f      	ldr	r0, [pc, #60]	; (8002bb8 <HAL_I2C_MspInit+0x13c>)
 8002b7a:	f001 f90d 	bl	8003d98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002b88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_I2C_MspInit+0x12c>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
}
 8002b9a:	bf00      	nop
 8002b9c:	3730      	adds	r7, #48	; 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40005400 	.word	0x40005400
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40005c00 	.word	0x40005c00
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020000 	.word	0x40020000

08002bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <HAL_UART_MspInit+0x94>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d133      	bne.n	8002c46 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <HAL_UART_MspInit+0x98>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <HAL_UART_MspInit+0x98>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_UART_MspInit+0x98>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_UART_MspInit+0x98>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <HAL_UART_MspInit+0x98>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_UART_MspInit+0x98>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c16:	230c      	movs	r3, #12
 8002c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c26:	2307      	movs	r3, #7
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4809      	ldr	r0, [pc, #36]	; (8002c58 <HAL_UART_MspInit+0x9c>)
 8002c32:	f001 f8b1 	bl	8003d98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2105      	movs	r1, #5
 8002c3a:	2026      	movs	r0, #38	; 0x26
 8002c3c:	f000 ffe3 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c40:	2026      	movs	r0, #38	; 0x26
 8002c42:	f000 fffc 	bl	8003c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c46:	bf00      	nop
 8002c48:	3728      	adds	r7, #40	; 0x28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40004400 	.word	0x40004400
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40020000 	.word	0x40020000

08002c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <NMI_Handler+0x4>

08002c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c66:	e7fe      	b.n	8002c66 <HardFault_Handler+0x4>

08002c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <MemManage_Handler+0x4>

08002c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <BusFault_Handler+0x4>

08002c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <UsageFault_Handler+0x4>

08002c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c8c:	f000 f982 	bl	8002f94 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002c90:	f006 fdcc 	bl	800982c <xTaskGetSchedulerState>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d001      	beq.n	8002c9e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002c9a:	f005 f8d5 	bl	8007e48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <ADC_IRQHandler+0x10>)
 8002caa:	f000 fb6d 	bl	8003388 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000218 	.word	0x20000218

08002cb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <USART2_IRQHandler+0x10>)
 8002cbe:	f002 ff3b 	bl	8005b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000308 	.word	0x20000308

08002ccc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BotonDisplay_Pin);
 8002cd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002cd4:	f001 f9fe 	bl	80040d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BotonRGB_Pin);
 8002cd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002cdc:	f001 f9fa 	bl	80040d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ce0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ce4:	f001 f9f6 	bl	80040d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
	return 1;
 8002cf0:	2301      	movs	r3, #1
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_kill>:

int _kill(int pid, int sig)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d06:	f007 f9f7 	bl	800a0f8 <__errno>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2216      	movs	r2, #22
 8002d0e:	601a      	str	r2, [r3, #0]
	return -1;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_exit>:

void _exit (int status)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ffe7 	bl	8002cfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d2e:	e7fe      	b.n	8002d2e <_exit+0x12>

08002d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	e00a      	b.n	8002d58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d42:	f3af 8000 	nop.w
 8002d46:	4601      	mov	r1, r0
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	60ba      	str	r2, [r7, #8]
 8002d4e:	b2ca      	uxtb	r2, r1
 8002d50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	3301      	adds	r3, #1
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	dbf0      	blt.n	8002d42 <_read+0x12>
	}

return len;
 8002d60:	687b      	ldr	r3, [r7, #4]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	e009      	b.n	8002d90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	60ba      	str	r2, [r7, #8]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	dbf1      	blt.n	8002d7c <_write+0x12>
	}
	return len;
 8002d98:	687b      	ldr	r3, [r7, #4]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <_close>:

int _close(int file)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
	return -1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dca:	605a      	str	r2, [r3, #4]
	return 0;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <_isatty>:

int _isatty(int file)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
	return 1;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
	return 0;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e14:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <_sbrk+0x5c>)
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <_sbrk+0x60>)
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e20:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <_sbrk+0x64>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <_sbrk+0x64>)
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <_sbrk+0x68>)
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <_sbrk+0x64>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d207      	bcs.n	8002e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e3c:	f007 f95c 	bl	800a0f8 <__errno>
 8002e40:	4603      	mov	r3, r0
 8002e42:	220c      	movs	r2, #12
 8002e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e4a:	e009      	b.n	8002e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <_sbrk+0x64>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <_sbrk+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	4a05      	ldr	r2, [pc, #20]	; (8002e70 <_sbrk+0x64>)
 8002e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20018000 	.word	0x20018000
 8002e6c:	00000400 	.word	0x00000400
 8002e70:	200007ec 	.word	0x200007ec
 8002e74:	20005158 	.word	0x20005158

08002e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <SystemInit+0x20>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <SystemInit+0x20>)
 8002e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ea0:	480d      	ldr	r0, [pc, #52]	; (8002ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ea2:	490e      	ldr	r1, [pc, #56]	; (8002edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ea4:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea8:	e002      	b.n	8002eb0 <LoopCopyDataInit>

08002eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eae:	3304      	adds	r3, #4

08002eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb4:	d3f9      	bcc.n	8002eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002eb8:	4c0b      	ldr	r4, [pc, #44]	; (8002ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ebc:	e001      	b.n	8002ec2 <LoopFillZerobss>

08002ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec0:	3204      	adds	r2, #4

08002ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec4:	d3fb      	bcc.n	8002ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ec6:	f7ff ffd7 	bl	8002e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eca:	f007 f91b 	bl	800a104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ece:	f7fe fc0d 	bl	80016ec <main>
  bx  lr    
 8002ed2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ed4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002edc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002ee0:	080117d4 	.word	0x080117d4
  ldr r2, =_sbss
 8002ee4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002ee8:	20005154 	.word	0x20005154

08002eec <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eec:	e7fe      	b.n	8002eec <DMA1_Stream0_IRQHandler>
	...

08002ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <HAL_Init+0x40>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0d      	ldr	r2, [pc, #52]	; (8002f30 <HAL_Init+0x40>)
 8002efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_Init+0x40>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_Init+0x40>)
 8002f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f0c:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <HAL_Init+0x40>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <HAL_Init+0x40>)
 8002f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f18:	2003      	movs	r0, #3
 8002f1a:	f000 fe69 	bl	8003bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f1e:	200f      	movs	r0, #15
 8002f20:	f000 f808 	bl	8002f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f24:	f7ff fd32 	bl	800298c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023c00 	.word	0x40023c00

08002f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_InitTick+0x54>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_InitTick+0x58>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fe81 	bl	8003c5a <HAL_SYSTICK_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00e      	b.n	8002f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d80a      	bhi.n	8002f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f70:	f000 fe49 	bl	8003c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f74:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <HAL_InitTick+0x5c>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000018 	.word	0x20000018
 8002f8c:	20000020 	.word	0x20000020
 8002f90:	2000001c 	.word	0x2000001c

08002f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_IncTick+0x20>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_IncTick+0x24>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <HAL_IncTick+0x24>)
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000020 	.word	0x20000020
 8002fb8:	200007f0 	.word	0x200007f0

08002fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_GetTick+0x14>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	200007f0 	.word	0x200007f0

08002fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff ffee 	bl	8002fbc <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fec:	d005      	beq.n	8002ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_Delay+0x44>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ffa:	bf00      	nop
 8002ffc:	f7ff ffde 	bl	8002fbc <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	429a      	cmp	r2, r3
 800300a:	d8f7      	bhi.n	8002ffc <HAL_Delay+0x28>
  {
  }
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000020 	.word	0x20000020

0800301c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e033      	b.n	800309a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fcd2 	bl	80029e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b00      	cmp	r3, #0
 8003058:	d118      	bne.n	800308c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003062:	f023 0302 	bic.w	r3, r3, #2
 8003066:	f043 0202 	orr.w	r2, r3, #2
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fbe8 	bl	8003844 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f023 0303 	bic.w	r3, r3, #3
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
 800308a:	e001      	b.n	8003090 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003098:	7bfb      	ldrb	r3, [r7, #15]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_ADC_Start+0x1a>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e097      	b.n	80031ee <HAL_ADC_Start+0x14a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d018      	beq.n	8003106 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030e4:	4b45      	ldr	r3, [pc, #276]	; (80031fc <HAL_ADC_Start+0x158>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a45      	ldr	r2, [pc, #276]	; (8003200 <HAL_ADC_Start+0x15c>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0c9a      	lsrs	r2, r3, #18
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80030f8:	e002      	b.n	8003100 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f9      	bne.n	80030fa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d15f      	bne.n	80031d4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800313e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003152:	d106      	bne.n	8003162 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	f023 0206 	bic.w	r2, r3, #6
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	645a      	str	r2, [r3, #68]	; 0x44
 8003160:	e002      	b.n	8003168 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_ADC_Start+0x160>)
 8003172:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800317c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d129      	bne.n	80031ec <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	e020      	b.n	80031ec <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a16      	ldr	r2, [pc, #88]	; (8003208 <HAL_ADC_Start+0x164>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d11b      	bne.n	80031ec <HAL_ADC_Start+0x148>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d114      	bne.n	80031ec <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	e00b      	b.n	80031ec <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f043 0210 	orr.w	r2, r3, #16
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000018 	.word	0x20000018
 8003200:	431bde83 	.word	0x431bde83
 8003204:	40012300 	.word	0x40012300
 8003208:	40012000 	.word	0x40012000

0800320c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_ADC_Stop+0x16>
 800321e:	2302      	movs	r3, #2
 8003220:	e021      	b.n	8003266 <HAL_ADC_Stop+0x5a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328e:	d113      	bne.n	80032b8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800329a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329e:	d10b      	bne.n	80032b8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e063      	b.n	8003380 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80032b8:	f7ff fe80 	bl	8002fbc <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032be:	e021      	b.n	8003304 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c6:	d01d      	beq.n	8003304 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <HAL_ADC_PollForConversion+0x6c>
 80032ce:	f7ff fe75 	bl	8002fbc <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d212      	bcs.n	8003304 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d00b      	beq.n	8003304 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0204 	orr.w	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e03d      	b.n	8003380 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d1d6      	bne.n	80032c0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f06f 0212 	mvn.w	r2, #18
 800331a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d123      	bne.n	800337e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11f      	bne.n	800337e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003348:	2b00      	cmp	r3, #0
 800334a:	d006      	beq.n	800335a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003356:	2b00      	cmp	r3, #0
 8003358:	d111      	bne.n	800337e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	2300      	movs	r3, #0
 8003396:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d049      	beq.n	8003452 <HAL_ADC_IRQHandler+0xca>
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d046      	beq.n	8003452 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d12b      	bne.n	8003442 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d127      	bne.n	8003442 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800340a:	2b00      	cmp	r3, #0
 800340c:	d119      	bne.n	8003442 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0220 	bic.w	r2, r2, #32
 800341c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f8bd 	bl	80035c2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0212 	mvn.w	r2, #18
 8003450:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d057      	beq.n	8003518 <HAL_ADC_IRQHandler+0x190>
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d054      	beq.n	8003518 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d139      	bne.n	8003508 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d12b      	bne.n	8003508 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d124      	bne.n	8003508 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d11d      	bne.n	8003508 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d119      	bne.n	8003508 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0201 	orr.w	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fa97 	bl	8003a3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f06f 020c 	mvn.w	r2, #12
 8003516:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d017      	beq.n	800355e <HAL_ADC_IRQHandler+0x1d6>
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d014      	beq.n	800355e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10d      	bne.n	800355e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f841 	bl	80035d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0201 	mvn.w	r2, #1
 800355c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800356c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d015      	beq.n	80035a0 <HAL_ADC_IRQHandler+0x218>
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d012      	beq.n	80035a0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f043 0202 	orr.w	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f06f 0220 	mvn.w	r2, #32
 800358e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f82a 	bl	80035ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f06f 0220 	mvn.w	r2, #32
 800359e:	601a      	str	r2, [r3, #0]
  }
}
 80035a0:	bf00      	nop
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_ADC_ConfigChannel+0x1c>
 8003618:	2302      	movs	r3, #2
 800361a:	e105      	b.n	8003828 <HAL_ADC_ConfigChannel+0x228>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b09      	cmp	r3, #9
 800362a:	d925      	bls.n	8003678 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68d9      	ldr	r1, [r3, #12]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	3b1e      	subs	r3, #30
 8003642:	2207      	movs	r2, #7
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43da      	mvns	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	400a      	ands	r2, r1
 8003650:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68d9      	ldr	r1, [r3, #12]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	4618      	mov	r0, r3
 8003664:	4603      	mov	r3, r0
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4403      	add	r3, r0
 800366a:	3b1e      	subs	r3, #30
 800366c:	409a      	lsls	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	e022      	b.n	80036be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6919      	ldr	r1, [r3, #16]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	2207      	movs	r2, #7
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43da      	mvns	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	400a      	ands	r2, r1
 800369a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6919      	ldr	r1, [r3, #16]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	4618      	mov	r0, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4403      	add	r3, r0
 80036b4:	409a      	lsls	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d824      	bhi.n	8003710 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	3b05      	subs	r3, #5
 80036d8:	221f      	movs	r2, #31
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43da      	mvns	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	400a      	ands	r2, r1
 80036e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	4618      	mov	r0, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	3b05      	subs	r3, #5
 8003702:	fa00 f203 	lsl.w	r2, r0, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	635a      	str	r2, [r3, #52]	; 0x34
 800370e:	e04c      	b.n	80037aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b0c      	cmp	r3, #12
 8003716:	d824      	bhi.n	8003762 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	3b23      	subs	r3, #35	; 0x23
 800372a:	221f      	movs	r2, #31
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43da      	mvns	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	400a      	ands	r2, r1
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	4618      	mov	r0, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	3b23      	subs	r3, #35	; 0x23
 8003754:	fa00 f203 	lsl.w	r2, r0, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
 8003760:	e023      	b.n	80037aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	3b41      	subs	r3, #65	; 0x41
 8003774:	221f      	movs	r2, #31
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43da      	mvns	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	400a      	ands	r2, r1
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	3b41      	subs	r3, #65	; 0x41
 800379e:	fa00 f203 	lsl.w	r2, r0, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037aa:	4b22      	ldr	r3, [pc, #136]	; (8003834 <HAL_ADC_ConfigChannel+0x234>)
 80037ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a21      	ldr	r2, [pc, #132]	; (8003838 <HAL_ADC_ConfigChannel+0x238>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d109      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x1cc>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b12      	cmp	r3, #18
 80037be:	d105      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a19      	ldr	r2, [pc, #100]	; (8003838 <HAL_ADC_ConfigChannel+0x238>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d123      	bne.n	800381e <HAL_ADC_ConfigChannel+0x21e>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d003      	beq.n	80037e6 <HAL_ADC_ConfigChannel+0x1e6>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b11      	cmp	r3, #17
 80037e4:	d11b      	bne.n	800381e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b10      	cmp	r3, #16
 80037f8:	d111      	bne.n	800381e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_ADC_ConfigChannel+0x23c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a10      	ldr	r2, [pc, #64]	; (8003840 <HAL_ADC_ConfigChannel+0x240>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	0c9a      	lsrs	r2, r3, #18
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003810:	e002      	b.n	8003818 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3b01      	subs	r3, #1
 8003816:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f9      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40012300 	.word	0x40012300
 8003838:	40012000 	.word	0x40012000
 800383c:	20000018 	.word	0x20000018
 8003840:	431bde83 	.word	0x431bde83

08003844 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800384c:	4b79      	ldr	r3, [pc, #484]	; (8003a34 <ADC_Init+0x1f0>)
 800384e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	021a      	lsls	r2, r3, #8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800389c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6899      	ldr	r1, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <ADC_Init+0x1f4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6899      	ldr	r1, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800390c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	e00f      	b.n	8003942 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003940:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0202 	bic.w	r2, r2, #2
 8003950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7e1b      	ldrb	r3, [r3, #24]
 800395c:	005a      	lsls	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800397e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800398e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	3b01      	subs	r3, #1
 800399c:	035a      	lsls	r2, r3, #13
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	e007      	b.n	80039b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	051a      	lsls	r2, r3, #20
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039fa:	025a      	lsls	r2, r3, #9
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6899      	ldr	r1, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	029a      	lsls	r2, r3, #10
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40012300 	.word	0x40012300
 8003a38:	0f000001 	.word	0x0f000001

08003a3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a82:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	60d3      	str	r3, [r2, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	f003 0307 	and.w	r3, r3, #7
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	db0b      	blt.n	8003ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	4907      	ldr	r1, [pc, #28]	; (8003aec <__NVIC_EnableIRQ+0x38>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8003ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000e100 	.word	0xe000e100

08003af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	db0a      	blt.n	8003b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	490c      	ldr	r1, [pc, #48]	; (8003b3c <__NVIC_SetPriority+0x4c>)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	0112      	lsls	r2, r2, #4
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	440b      	add	r3, r1
 8003b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b18:	e00a      	b.n	8003b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4908      	ldr	r1, [pc, #32]	; (8003b40 <__NVIC_SetPriority+0x50>)
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	3b04      	subs	r3, #4
 8003b28:	0112      	lsls	r2, r2, #4
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	761a      	strb	r2, [r3, #24]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000e100 	.word	0xe000e100
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b089      	sub	sp, #36	; 0x24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f1c3 0307 	rsb	r3, r3, #7
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	bf28      	it	cs
 8003b62:	2304      	movcs	r3, #4
 8003b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2b06      	cmp	r3, #6
 8003b6c:	d902      	bls.n	8003b74 <NVIC_EncodePriority+0x30>
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3b03      	subs	r3, #3
 8003b72:	e000      	b.n	8003b76 <NVIC_EncodePriority+0x32>
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43da      	mvns	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	401a      	ands	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	43d9      	mvns	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b9c:	4313      	orrs	r3, r2
         );
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3724      	adds	r7, #36	; 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bbc:	d301      	bcc.n	8003bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00f      	b.n	8003be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <SysTick_Config+0x40>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bca:	210f      	movs	r1, #15
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bd0:	f7ff ff8e 	bl	8003af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <SysTick_Config+0x40>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <SysTick_Config+0x40>)
 8003bdc:	2207      	movs	r2, #7
 8003bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	e000e010 	.word	0xe000e010

08003bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff29 	bl	8003a50 <__NVIC_SetPriorityGrouping>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c18:	f7ff ff3e 	bl	8003a98 <__NVIC_GetPriorityGrouping>
 8003c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	6978      	ldr	r0, [r7, #20]
 8003c24:	f7ff ff8e 	bl	8003b44 <NVIC_EncodePriority>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff5d 	bl	8003af0 <__NVIC_SetPriority>
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff31 	bl	8003ab4 <__NVIC_EnableIRQ>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ffa2 	bl	8003bac <SysTick_Config>
 8003c68:	4603      	mov	r3, r0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c80:	f7ff f99c 	bl	8002fbc <HAL_GetTick>
 8003c84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d008      	beq.n	8003ca4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e052      	b.n	8003d4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0216 	bic.w	r2, r2, #22
 8003cb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <HAL_DMA_Abort+0x62>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0208 	bic.w	r2, r2, #8
 8003ce2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cf4:	e013      	b.n	8003d1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cf6:	f7ff f961 	bl	8002fbc <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b05      	cmp	r3, #5
 8003d02:	d90c      	bls.n	8003d1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e015      	b.n	8003d4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e4      	bne.n	8003cf6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	223f      	movs	r2, #63	; 0x3f
 8003d32:	409a      	lsls	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d004      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2280      	movs	r2, #128	; 0x80
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e00c      	b.n	8003d8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2205      	movs	r2, #5
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	e159      	b.n	8004068 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003db4:	2201      	movs	r2, #1
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	f040 8148 	bne.w	8004062 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d005      	beq.n	8003dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d130      	bne.n	8003e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	2203      	movs	r2, #3
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e20:	2201      	movs	r2, #1
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 0201 	and.w	r2, r3, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d017      	beq.n	8003e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	2203      	movs	r2, #3
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d123      	bne.n	8003edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	08da      	lsrs	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3208      	adds	r2, #8
 8003e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	220f      	movs	r2, #15
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	08da      	lsrs	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3208      	adds	r2, #8
 8003ed6:	69b9      	ldr	r1, [r7, #24]
 8003ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0203 	and.w	r2, r3, #3
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80a2 	beq.w	8004062 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	4b57      	ldr	r3, [pc, #348]	; (8004080 <HAL_GPIO_Init+0x2e8>)
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	4a56      	ldr	r2, [pc, #344]	; (8004080 <HAL_GPIO_Init+0x2e8>)
 8003f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f2e:	4b54      	ldr	r3, [pc, #336]	; (8004080 <HAL_GPIO_Init+0x2e8>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f3a:	4a52      	ldr	r2, [pc, #328]	; (8004084 <HAL_GPIO_Init+0x2ec>)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	089b      	lsrs	r3, r3, #2
 8003f40:	3302      	adds	r3, #2
 8003f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	220f      	movs	r2, #15
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a49      	ldr	r2, [pc, #292]	; (8004088 <HAL_GPIO_Init+0x2f0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d019      	beq.n	8003f9a <HAL_GPIO_Init+0x202>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a48      	ldr	r2, [pc, #288]	; (800408c <HAL_GPIO_Init+0x2f4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d013      	beq.n	8003f96 <HAL_GPIO_Init+0x1fe>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a47      	ldr	r2, [pc, #284]	; (8004090 <HAL_GPIO_Init+0x2f8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00d      	beq.n	8003f92 <HAL_GPIO_Init+0x1fa>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a46      	ldr	r2, [pc, #280]	; (8004094 <HAL_GPIO_Init+0x2fc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <HAL_GPIO_Init+0x1f6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a45      	ldr	r2, [pc, #276]	; (8004098 <HAL_GPIO_Init+0x300>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d101      	bne.n	8003f8a <HAL_GPIO_Init+0x1f2>
 8003f86:	2304      	movs	r3, #4
 8003f88:	e008      	b.n	8003f9c <HAL_GPIO_Init+0x204>
 8003f8a:	2307      	movs	r3, #7
 8003f8c:	e006      	b.n	8003f9c <HAL_GPIO_Init+0x204>
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e004      	b.n	8003f9c <HAL_GPIO_Init+0x204>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e002      	b.n	8003f9c <HAL_GPIO_Init+0x204>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <HAL_GPIO_Init+0x204>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	f002 0203 	and.w	r2, r2, #3
 8003fa2:	0092      	lsls	r2, r2, #2
 8003fa4:	4093      	lsls	r3, r2
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fac:	4935      	ldr	r1, [pc, #212]	; (8004084 <HAL_GPIO_Init+0x2ec>)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	089b      	lsrs	r3, r3, #2
 8003fb2:	3302      	adds	r3, #2
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fba:	4b38      	ldr	r3, [pc, #224]	; (800409c <HAL_GPIO_Init+0x304>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fde:	4a2f      	ldr	r2, [pc, #188]	; (800409c <HAL_GPIO_Init+0x304>)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fe4:	4b2d      	ldr	r3, [pc, #180]	; (800409c <HAL_GPIO_Init+0x304>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004008:	4a24      	ldr	r2, [pc, #144]	; (800409c <HAL_GPIO_Init+0x304>)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800400e:	4b23      	ldr	r3, [pc, #140]	; (800409c <HAL_GPIO_Init+0x304>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004032:	4a1a      	ldr	r2, [pc, #104]	; (800409c <HAL_GPIO_Init+0x304>)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004038:	4b18      	ldr	r3, [pc, #96]	; (800409c <HAL_GPIO_Init+0x304>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800405c:	4a0f      	ldr	r2, [pc, #60]	; (800409c <HAL_GPIO_Init+0x304>)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3301      	adds	r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	f67f aea2 	bls.w	8003db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	3724      	adds	r7, #36	; 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	40013800 	.word	0x40013800
 8004088:	40020000 	.word	0x40020000
 800408c:	40020400 	.word	0x40020400
 8004090:	40020800 	.word	0x40020800
 8004094:	40020c00 	.word	0x40020c00
 8004098:	40021000 	.word	0x40021000
 800409c:	40013c00 	.word	0x40013c00

080040a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
 80040ac:	4613      	mov	r3, r2
 80040ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040b0:	787b      	ldrb	r3, [r7, #1]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040bc:	e003      	b.n	80040c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040be:	887b      	ldrh	r3, [r7, #2]
 80040c0:	041a      	lsls	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	619a      	str	r2, [r3, #24]
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d006      	beq.n	80040f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040ea:	4a05      	ldr	r2, [pc, #20]	; (8004100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd ff46 	bl	8001f84 <HAL_GPIO_EXTI_Callback>
  }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40013c00 	.word	0x40013c00

08004104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e12b      	b.n	800436e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fe fca6 	bl	8002a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2224      	movs	r2, #36	; 0x24
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004168:	f001 fbfc 	bl	8005964 <HAL_RCC_GetPCLK1Freq>
 800416c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4a81      	ldr	r2, [pc, #516]	; (8004378 <HAL_I2C_Init+0x274>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d807      	bhi.n	8004188 <HAL_I2C_Init+0x84>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a80      	ldr	r2, [pc, #512]	; (800437c <HAL_I2C_Init+0x278>)
 800417c:	4293      	cmp	r3, r2
 800417e:	bf94      	ite	ls
 8004180:	2301      	movls	r3, #1
 8004182:	2300      	movhi	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e006      	b.n	8004196 <HAL_I2C_Init+0x92>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4a7d      	ldr	r2, [pc, #500]	; (8004380 <HAL_I2C_Init+0x27c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	bf94      	ite	ls
 8004190:	2301      	movls	r3, #1
 8004192:	2300      	movhi	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e0e7      	b.n	800436e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a78      	ldr	r2, [pc, #480]	; (8004384 <HAL_I2C_Init+0x280>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	0c9b      	lsrs	r3, r3, #18
 80041a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a6a      	ldr	r2, [pc, #424]	; (8004378 <HAL_I2C_Init+0x274>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d802      	bhi.n	80041d8 <HAL_I2C_Init+0xd4>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3301      	adds	r3, #1
 80041d6:	e009      	b.n	80041ec <HAL_I2C_Init+0xe8>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	4a69      	ldr	r2, [pc, #420]	; (8004388 <HAL_I2C_Init+0x284>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	099b      	lsrs	r3, r3, #6
 80041ea:	3301      	adds	r3, #1
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	495c      	ldr	r1, [pc, #368]	; (8004378 <HAL_I2C_Init+0x274>)
 8004208:	428b      	cmp	r3, r1
 800420a:	d819      	bhi.n	8004240 <HAL_I2C_Init+0x13c>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1e59      	subs	r1, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fbb1 f3f3 	udiv	r3, r1, r3
 800421a:	1c59      	adds	r1, r3, #1
 800421c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004220:	400b      	ands	r3, r1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_I2C_Init+0x138>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1e59      	subs	r1, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fbb1 f3f3 	udiv	r3, r1, r3
 8004234:	3301      	adds	r3, #1
 8004236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423a:	e051      	b.n	80042e0 <HAL_I2C_Init+0x1dc>
 800423c:	2304      	movs	r3, #4
 800423e:	e04f      	b.n	80042e0 <HAL_I2C_Init+0x1dc>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d111      	bne.n	800426c <HAL_I2C_Init+0x168>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1e58      	subs	r0, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	440b      	add	r3, r1
 8004256:	fbb0 f3f3 	udiv	r3, r0, r3
 800425a:	3301      	adds	r3, #1
 800425c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e012      	b.n	8004292 <HAL_I2C_Init+0x18e>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1e58      	subs	r0, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6859      	ldr	r1, [r3, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	0099      	lsls	r1, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004282:	3301      	adds	r3, #1
 8004284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Init+0x196>
 8004296:	2301      	movs	r3, #1
 8004298:	e022      	b.n	80042e0 <HAL_I2C_Init+0x1dc>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10e      	bne.n	80042c0 <HAL_I2C_Init+0x1bc>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1e58      	subs	r0, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	440b      	add	r3, r1
 80042b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80042b4:	3301      	adds	r3, #1
 80042b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042be:	e00f      	b.n	80042e0 <HAL_I2C_Init+0x1dc>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1e58      	subs	r0, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	0099      	lsls	r1, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042d6:	3301      	adds	r3, #1
 80042d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	6809      	ldr	r1, [r1, #0]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800430e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6911      	ldr	r1, [r2, #16]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68d2      	ldr	r2, [r2, #12]
 800431a:	4311      	orrs	r1, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	430b      	orrs	r3, r1
 8004322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	000186a0 	.word	0x000186a0
 800437c:	001e847f 	.word	0x001e847f
 8004380:	003d08ff 	.word	0x003d08ff
 8004384:	431bde83 	.word	0x431bde83
 8004388:	10624dd3 	.word	0x10624dd3

0800438c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4603      	mov	r3, r0
 800439c:	817b      	strh	r3, [r7, #10]
 800439e:	460b      	mov	r3, r1
 80043a0:	813b      	strh	r3, [r7, #8]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043a6:	f7fe fe09 	bl	8002fbc <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	f040 80d9 	bne.w	800456c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	2319      	movs	r3, #25
 80043c0:	2201      	movs	r2, #1
 80043c2:	496d      	ldr	r1, [pc, #436]	; (8004578 <HAL_I2C_Mem_Write+0x1ec>)
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 fc7f 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
 80043d2:	e0cc      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_I2C_Mem_Write+0x56>
 80043de:	2302      	movs	r3, #2
 80043e0:	e0c5      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d007      	beq.n	8004408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2221      	movs	r2, #33	; 0x21
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2240      	movs	r2, #64	; 0x40
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4a4d      	ldr	r2, [pc, #308]	; (800457c <HAL_I2C_Mem_Write+0x1f0>)
 8004448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800444a:	88f8      	ldrh	r0, [r7, #6]
 800444c:	893a      	ldrh	r2, [r7, #8]
 800444e:	8979      	ldrh	r1, [r7, #10]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	4603      	mov	r3, r0
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fab6 	bl	80049cc <I2C_RequestMemoryWrite>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d052      	beq.n	800450c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e081      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fd00 	bl	8004e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b04      	cmp	r3, #4
 8004480:	d107      	bne.n	8004492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e06b      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	781a      	ldrb	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d11b      	bne.n	800450c <HAL_I2C_Mem_Write+0x180>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d017      	beq.n	800450c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1aa      	bne.n	800446a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fcec 	bl	8004ef6 <I2C_WaitOnBTFFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	2b04      	cmp	r3, #4
 800452a:	d107      	bne.n	800453c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e016      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	e000      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800456c:	2302      	movs	r3, #2
  }
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	00100002 	.word	0x00100002
 800457c:	ffff0000 	.word	0xffff0000

08004580 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08c      	sub	sp, #48	; 0x30
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	4608      	mov	r0, r1
 800458a:	4611      	mov	r1, r2
 800458c:	461a      	mov	r2, r3
 800458e:	4603      	mov	r3, r0
 8004590:	817b      	strh	r3, [r7, #10]
 8004592:	460b      	mov	r3, r1
 8004594:	813b      	strh	r3, [r7, #8]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800459a:	f7fe fd0f 	bl	8002fbc <HAL_GetTick>
 800459e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	f040 8208 	bne.w	80049be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	2319      	movs	r3, #25
 80045b4:	2201      	movs	r2, #1
 80045b6:	497b      	ldr	r1, [pc, #492]	; (80047a4 <HAL_I2C_Mem_Read+0x224>)
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fb85 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
 80045c6:	e1fb      	b.n	80049c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_I2C_Mem_Read+0x56>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e1f4      	b.n	80049c0 <HAL_I2C_Mem_Read+0x440>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d007      	beq.n	80045fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800460a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2222      	movs	r2, #34	; 0x22
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2240      	movs	r2, #64	; 0x40
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800462c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a5b      	ldr	r2, [pc, #364]	; (80047a8 <HAL_I2C_Mem_Read+0x228>)
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800463e:	88f8      	ldrh	r0, [r7, #6]
 8004640:	893a      	ldrh	r2, [r7, #8]
 8004642:	8979      	ldrh	r1, [r7, #10]
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	4603      	mov	r3, r0
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 fa52 	bl	8004af8 <I2C_RequestMemoryRead>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e1b0      	b.n	80049c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d113      	bne.n	800468e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004666:	2300      	movs	r3, #0
 8004668:	623b      	str	r3, [r7, #32]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	623b      	str	r3, [r7, #32]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	623b      	str	r3, [r7, #32]
 800467a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	e184      	b.n	8004998 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004692:	2b01      	cmp	r3, #1
 8004694:	d11b      	bne.n	80046ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	61fb      	str	r3, [r7, #28]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	e164      	b.n	8004998 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d11b      	bne.n	800470e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	e144      	b.n	8004998 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004724:	e138      	b.n	8004998 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	2b03      	cmp	r3, #3
 800472c:	f200 80f1 	bhi.w	8004912 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004734:	2b01      	cmp	r3, #1
 8004736:	d123      	bne.n	8004780 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fc1b 	bl	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e139      	b.n	80049c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800477e:	e10b      	b.n	8004998 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004784:	2b02      	cmp	r3, #2
 8004786:	d14e      	bne.n	8004826 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478e:	2200      	movs	r2, #0
 8004790:	4906      	ldr	r1, [pc, #24]	; (80047ac <HAL_I2C_Mem_Read+0x22c>)
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 fa98 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e10e      	b.n	80049c0 <HAL_I2C_Mem_Read+0x440>
 80047a2:	bf00      	nop
 80047a4:	00100002 	.word	0x00100002
 80047a8:	ffff0000 	.word	0xffff0000
 80047ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004824:	e0b8      	b.n	8004998 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	2200      	movs	r2, #0
 800482e:	4966      	ldr	r1, [pc, #408]	; (80049c8 <HAL_I2C_Mem_Read+0x448>)
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fa49 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0bf      	b.n	80049c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	2200      	movs	r2, #0
 800488a:	494f      	ldr	r1, [pc, #316]	; (80049c8 <HAL_I2C_Mem_Read+0x448>)
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 fa1b 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e091      	b.n	80049c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004910:	e042      	b.n	8004998 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004914:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fb2e 	bl	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e04c      	b.n	80049c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b04      	cmp	r3, #4
 8004964:	d118      	bne.n	8004998 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	f47f aec2 	bne.w	8004726 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e000      	b.n	80049c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
  }
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3728      	adds	r7, #40	; 0x28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	00010004 	.word	0x00010004

080049cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	4608      	mov	r0, r1
 80049d6:	4611      	mov	r1, r2
 80049d8:	461a      	mov	r2, r3
 80049da:	4603      	mov	r3, r0
 80049dc:	817b      	strh	r3, [r7, #10]
 80049de:	460b      	mov	r3, r1
 80049e0:	813b      	strh	r3, [r7, #8]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f960 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00d      	beq.n	8004a2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1c:	d103      	bne.n	8004a26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e05f      	b.n	8004aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a2a:	897b      	ldrh	r3, [r7, #10]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	6a3a      	ldr	r2, [r7, #32]
 8004a3e:	492d      	ldr	r1, [pc, #180]	; (8004af4 <I2C_RequestMemoryWrite+0x128>)
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f998 	bl	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e04c      	b.n	8004aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a68:	6a39      	ldr	r1, [r7, #32]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 fa02 	bl	8004e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00d      	beq.n	8004a92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d107      	bne.n	8004a8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e02b      	b.n	8004aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d105      	bne.n	8004aa4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a98:	893b      	ldrh	r3, [r7, #8]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	611a      	str	r2, [r3, #16]
 8004aa2:	e021      	b.n	8004ae8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004aa4:	893b      	ldrh	r3, [r7, #8]
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	6a39      	ldr	r1, [r7, #32]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f9dc 	bl	8004e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d107      	bne.n	8004ada <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e005      	b.n	8004aea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ade:	893b      	ldrh	r3, [r7, #8]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	00010002 	.word	0x00010002

08004af8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	817b      	strh	r3, [r7, #10]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	813b      	strh	r3, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f8c2 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b58:	d103      	bne.n	8004b62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0aa      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b66:	897b      	ldrh	r3, [r7, #10]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	6a3a      	ldr	r2, [r7, #32]
 8004b7a:	4952      	ldr	r1, [pc, #328]	; (8004cc4 <I2C_RequestMemoryRead+0x1cc>)
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f8fa 	bl	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e097      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba4:	6a39      	ldr	r1, [r7, #32]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f964 	bl	8004e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00d      	beq.n	8004bce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d107      	bne.n	8004bca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e076      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d105      	bne.n	8004be0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bd4:	893b      	ldrh	r3, [r7, #8]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	611a      	str	r2, [r3, #16]
 8004bde:	e021      	b.n	8004c24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004be0:	893b      	ldrh	r3, [r7, #8]
 8004be2:	0a1b      	lsrs	r3, r3, #8
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf0:	6a39      	ldr	r1, [r7, #32]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f93e 	bl	8004e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00d      	beq.n	8004c1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d107      	bne.n	8004c16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e050      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c1a:	893b      	ldrh	r3, [r7, #8]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	6a39      	ldr	r1, [r7, #32]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f923 	bl	8004e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00d      	beq.n	8004c50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d107      	bne.n	8004c4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e035      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f82b 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00d      	beq.n	8004c94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c86:	d103      	bne.n	8004c90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e013      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c94:	897b      	ldrh	r3, [r7, #10]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	6a3a      	ldr	r2, [r7, #32]
 8004ca8:	4906      	ldr	r1, [pc, #24]	; (8004cc4 <I2C_RequestMemoryRead+0x1cc>)
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f863 	bl	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	00010002 	.word	0x00010002

08004cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd8:	e025      	b.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ce0:	d021      	beq.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce2:	f7fe f96b 	bl	8002fbc <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d116      	bne.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e023      	b.n	8004d6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10d      	bne.n	8004d4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	43da      	mvns	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bf0c      	ite	eq
 8004d42:	2301      	moveq	r3, #1
 8004d44:	2300      	movne	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	e00c      	b.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	43da      	mvns	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bf0c      	ite	eq
 8004d5e:	2301      	moveq	r3, #1
 8004d60:	2300      	movne	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d0b6      	beq.n	8004cda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d84:	e051      	b.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d94:	d123      	bne.n	8004dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f043 0204 	orr.w	r2, r3, #4
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e046      	b.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de4:	d021      	beq.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fe f8e9 	bl	8002fbc <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d116      	bne.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e020      	b.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d10c      	bne.n	8004e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	43da      	mvns	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf14      	ite	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	2300      	moveq	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	e00b      	b.n	8004e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	43da      	mvns	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d18d      	bne.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e80:	e02d      	b.n	8004ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f8ce 	bl	8005024 <I2C_IsAcknowledgeFailed>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e02d      	b.n	8004eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e98:	d021      	beq.n	8004ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fe f88f 	bl	8002fbc <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d116      	bne.n	8004ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e007      	b.n	8004eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee8:	2b80      	cmp	r3, #128	; 0x80
 8004eea:	d1ca      	bne.n	8004e82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f02:	e02d      	b.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f88d 	bl	8005024 <I2C_IsAcknowledgeFailed>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e02d      	b.n	8004f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f1a:	d021      	beq.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1c:	f7fe f84e 	bl	8002fbc <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d302      	bcc.n	8004f32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d116      	bne.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e007      	b.n	8004f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d1ca      	bne.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f84:	e042      	b.n	800500c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d119      	bne.n	8004fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0210 	mvn.w	r2, #16
 8004f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e029      	b.n	800501c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc8:	f7fd fff8 	bl	8002fbc <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d302      	bcc.n	8004fde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d116      	bne.n	800500c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e007      	b.n	800501c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005016:	2b40      	cmp	r3, #64	; 0x40
 8005018:	d1b5      	bne.n	8004f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503a:	d11b      	bne.n	8005074 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005044:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	f043 0204 	orr.w	r2, r3, #4
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
	...

08005084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e267      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d075      	beq.n	800518e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050a2:	4b88      	ldr	r3, [pc, #544]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d00c      	beq.n	80050c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ae:	4b85      	ldr	r3, [pc, #532]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d112      	bne.n	80050e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ba:	4b82      	ldr	r3, [pc, #520]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c8:	4b7e      	ldr	r3, [pc, #504]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d05b      	beq.n	800518c <HAL_RCC_OscConfig+0x108>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d157      	bne.n	800518c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e242      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e8:	d106      	bne.n	80050f8 <HAL_RCC_OscConfig+0x74>
 80050ea:	4b76      	ldr	r3, [pc, #472]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a75      	ldr	r2, [pc, #468]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e01d      	b.n	8005134 <HAL_RCC_OscConfig+0xb0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0x98>
 8005102:	4b70      	ldr	r3, [pc, #448]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a6f      	ldr	r2, [pc, #444]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	4b6d      	ldr	r3, [pc, #436]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a6c      	ldr	r2, [pc, #432]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e00b      	b.n	8005134 <HAL_RCC_OscConfig+0xb0>
 800511c:	4b69      	ldr	r3, [pc, #420]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a68      	ldr	r2, [pc, #416]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b66      	ldr	r3, [pc, #408]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a65      	ldr	r2, [pc, #404]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 800512e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fd ff3e 	bl	8002fbc <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005144:	f7fd ff3a 	bl	8002fbc <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e207      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005156:	4b5b      	ldr	r3, [pc, #364]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0xc0>
 8005162:	e014      	b.n	800518e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005164:	f7fd ff2a 	bl	8002fbc <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800516c:	f7fd ff26 	bl	8002fbc <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	; 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e1f3      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517e:	4b51      	ldr	r3, [pc, #324]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0xe8>
 800518a:	e000      	b.n	800518e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800518c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d063      	beq.n	8005262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800519a:	4b4a      	ldr	r3, [pc, #296]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a6:	4b47      	ldr	r3, [pc, #284]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d11c      	bne.n	80051ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051b2:	4b44      	ldr	r3, [pc, #272]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d116      	bne.n	80051ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051be:	4b41      	ldr	r3, [pc, #260]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_RCC_OscConfig+0x152>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e1c7      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d6:	4b3b      	ldr	r3, [pc, #236]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4937      	ldr	r1, [pc, #220]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ea:	e03a      	b.n	8005262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d020      	beq.n	8005236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f4:	4b34      	ldr	r3, [pc, #208]	; (80052c8 <HAL_RCC_OscConfig+0x244>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fa:	f7fd fedf 	bl	8002fbc <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005202:	f7fd fedb 	bl	8002fbc <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e1a8      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005214:	4b2b      	ldr	r3, [pc, #172]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005220:	4b28      	ldr	r3, [pc, #160]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4925      	ldr	r1, [pc, #148]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005230:	4313      	orrs	r3, r2
 8005232:	600b      	str	r3, [r1, #0]
 8005234:	e015      	b.n	8005262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005236:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <HAL_RCC_OscConfig+0x244>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fd febe 	bl	8002fbc <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005244:	f7fd feba 	bl	8002fbc <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e187      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005256:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d036      	beq.n	80052dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d016      	beq.n	80052a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005276:	4b15      	ldr	r3, [pc, #84]	; (80052cc <HAL_RCC_OscConfig+0x248>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527c:	f7fd fe9e 	bl	8002fbc <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005284:	f7fd fe9a 	bl	8002fbc <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e167      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <HAL_RCC_OscConfig+0x240>)
 8005298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCC_OscConfig+0x200>
 80052a2:	e01b      	b.n	80052dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a4:	4b09      	ldr	r3, [pc, #36]	; (80052cc <HAL_RCC_OscConfig+0x248>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052aa:	f7fd fe87 	bl	8002fbc <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b0:	e00e      	b.n	80052d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b2:	f7fd fe83 	bl	8002fbc <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d907      	bls.n	80052d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e150      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
 80052c4:	40023800 	.word	0x40023800
 80052c8:	42470000 	.word	0x42470000
 80052cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d0:	4b88      	ldr	r3, [pc, #544]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80052d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ea      	bne.n	80052b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8097 	beq.w	8005418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ea:	2300      	movs	r3, #0
 80052ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ee:	4b81      	ldr	r3, [pc, #516]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10f      	bne.n	800531a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	4b7d      	ldr	r3, [pc, #500]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	4a7c      	ldr	r2, [pc, #496]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005308:	6413      	str	r3, [r2, #64]	; 0x40
 800530a:	4b7a      	ldr	r3, [pc, #488]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005312:	60bb      	str	r3, [r7, #8]
 8005314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005316:	2301      	movs	r3, #1
 8005318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531a:	4b77      	ldr	r3, [pc, #476]	; (80054f8 <HAL_RCC_OscConfig+0x474>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	2b00      	cmp	r3, #0
 8005324:	d118      	bne.n	8005358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005326:	4b74      	ldr	r3, [pc, #464]	; (80054f8 <HAL_RCC_OscConfig+0x474>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a73      	ldr	r2, [pc, #460]	; (80054f8 <HAL_RCC_OscConfig+0x474>)
 800532c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005332:	f7fd fe43 	bl	8002fbc <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533a:	f7fd fe3f 	bl	8002fbc <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e10c      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534c:	4b6a      	ldr	r3, [pc, #424]	; (80054f8 <HAL_RCC_OscConfig+0x474>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0f0      	beq.n	800533a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d106      	bne.n	800536e <HAL_RCC_OscConfig+0x2ea>
 8005360:	4b64      	ldr	r3, [pc, #400]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	4a63      	ldr	r2, [pc, #396]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	; 0x70
 800536c:	e01c      	b.n	80053a8 <HAL_RCC_OscConfig+0x324>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b05      	cmp	r3, #5
 8005374:	d10c      	bne.n	8005390 <HAL_RCC_OscConfig+0x30c>
 8005376:	4b5f      	ldr	r3, [pc, #380]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	4a5e      	ldr	r2, [pc, #376]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 800537c:	f043 0304 	orr.w	r3, r3, #4
 8005380:	6713      	str	r3, [r2, #112]	; 0x70
 8005382:	4b5c      	ldr	r3, [pc, #368]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005386:	4a5b      	ldr	r2, [pc, #364]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	6713      	str	r3, [r2, #112]	; 0x70
 800538e:	e00b      	b.n	80053a8 <HAL_RCC_OscConfig+0x324>
 8005390:	4b58      	ldr	r3, [pc, #352]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	4a57      	ldr	r2, [pc, #348]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005396:	f023 0301 	bic.w	r3, r3, #1
 800539a:	6713      	str	r3, [r2, #112]	; 0x70
 800539c:	4b55      	ldr	r3, [pc, #340]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 800539e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a0:	4a54      	ldr	r2, [pc, #336]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80053a2:	f023 0304 	bic.w	r3, r3, #4
 80053a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d015      	beq.n	80053dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b0:	f7fd fe04 	bl	8002fbc <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b6:	e00a      	b.n	80053ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b8:	f7fd fe00 	bl	8002fbc <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e0cb      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ce:	4b49      	ldr	r3, [pc, #292]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0ee      	beq.n	80053b8 <HAL_RCC_OscConfig+0x334>
 80053da:	e014      	b.n	8005406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053dc:	f7fd fdee 	bl	8002fbc <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e4:	f7fd fdea 	bl	8002fbc <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0b5      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fa:	4b3e      	ldr	r3, [pc, #248]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1ee      	bne.n	80053e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005406:	7dfb      	ldrb	r3, [r7, #23]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d105      	bne.n	8005418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540c:	4b39      	ldr	r3, [pc, #228]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	4a38      	ldr	r2, [pc, #224]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005416:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80a1 	beq.w	8005564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005422:	4b34      	ldr	r3, [pc, #208]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 030c 	and.w	r3, r3, #12
 800542a:	2b08      	cmp	r3, #8
 800542c:	d05c      	beq.n	80054e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d141      	bne.n	80054ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005436:	4b31      	ldr	r3, [pc, #196]	; (80054fc <HAL_RCC_OscConfig+0x478>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fd fdbe 	bl	8002fbc <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005444:	f7fd fdba 	bl	8002fbc <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e087      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005456:	4b27      	ldr	r3, [pc, #156]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69da      	ldr	r2, [r3, #28]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	019b      	lsls	r3, r3, #6
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	3b01      	subs	r3, #1
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	061b      	lsls	r3, r3, #24
 8005486:	491b      	ldr	r1, [pc, #108]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 8005488:	4313      	orrs	r3, r2
 800548a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <HAL_RCC_OscConfig+0x478>)
 800548e:	2201      	movs	r2, #1
 8005490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005492:	f7fd fd93 	bl	8002fbc <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800549a:	f7fd fd8f 	bl	8002fbc <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e05c      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x416>
 80054b8:	e054      	b.n	8005564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ba:	4b10      	ldr	r3, [pc, #64]	; (80054fc <HAL_RCC_OscConfig+0x478>)
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7fd fd7c 	bl	8002fbc <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c8:	f7fd fd78 	bl	8002fbc <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e045      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <HAL_RCC_OscConfig+0x470>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x444>
 80054e6:	e03d      	b.n	8005564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d107      	bne.n	8005500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e038      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
 80054f4:	40023800 	.word	0x40023800
 80054f8:	40007000 	.word	0x40007000
 80054fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005500:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <HAL_RCC_OscConfig+0x4ec>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d028      	beq.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d121      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d11a      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005530:	4013      	ands	r3, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005538:	4293      	cmp	r3, r2
 800553a:	d111      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	3b01      	subs	r3, #1
 800554a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d107      	bne.n	8005560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40023800 	.word	0x40023800

08005574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0cc      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005588:	4b68      	ldr	r3, [pc, #416]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d90c      	bls.n	80055b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005596:	4b65      	ldr	r3, [pc, #404]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b63      	ldr	r3, [pc, #396]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0b8      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d020      	beq.n	80055fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055c8:	4b59      	ldr	r3, [pc, #356]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	4a58      	ldr	r2, [pc, #352]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055e0:	4b53      	ldr	r3, [pc, #332]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	4a52      	ldr	r2, [pc, #328]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ec:	4b50      	ldr	r3, [pc, #320]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	494d      	ldr	r1, [pc, #308]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d044      	beq.n	8005694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d107      	bne.n	8005622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005612:	4b47      	ldr	r3, [pc, #284]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d119      	bne.n	8005652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e07f      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d003      	beq.n	8005632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800562e:	2b03      	cmp	r3, #3
 8005630:	d107      	bne.n	8005642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005632:	4b3f      	ldr	r3, [pc, #252]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e06f      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005642:	4b3b      	ldr	r3, [pc, #236]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e067      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005652:	4b37      	ldr	r3, [pc, #220]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 0203 	bic.w	r2, r3, #3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	4934      	ldr	r1, [pc, #208]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	4313      	orrs	r3, r2
 8005662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005664:	f7fd fcaa 	bl	8002fbc <HAL_GetTick>
 8005668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566a:	e00a      	b.n	8005682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800566c:	f7fd fca6 	bl	8002fbc <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	f241 3288 	movw	r2, #5000	; 0x1388
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e04f      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005682:	4b2b      	ldr	r3, [pc, #172]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 020c 	and.w	r2, r3, #12
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	429a      	cmp	r2, r3
 8005692:	d1eb      	bne.n	800566c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005694:	4b25      	ldr	r3, [pc, #148]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d20c      	bcs.n	80056bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a2:	4b22      	ldr	r3, [pc, #136]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056aa:	4b20      	ldr	r3, [pc, #128]	; (800572c <HAL_RCC_ClockConfig+0x1b8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e032      	b.n	8005722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c8:	4b19      	ldr	r3, [pc, #100]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4916      	ldr	r1, [pc, #88]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056e6:	4b12      	ldr	r3, [pc, #72]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	490e      	ldr	r1, [pc, #56]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056fa:	f000 f821 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80056fe:	4602      	mov	r2, r0
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	490a      	ldr	r1, [pc, #40]	; (8005734 <HAL_RCC_ClockConfig+0x1c0>)
 800570c:	5ccb      	ldrb	r3, [r1, r3]
 800570e:	fa22 f303 	lsr.w	r3, r2, r3
 8005712:	4a09      	ldr	r2, [pc, #36]	; (8005738 <HAL_RCC_ClockConfig+0x1c4>)
 8005714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005716:	4b09      	ldr	r3, [pc, #36]	; (800573c <HAL_RCC_ClockConfig+0x1c8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7fd fc0a 	bl	8002f34 <HAL_InitTick>

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40023c00 	.word	0x40023c00
 8005730:	40023800 	.word	0x40023800
 8005734:	08011304 	.word	0x08011304
 8005738:	20000018 	.word	0x20000018
 800573c:	2000001c 	.word	0x2000001c

08005740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005744:	b094      	sub	sp, #80	; 0x50
 8005746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	647b      	str	r3, [r7, #68]	; 0x44
 800574c:	2300      	movs	r3, #0
 800574e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005750:	2300      	movs	r3, #0
 8005752:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005758:	4b79      	ldr	r3, [pc, #484]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 030c 	and.w	r3, r3, #12
 8005760:	2b08      	cmp	r3, #8
 8005762:	d00d      	beq.n	8005780 <HAL_RCC_GetSysClockFreq+0x40>
 8005764:	2b08      	cmp	r3, #8
 8005766:	f200 80e1 	bhi.w	800592c <HAL_RCC_GetSysClockFreq+0x1ec>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0x34>
 800576e:	2b04      	cmp	r3, #4
 8005770:	d003      	beq.n	800577a <HAL_RCC_GetSysClockFreq+0x3a>
 8005772:	e0db      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005774:	4b73      	ldr	r3, [pc, #460]	; (8005944 <HAL_RCC_GetSysClockFreq+0x204>)
 8005776:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005778:	e0db      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800577a:	4b73      	ldr	r3, [pc, #460]	; (8005948 <HAL_RCC_GetSysClockFreq+0x208>)
 800577c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800577e:	e0d8      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005780:	4b6f      	ldr	r3, [pc, #444]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005788:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800578a:	4b6d      	ldr	r3, [pc, #436]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d063      	beq.n	800585e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005796:	4b6a      	ldr	r3, [pc, #424]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	099b      	lsrs	r3, r3, #6
 800579c:	2200      	movs	r2, #0
 800579e:	63bb      	str	r3, [r7, #56]	; 0x38
 80057a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a8:	633b      	str	r3, [r7, #48]	; 0x30
 80057aa:	2300      	movs	r3, #0
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
 80057ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057b2:	4622      	mov	r2, r4
 80057b4:	462b      	mov	r3, r5
 80057b6:	f04f 0000 	mov.w	r0, #0
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	0159      	lsls	r1, r3, #5
 80057c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057c4:	0150      	lsls	r0, r2, #5
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4621      	mov	r1, r4
 80057cc:	1a51      	subs	r1, r2, r1
 80057ce:	6139      	str	r1, [r7, #16]
 80057d0:	4629      	mov	r1, r5
 80057d2:	eb63 0301 	sbc.w	r3, r3, r1
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057e4:	4659      	mov	r1, fp
 80057e6:	018b      	lsls	r3, r1, #6
 80057e8:	4651      	mov	r1, sl
 80057ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057ee:	4651      	mov	r1, sl
 80057f0:	018a      	lsls	r2, r1, #6
 80057f2:	4651      	mov	r1, sl
 80057f4:	ebb2 0801 	subs.w	r8, r2, r1
 80057f8:	4659      	mov	r1, fp
 80057fa:	eb63 0901 	sbc.w	r9, r3, r1
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800580a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800580e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005812:	4690      	mov	r8, r2
 8005814:	4699      	mov	r9, r3
 8005816:	4623      	mov	r3, r4
 8005818:	eb18 0303 	adds.w	r3, r8, r3
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	462b      	mov	r3, r5
 8005820:	eb49 0303 	adc.w	r3, r9, r3
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	f04f 0200 	mov.w	r2, #0
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005832:	4629      	mov	r1, r5
 8005834:	024b      	lsls	r3, r1, #9
 8005836:	4621      	mov	r1, r4
 8005838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800583c:	4621      	mov	r1, r4
 800583e:	024a      	lsls	r2, r1, #9
 8005840:	4610      	mov	r0, r2
 8005842:	4619      	mov	r1, r3
 8005844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005846:	2200      	movs	r2, #0
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
 800584a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800584c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005850:	f7fb fa22 	bl	8000c98 <__aeabi_uldivmod>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4613      	mov	r3, r2
 800585a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800585c:	e058      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800585e:	4b38      	ldr	r3, [pc, #224]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	099b      	lsrs	r3, r3, #6
 8005864:	2200      	movs	r2, #0
 8005866:	4618      	mov	r0, r3
 8005868:	4611      	mov	r1, r2
 800586a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800586e:	623b      	str	r3, [r7, #32]
 8005870:	2300      	movs	r3, #0
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
 8005874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005878:	4642      	mov	r2, r8
 800587a:	464b      	mov	r3, r9
 800587c:	f04f 0000 	mov.w	r0, #0
 8005880:	f04f 0100 	mov.w	r1, #0
 8005884:	0159      	lsls	r1, r3, #5
 8005886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800588a:	0150      	lsls	r0, r2, #5
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4641      	mov	r1, r8
 8005892:	ebb2 0a01 	subs.w	sl, r2, r1
 8005896:	4649      	mov	r1, r9
 8005898:	eb63 0b01 	sbc.w	fp, r3, r1
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058b0:	ebb2 040a 	subs.w	r4, r2, sl
 80058b4:	eb63 050b 	sbc.w	r5, r3, fp
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	00eb      	lsls	r3, r5, #3
 80058c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058c6:	00e2      	lsls	r2, r4, #3
 80058c8:	4614      	mov	r4, r2
 80058ca:	461d      	mov	r5, r3
 80058cc:	4643      	mov	r3, r8
 80058ce:	18e3      	adds	r3, r4, r3
 80058d0:	603b      	str	r3, [r7, #0]
 80058d2:	464b      	mov	r3, r9
 80058d4:	eb45 0303 	adc.w	r3, r5, r3
 80058d8:	607b      	str	r3, [r7, #4]
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058e6:	4629      	mov	r1, r5
 80058e8:	028b      	lsls	r3, r1, #10
 80058ea:	4621      	mov	r1, r4
 80058ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058f0:	4621      	mov	r1, r4
 80058f2:	028a      	lsls	r2, r1, #10
 80058f4:	4610      	mov	r0, r2
 80058f6:	4619      	mov	r1, r3
 80058f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058fa:	2200      	movs	r2, #0
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	61fa      	str	r2, [r7, #28]
 8005900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005904:	f7fb f9c8 	bl	8000c98 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4613      	mov	r3, r2
 800590e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCC_GetSysClockFreq+0x200>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	0c1b      	lsrs	r3, r3, #16
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	3301      	adds	r3, #1
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800592a:	e002      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCC_GetSysClockFreq+0x204>)
 800592e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005934:	4618      	mov	r0, r3
 8005936:	3750      	adds	r7, #80	; 0x50
 8005938:	46bd      	mov	sp, r7
 800593a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800593e:	bf00      	nop
 8005940:	40023800 	.word	0x40023800
 8005944:	00f42400 	.word	0x00f42400
 8005948:	007a1200 	.word	0x007a1200

0800594c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005950:	4b03      	ldr	r3, [pc, #12]	; (8005960 <HAL_RCC_GetHCLKFreq+0x14>)
 8005952:	681b      	ldr	r3, [r3, #0]
}
 8005954:	4618      	mov	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000018 	.word	0x20000018

08005964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005968:	f7ff fff0 	bl	800594c <HAL_RCC_GetHCLKFreq>
 800596c:	4602      	mov	r2, r0
 800596e:	4b05      	ldr	r3, [pc, #20]	; (8005984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	0a9b      	lsrs	r3, r3, #10
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	4903      	ldr	r1, [pc, #12]	; (8005988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800597a:	5ccb      	ldrb	r3, [r1, r3]
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40023800 	.word	0x40023800
 8005988:	08011314 	.word	0x08011314

0800598c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005990:	f7ff ffdc 	bl	800594c <HAL_RCC_GetHCLKFreq>
 8005994:	4602      	mov	r2, r0
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	0b5b      	lsrs	r3, r3, #13
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	4903      	ldr	r1, [pc, #12]	; (80059b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059a2:	5ccb      	ldrb	r3, [r1, r3]
 80059a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40023800 	.word	0x40023800
 80059b0:	08011314 	.word	0x08011314

080059b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e03f      	b.n	8005a46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fd f8ee 	bl	8002bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2224      	movs	r2, #36	; 0x24
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fd19 	bl	8006430 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695a      	ldr	r2, [r3, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d130      	bne.n	8005aca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_UART_Transmit_IT+0x26>
 8005a6e:	88fb      	ldrh	r3, [r7, #6]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e029      	b.n	8005acc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_UART_Transmit_IT+0x38>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e022      	b.n	8005acc <HAL_UART_Transmit_IT+0x7e>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	88fa      	ldrh	r2, [r7, #6]
 8005a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2221      	movs	r2, #33	; 0x21
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ac4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e000      	b.n	8005acc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005aca:	2302      	movs	r3, #2
  }
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d11d      	bne.n	8005b2e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_UART_Receive_IT+0x26>
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e016      	b.n	8005b30 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_UART_Receive_IT+0x38>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e00f      	b.n	8005b30 <HAL_UART_Receive_IT+0x58>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	461a      	mov	r2, r3
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 faab 	bl	8006080 <UART_Start_Receive_IT>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	e000      	b.n	8005b30 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
  }
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b0ba      	sub	sp, #232	; 0xe8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10f      	bne.n	8005b9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <HAL_UART_IRQHandler+0x66>
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fb8f 	bl	80062ba <UART_Receive_IT>
      return;
 8005b9c:	e256      	b.n	800604c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 80de 	beq.w	8005d64 <HAL_UART_IRQHandler+0x22c>
 8005ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d106      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80d1 	beq.w	8005d64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <HAL_UART_IRQHandler+0xae>
 8005bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f043 0201 	orr.w	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <HAL_UART_IRQHandler+0xd2>
 8005bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f043 0202 	orr.w	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00b      	beq.n	8005c2e <HAL_UART_IRQHandler+0xf6>
 8005c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	f043 0204 	orr.w	r2, r3, #4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d011      	beq.n	8005c5e <HAL_UART_IRQHandler+0x126>
 8005c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d105      	bne.n	8005c52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f043 0208 	orr.w	r2, r3, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 81ed 	beq.w	8006042 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_UART_IRQHandler+0x14e>
 8005c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fb1a 	bl	80062ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	bf0c      	ite	eq
 8005c94:	2301      	moveq	r3, #1
 8005c96:	2300      	movne	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x17a>
 8005caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d04f      	beq.n	8005d52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fa22 	bl	80060fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b40      	cmp	r3, #64	; 0x40
 8005cc4:	d141      	bne.n	8005d4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3314      	adds	r3, #20
 8005ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3314      	adds	r3, #20
 8005cee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d02:	e841 2300 	strex	r3, r2, [r1]
 8005d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1d9      	bne.n	8005cc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d013      	beq.n	8005d42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	4a7d      	ldr	r2, [pc, #500]	; (8005f14 <HAL_UART_IRQHandler+0x3dc>)
 8005d20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fe f813 	bl	8003d52 <HAL_DMA_Abort_IT>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d016      	beq.n	8005d60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	e00e      	b.n	8005d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f986 	bl	8006054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	e00a      	b.n	8005d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f982 	bl	8006054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d50:	e006      	b.n	8005d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f97e 	bl	8006054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d5e:	e170      	b.n	8006042 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d60:	bf00      	nop
    return;
 8005d62:	e16e      	b.n	8006042 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	f040 814a 	bne.w	8006002 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8143 	beq.w	8006002 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 813c 	beq.w	8006002 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	f040 80b4 	bne.w	8005f18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 8140 	beq.w	8006046 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	f080 8139 	bcs.w	8006046 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de6:	f000 8088 	beq.w	8005efa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	330c      	adds	r3, #12
 8005df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	330c      	adds	r3, #12
 8005e12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1d9      	bne.n	8005dea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3314      	adds	r3, #20
 8005e3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e48:	f023 0301 	bic.w	r3, r3, #1
 8005e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3314      	adds	r3, #20
 8005e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e1      	bne.n	8005e36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3314      	adds	r3, #20
 8005e78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3314      	adds	r3, #20
 8005e92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e3      	bne.n	8005e72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	330c      	adds	r3, #12
 8005ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eca:	f023 0310 	bic.w	r3, r3, #16
 8005ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	330c      	adds	r3, #12
 8005ed8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005edc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ede:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ee2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e3      	bne.n	8005eb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fd febc 	bl	8003c72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f8ac 	bl	8006068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f10:	e099      	b.n	8006046 <HAL_UART_IRQHandler+0x50e>
 8005f12:	bf00      	nop
 8005f14:	080061c3 	.word	0x080061c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 808b 	beq.w	800604a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 8086 	beq.w	800604a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	330c      	adds	r3, #12
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f62:	647a      	str	r2, [r7, #68]	; 0x44
 8005f64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e3      	bne.n	8005f3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3314      	adds	r3, #20
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	623b      	str	r3, [r7, #32]
   return(result);
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3314      	adds	r3, #20
 8005f96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f9a:	633a      	str	r2, [r7, #48]	; 0x30
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e3      	bne.n	8005f76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 0310 	bic.w	r3, r3, #16
 8005fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fe0:	61fa      	str	r2, [r7, #28]
 8005fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	69b9      	ldr	r1, [r7, #24]
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	617b      	str	r3, [r7, #20]
   return(result);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e3      	bne.n	8005fbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f834 	bl	8006068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006000:	e023      	b.n	800604a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <HAL_UART_IRQHandler+0x4ea>
 800600e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8e5 	bl	80061ea <UART_Transmit_IT>
    return;
 8006020:	e014      	b.n	800604c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00e      	beq.n	800604c <HAL_UART_IRQHandler+0x514>
 800602e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f925 	bl	800628a <UART_EndTransmit_IT>
    return;
 8006040:	e004      	b.n	800604c <HAL_UART_IRQHandler+0x514>
    return;
 8006042:	bf00      	nop
 8006044:	e002      	b.n	800604c <HAL_UART_IRQHandler+0x514>
      return;
 8006046:	bf00      	nop
 8006048:	e000      	b.n	800604c <HAL_UART_IRQHandler+0x514>
      return;
 800604a:	bf00      	nop
  }
}
 800604c:	37e8      	adds	r7, #232	; 0xe8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop

08006054 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	4613      	mov	r3, r2
 800608c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	88fa      	ldrh	r2, [r7, #6]
 8006098:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	88fa      	ldrh	r2, [r7, #6]
 800609e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2222      	movs	r2, #34	; 0x22
 80060aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695a      	ldr	r2, [r3, #20]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0201 	orr.w	r2, r2, #1
 80060dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0220 	orr.w	r2, r2, #32
 80060ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b095      	sub	sp, #84	; 0x54
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800611a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006124:	643a      	str	r2, [r7, #64]	; 0x40
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800612a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e5      	bne.n	8006104 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3314      	adds	r3, #20
 800613e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	61fb      	str	r3, [r7, #28]
   return(result);
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f023 0301 	bic.w	r3, r3, #1
 800614e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800615e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e5      	bne.n	8006138 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	2b01      	cmp	r3, #1
 8006172:	d119      	bne.n	80061a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	330c      	adds	r3, #12
 800617a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	60bb      	str	r3, [r7, #8]
   return(result);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f023 0310 	bic.w	r3, r3, #16
 800618a:	647b      	str	r3, [r7, #68]	; 0x44
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006194:	61ba      	str	r2, [r7, #24]
 8006196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6979      	ldr	r1, [r7, #20]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	613b      	str	r3, [r7, #16]
   return(result);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e5      	bne.n	8006174 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061b6:	bf00      	nop
 80061b8:	3754      	adds	r7, #84	; 0x54
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f7ff ff39 	bl	8006054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061e2:	bf00      	nop
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b21      	cmp	r3, #33	; 0x21
 80061fc:	d13e      	bne.n	800627c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006206:	d114      	bne.n	8006232 <UART_Transmit_IT+0x48>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d110      	bne.n	8006232 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006224:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	1c9a      	adds	r2, r3, #2
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	621a      	str	r2, [r3, #32]
 8006230:	e008      	b.n	8006244 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	1c59      	adds	r1, r3, #1
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6211      	str	r1, [r2, #32]
 800623c:	781a      	ldrb	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29b      	uxth	r3, r3
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	4619      	mov	r1, r3
 8006252:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10f      	bne.n	8006278 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006266:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006276:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	e000      	b.n	800627e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800627c:	2302      	movs	r3, #2
  }
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fb fe60 	bl	8001f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b08c      	sub	sp, #48	; 0x30
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b22      	cmp	r3, #34	; 0x22
 80062cc:	f040 80ab 	bne.w	8006426 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d8:	d117      	bne.n	800630a <UART_Receive_IT+0x50>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d113      	bne.n	800630a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006302:	1c9a      	adds	r2, r3, #2
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	629a      	str	r2, [r3, #40]	; 0x28
 8006308:	e026      	b.n	8006358 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006310:	2300      	movs	r3, #0
 8006312:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631c:	d007      	beq.n	800632e <UART_Receive_IT+0x74>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <UART_Receive_IT+0x82>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	b2da      	uxtb	r2, r3
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e008      	b.n	800634e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006348:	b2da      	uxtb	r2, r3
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29b      	uxth	r3, r3
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4619      	mov	r1, r3
 8006366:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006368:	2b00      	cmp	r3, #0
 800636a:	d15a      	bne.n	8006422 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0220 	bic.w	r2, r2, #32
 800637a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800638a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695a      	ldr	r2, [r3, #20]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0201 	bic.w	r2, r2, #1
 800639a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d135      	bne.n	8006418 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	330c      	adds	r3, #12
 80063b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	613b      	str	r3, [r7, #16]
   return(result);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f023 0310 	bic.w	r3, r3, #16
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	330c      	adds	r3, #12
 80063d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d2:	623a      	str	r2, [r7, #32]
 80063d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	69f9      	ldr	r1, [r7, #28]
 80063d8:	6a3a      	ldr	r2, [r7, #32]
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	61bb      	str	r3, [r7, #24]
   return(result);
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e5      	bne.n	80063b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0310 	and.w	r3, r3, #16
 80063f0:	2b10      	cmp	r3, #16
 80063f2:	d10a      	bne.n	800640a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff fe29 	bl	8006068 <HAL_UARTEx_RxEventCallback>
 8006416:	e002      	b.n	800641e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fb fcbd 	bl	8001d98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e002      	b.n	8006428 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e000      	b.n	8006428 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006426:	2302      	movs	r3, #2
  }
}
 8006428:	4618      	mov	r0, r3
 800642a:	3730      	adds	r7, #48	; 0x30
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006434:	b0c0      	sub	sp, #256	; 0x100
 8006436:	af00      	add	r7, sp, #0
 8006438:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800643c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644c:	68d9      	ldr	r1, [r3, #12]
 800644e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	ea40 0301 	orr.w	r3, r0, r1
 8006458:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800645a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	431a      	orrs	r2, r3
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	431a      	orrs	r2, r3
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006488:	f021 010c 	bic.w	r1, r1, #12
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006496:	430b      	orrs	r3, r1
 8006498:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800649a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064aa:	6999      	ldr	r1, [r3, #24]
 80064ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	ea40 0301 	orr.w	r3, r0, r1
 80064b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b8f      	ldr	r3, [pc, #572]	; (80066fc <UART_SetConfig+0x2cc>)
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d005      	beq.n	80064d0 <UART_SetConfig+0xa0>
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b8d      	ldr	r3, [pc, #564]	; (8006700 <UART_SetConfig+0x2d0>)
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d104      	bne.n	80064da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064d0:	f7ff fa5c 	bl	800598c <HAL_RCC_GetPCLK2Freq>
 80064d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064d8:	e003      	b.n	80064e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064da:	f7ff fa43 	bl	8005964 <HAL_RCC_GetPCLK1Freq>
 80064de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ec:	f040 810c 	bne.w	8006708 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006502:	4622      	mov	r2, r4
 8006504:	462b      	mov	r3, r5
 8006506:	1891      	adds	r1, r2, r2
 8006508:	65b9      	str	r1, [r7, #88]	; 0x58
 800650a:	415b      	adcs	r3, r3
 800650c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800650e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006512:	4621      	mov	r1, r4
 8006514:	eb12 0801 	adds.w	r8, r2, r1
 8006518:	4629      	mov	r1, r5
 800651a:	eb43 0901 	adc.w	r9, r3, r1
 800651e:	f04f 0200 	mov.w	r2, #0
 8006522:	f04f 0300 	mov.w	r3, #0
 8006526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800652a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800652e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006532:	4690      	mov	r8, r2
 8006534:	4699      	mov	r9, r3
 8006536:	4623      	mov	r3, r4
 8006538:	eb18 0303 	adds.w	r3, r8, r3
 800653c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006540:	462b      	mov	r3, r5
 8006542:	eb49 0303 	adc.w	r3, r9, r3
 8006546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800654a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006556:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800655a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800655e:	460b      	mov	r3, r1
 8006560:	18db      	adds	r3, r3, r3
 8006562:	653b      	str	r3, [r7, #80]	; 0x50
 8006564:	4613      	mov	r3, r2
 8006566:	eb42 0303 	adc.w	r3, r2, r3
 800656a:	657b      	str	r3, [r7, #84]	; 0x54
 800656c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006570:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006574:	f7fa fb90 	bl	8000c98 <__aeabi_uldivmod>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4b61      	ldr	r3, [pc, #388]	; (8006704 <UART_SetConfig+0x2d4>)
 800657e:	fba3 2302 	umull	r2, r3, r3, r2
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	011c      	lsls	r4, r3, #4
 8006586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800658a:	2200      	movs	r2, #0
 800658c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006590:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006594:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006598:	4642      	mov	r2, r8
 800659a:	464b      	mov	r3, r9
 800659c:	1891      	adds	r1, r2, r2
 800659e:	64b9      	str	r1, [r7, #72]	; 0x48
 80065a0:	415b      	adcs	r3, r3
 80065a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065a8:	4641      	mov	r1, r8
 80065aa:	eb12 0a01 	adds.w	sl, r2, r1
 80065ae:	4649      	mov	r1, r9
 80065b0:	eb43 0b01 	adc.w	fp, r3, r1
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065c8:	4692      	mov	sl, r2
 80065ca:	469b      	mov	fp, r3
 80065cc:	4643      	mov	r3, r8
 80065ce:	eb1a 0303 	adds.w	r3, sl, r3
 80065d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065d6:	464b      	mov	r3, r9
 80065d8:	eb4b 0303 	adc.w	r3, fp, r3
 80065dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065f4:	460b      	mov	r3, r1
 80065f6:	18db      	adds	r3, r3, r3
 80065f8:	643b      	str	r3, [r7, #64]	; 0x40
 80065fa:	4613      	mov	r3, r2
 80065fc:	eb42 0303 	adc.w	r3, r2, r3
 8006600:	647b      	str	r3, [r7, #68]	; 0x44
 8006602:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006606:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800660a:	f7fa fb45 	bl	8000c98 <__aeabi_uldivmod>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4611      	mov	r1, r2
 8006614:	4b3b      	ldr	r3, [pc, #236]	; (8006704 <UART_SetConfig+0x2d4>)
 8006616:	fba3 2301 	umull	r2, r3, r3, r1
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	2264      	movs	r2, #100	; 0x64
 800661e:	fb02 f303 	mul.w	r3, r2, r3
 8006622:	1acb      	subs	r3, r1, r3
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800662a:	4b36      	ldr	r3, [pc, #216]	; (8006704 <UART_SetConfig+0x2d4>)
 800662c:	fba3 2302 	umull	r2, r3, r3, r2
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006638:	441c      	add	r4, r3
 800663a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800663e:	2200      	movs	r2, #0
 8006640:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006644:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006648:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800664c:	4642      	mov	r2, r8
 800664e:	464b      	mov	r3, r9
 8006650:	1891      	adds	r1, r2, r2
 8006652:	63b9      	str	r1, [r7, #56]	; 0x38
 8006654:	415b      	adcs	r3, r3
 8006656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006658:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800665c:	4641      	mov	r1, r8
 800665e:	1851      	adds	r1, r2, r1
 8006660:	6339      	str	r1, [r7, #48]	; 0x30
 8006662:	4649      	mov	r1, r9
 8006664:	414b      	adcs	r3, r1
 8006666:	637b      	str	r3, [r7, #52]	; 0x34
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006674:	4659      	mov	r1, fp
 8006676:	00cb      	lsls	r3, r1, #3
 8006678:	4651      	mov	r1, sl
 800667a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800667e:	4651      	mov	r1, sl
 8006680:	00ca      	lsls	r2, r1, #3
 8006682:	4610      	mov	r0, r2
 8006684:	4619      	mov	r1, r3
 8006686:	4603      	mov	r3, r0
 8006688:	4642      	mov	r2, r8
 800668a:	189b      	adds	r3, r3, r2
 800668c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006690:	464b      	mov	r3, r9
 8006692:	460a      	mov	r2, r1
 8006694:	eb42 0303 	adc.w	r3, r2, r3
 8006698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066b0:	460b      	mov	r3, r1
 80066b2:	18db      	adds	r3, r3, r3
 80066b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b6:	4613      	mov	r3, r2
 80066b8:	eb42 0303 	adc.w	r3, r2, r3
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066c6:	f7fa fae7 	bl	8000c98 <__aeabi_uldivmod>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <UART_SetConfig+0x2d4>)
 80066d0:	fba3 1302 	umull	r1, r3, r3, r2
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	2164      	movs	r1, #100	; 0x64
 80066d8:	fb01 f303 	mul.w	r3, r1, r3
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	3332      	adds	r3, #50	; 0x32
 80066e2:	4a08      	ldr	r2, [pc, #32]	; (8006704 <UART_SetConfig+0x2d4>)
 80066e4:	fba2 2303 	umull	r2, r3, r2, r3
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	f003 0207 	and.w	r2, r3, #7
 80066ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4422      	add	r2, r4
 80066f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066f8:	e105      	b.n	8006906 <UART_SetConfig+0x4d6>
 80066fa:	bf00      	nop
 80066fc:	40011000 	.word	0x40011000
 8006700:	40011400 	.word	0x40011400
 8006704:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800670c:	2200      	movs	r2, #0
 800670e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006712:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006716:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800671a:	4642      	mov	r2, r8
 800671c:	464b      	mov	r3, r9
 800671e:	1891      	adds	r1, r2, r2
 8006720:	6239      	str	r1, [r7, #32]
 8006722:	415b      	adcs	r3, r3
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
 8006726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800672a:	4641      	mov	r1, r8
 800672c:	1854      	adds	r4, r2, r1
 800672e:	4649      	mov	r1, r9
 8006730:	eb43 0501 	adc.w	r5, r3, r1
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	00eb      	lsls	r3, r5, #3
 800673e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006742:	00e2      	lsls	r2, r4, #3
 8006744:	4614      	mov	r4, r2
 8006746:	461d      	mov	r5, r3
 8006748:	4643      	mov	r3, r8
 800674a:	18e3      	adds	r3, r4, r3
 800674c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006750:	464b      	mov	r3, r9
 8006752:	eb45 0303 	adc.w	r3, r5, r3
 8006756:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800675a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006766:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006776:	4629      	mov	r1, r5
 8006778:	008b      	lsls	r3, r1, #2
 800677a:	4621      	mov	r1, r4
 800677c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006780:	4621      	mov	r1, r4
 8006782:	008a      	lsls	r2, r1, #2
 8006784:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006788:	f7fa fa86 	bl	8000c98 <__aeabi_uldivmod>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4b60      	ldr	r3, [pc, #384]	; (8006914 <UART_SetConfig+0x4e4>)
 8006792:	fba3 2302 	umull	r2, r3, r3, r2
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	011c      	lsls	r4, r3, #4
 800679a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067ac:	4642      	mov	r2, r8
 80067ae:	464b      	mov	r3, r9
 80067b0:	1891      	adds	r1, r2, r2
 80067b2:	61b9      	str	r1, [r7, #24]
 80067b4:	415b      	adcs	r3, r3
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067bc:	4641      	mov	r1, r8
 80067be:	1851      	adds	r1, r2, r1
 80067c0:	6139      	str	r1, [r7, #16]
 80067c2:	4649      	mov	r1, r9
 80067c4:	414b      	adcs	r3, r1
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	f04f 0200 	mov.w	r2, #0
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067d4:	4659      	mov	r1, fp
 80067d6:	00cb      	lsls	r3, r1, #3
 80067d8:	4651      	mov	r1, sl
 80067da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067de:	4651      	mov	r1, sl
 80067e0:	00ca      	lsls	r2, r1, #3
 80067e2:	4610      	mov	r0, r2
 80067e4:	4619      	mov	r1, r3
 80067e6:	4603      	mov	r3, r0
 80067e8:	4642      	mov	r2, r8
 80067ea:	189b      	adds	r3, r3, r2
 80067ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067f0:	464b      	mov	r3, r9
 80067f2:	460a      	mov	r2, r1
 80067f4:	eb42 0303 	adc.w	r3, r2, r3
 80067f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	67bb      	str	r3, [r7, #120]	; 0x78
 8006806:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006814:	4649      	mov	r1, r9
 8006816:	008b      	lsls	r3, r1, #2
 8006818:	4641      	mov	r1, r8
 800681a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800681e:	4641      	mov	r1, r8
 8006820:	008a      	lsls	r2, r1, #2
 8006822:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006826:	f7fa fa37 	bl	8000c98 <__aeabi_uldivmod>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4b39      	ldr	r3, [pc, #228]	; (8006914 <UART_SetConfig+0x4e4>)
 8006830:	fba3 1302 	umull	r1, r3, r3, r2
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	2164      	movs	r1, #100	; 0x64
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	3332      	adds	r3, #50	; 0x32
 8006842:	4a34      	ldr	r2, [pc, #208]	; (8006914 <UART_SetConfig+0x4e4>)
 8006844:	fba2 2303 	umull	r2, r3, r2, r3
 8006848:	095b      	lsrs	r3, r3, #5
 800684a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800684e:	441c      	add	r4, r3
 8006850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006854:	2200      	movs	r2, #0
 8006856:	673b      	str	r3, [r7, #112]	; 0x70
 8006858:	677a      	str	r2, [r7, #116]	; 0x74
 800685a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800685e:	4642      	mov	r2, r8
 8006860:	464b      	mov	r3, r9
 8006862:	1891      	adds	r1, r2, r2
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	415b      	adcs	r3, r3
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800686e:	4641      	mov	r1, r8
 8006870:	1851      	adds	r1, r2, r1
 8006872:	6039      	str	r1, [r7, #0]
 8006874:	4649      	mov	r1, r9
 8006876:	414b      	adcs	r3, r1
 8006878:	607b      	str	r3, [r7, #4]
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006886:	4659      	mov	r1, fp
 8006888:	00cb      	lsls	r3, r1, #3
 800688a:	4651      	mov	r1, sl
 800688c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006890:	4651      	mov	r1, sl
 8006892:	00ca      	lsls	r2, r1, #3
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	4603      	mov	r3, r0
 800689a:	4642      	mov	r2, r8
 800689c:	189b      	adds	r3, r3, r2
 800689e:	66bb      	str	r3, [r7, #104]	; 0x68
 80068a0:	464b      	mov	r3, r9
 80068a2:	460a      	mov	r2, r1
 80068a4:	eb42 0303 	adc.w	r3, r2, r3
 80068a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	663b      	str	r3, [r7, #96]	; 0x60
 80068b4:	667a      	str	r2, [r7, #100]	; 0x64
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	f04f 0300 	mov.w	r3, #0
 80068be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068c2:	4649      	mov	r1, r9
 80068c4:	008b      	lsls	r3, r1, #2
 80068c6:	4641      	mov	r1, r8
 80068c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068cc:	4641      	mov	r1, r8
 80068ce:	008a      	lsls	r2, r1, #2
 80068d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068d4:	f7fa f9e0 	bl	8000c98 <__aeabi_uldivmod>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <UART_SetConfig+0x4e4>)
 80068de:	fba3 1302 	umull	r1, r3, r3, r2
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	2164      	movs	r1, #100	; 0x64
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	3332      	adds	r3, #50	; 0x32
 80068f0:	4a08      	ldr	r2, [pc, #32]	; (8006914 <UART_SetConfig+0x4e4>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	f003 020f 	and.w	r2, r3, #15
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4422      	add	r2, r4
 8006904:	609a      	str	r2, [r3, #8]
}
 8006906:	bf00      	nop
 8006908:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800690c:	46bd      	mov	sp, r7
 800690e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006912:	bf00      	nop
 8006914:	51eb851f 	.word	0x51eb851f

08006918 <__NVIC_SetPriority>:
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	6039      	str	r1, [r7, #0]
 8006922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006928:	2b00      	cmp	r3, #0
 800692a:	db0a      	blt.n	8006942 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	b2da      	uxtb	r2, r3
 8006930:	490c      	ldr	r1, [pc, #48]	; (8006964 <__NVIC_SetPriority+0x4c>)
 8006932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006936:	0112      	lsls	r2, r2, #4
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	440b      	add	r3, r1
 800693c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006940:	e00a      	b.n	8006958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	4908      	ldr	r1, [pc, #32]	; (8006968 <__NVIC_SetPriority+0x50>)
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	3b04      	subs	r3, #4
 8006950:	0112      	lsls	r2, r2, #4
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	440b      	add	r3, r1
 8006956:	761a      	strb	r2, [r3, #24]
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	e000e100 	.word	0xe000e100
 8006968:	e000ed00 	.word	0xe000ed00

0800696c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006970:	2100      	movs	r1, #0
 8006972:	f06f 0004 	mvn.w	r0, #4
 8006976:	f7ff ffcf 	bl	8006918 <__NVIC_SetPriority>
#endif
}
 800697a:	bf00      	nop
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006986:	f3ef 8305 	mrs	r3, IPSR
 800698a:	603b      	str	r3, [r7, #0]
  return(result);
 800698c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006992:	f06f 0305 	mvn.w	r3, #5
 8006996:	607b      	str	r3, [r7, #4]
 8006998:	e00c      	b.n	80069b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <osKernelInitialize+0x44>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d105      	bne.n	80069ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069a2:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <osKernelInitialize+0x44>)
 80069a4:	2201      	movs	r2, #1
 80069a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	607b      	str	r3, [r7, #4]
 80069ac:	e002      	b.n	80069b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80069ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069b4:	687b      	ldr	r3, [r7, #4]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	200007f4 	.word	0x200007f4

080069c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ce:	f3ef 8305 	mrs	r3, IPSR
 80069d2:	603b      	str	r3, [r7, #0]
  return(result);
 80069d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80069da:	f06f 0305 	mvn.w	r3, #5
 80069de:	607b      	str	r3, [r7, #4]
 80069e0:	e010      	b.n	8006a04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <osKernelStart+0x48>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d109      	bne.n	80069fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80069ea:	f7ff ffbf 	bl	800696c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80069ee:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <osKernelStart+0x48>)
 80069f0:	2202      	movs	r2, #2
 80069f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80069f4:	f002 fa34 	bl	8008e60 <vTaskStartScheduler>
      stat = osOK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	607b      	str	r3, [r7, #4]
 80069fc:	e002      	b.n	8006a04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80069fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a04:	687b      	ldr	r3, [r7, #4]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	200007f4 	.word	0x200007f4

08006a14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08e      	sub	sp, #56	; 0x38
 8006a18:	af04      	add	r7, sp, #16
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a24:	f3ef 8305 	mrs	r3, IPSR
 8006a28:	617b      	str	r3, [r7, #20]
  return(result);
 8006a2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d17e      	bne.n	8006b2e <osThreadNew+0x11a>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d07b      	beq.n	8006b2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a36:	2380      	movs	r3, #128	; 0x80
 8006a38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a3a:	2318      	movs	r3, #24
 8006a3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d045      	beq.n	8006ada <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <osThreadNew+0x48>
        name = attr->name;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d008      	beq.n	8006a82 <osThreadNew+0x6e>
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	2b38      	cmp	r3, #56	; 0x38
 8006a74:	d805      	bhi.n	8006a82 <osThreadNew+0x6e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <osThreadNew+0x72>
        return (NULL);
 8006a82:	2300      	movs	r3, #0
 8006a84:	e054      	b.n	8006b30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	089b      	lsrs	r3, r3, #2
 8006a94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00e      	beq.n	8006abc <osThreadNew+0xa8>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	2b5b      	cmp	r3, #91	; 0x5b
 8006aa4:	d90a      	bls.n	8006abc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d006      	beq.n	8006abc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <osThreadNew+0xa8>
        mem = 1;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	e010      	b.n	8006ade <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10c      	bne.n	8006ade <osThreadNew+0xca>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d108      	bne.n	8006ade <osThreadNew+0xca>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <osThreadNew+0xca>
          mem = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	e001      	b.n	8006ade <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d110      	bne.n	8006b06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006aec:	9202      	str	r2, [sp, #8]
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	6a3a      	ldr	r2, [r7, #32]
 8006af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f001 ffda 	bl	8008ab4 <xTaskCreateStatic>
 8006b00:	4603      	mov	r3, r0
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	e013      	b.n	8006b2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d110      	bne.n	8006b2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	f107 0310 	add.w	r3, r7, #16
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f002 f825 	bl	8008b6e <xTaskCreate>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d001      	beq.n	8006b2e <osThreadNew+0x11a>
            hTask = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b2e:	693b      	ldr	r3, [r7, #16]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3728      	adds	r7, #40	; 0x28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b40:	f3ef 8305 	mrs	r3, IPSR
 8006b44:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <osDelay+0x1c>
    stat = osErrorISR;
 8006b4c:	f06f 0305 	mvn.w	r3, #5
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	e007      	b.n	8006b64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f002 f94a 	bl	8008df8 <vTaskDelay>
    }
  }

  return (stat);
 8006b64:	68fb      	ldr	r3, [r7, #12]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b7a:	f3ef 8305 	mrs	r3, IPSR
 8006b7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b80:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d12d      	bne.n	8006be2 <osEventFlagsNew+0x74>
    mem = -1;
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b8a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d015      	beq.n	8006bbe <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d006      	beq.n	8006ba8 <osEventFlagsNew+0x3a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b1f      	cmp	r3, #31
 8006ba0:	d902      	bls.n	8006ba8 <osEventFlagsNew+0x3a>
        mem = 1;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	613b      	str	r3, [r7, #16]
 8006ba6:	e00c      	b.n	8006bc2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d108      	bne.n	8006bc2 <osEventFlagsNew+0x54>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <osEventFlagsNew+0x54>
          mem = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	e001      	b.n	8006bc2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d106      	bne.n	8006bd6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fa6f 	bl	80070b0 <xEventGroupCreateStatic>
 8006bd2:	6178      	str	r0, [r7, #20]
 8006bd4:	e005      	b.n	8006be2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d102      	bne.n	8006be2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8006bdc:	f000 fa9f 	bl	800711e <xEventGroupCreate>
 8006be0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006be2:	697b      	ldr	r3, [r7, #20]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d004      	beq.n	8006c0a <osEventFlagsSet+0x1e>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006c0a:	f06f 0303 	mvn.w	r3, #3
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	e028      	b.n	8006c64 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c12:	f3ef 8305 	mrs	r3, IPSR
 8006c16:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c18:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01d      	beq.n	8006c5a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006c22:	f107 0308 	add.w	r3, r7, #8
 8006c26:	461a      	mov	r2, r3
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6938      	ldr	r0, [r7, #16]
 8006c2c:	f000 fc98 	bl	8007560 <xEventGroupSetBitsFromISR>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8006c36:	f06f 0302 	mvn.w	r3, #2
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	e012      	b.n	8006c64 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00d      	beq.n	8006c64 <osEventFlagsSet+0x78>
 8006c48:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <osEventFlagsSet+0x84>)
 8006c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	e004      	b.n	8006c64 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6938      	ldr	r0, [r7, #16]
 8006c5e:	f000 fbb7 	bl	80073d0 <xEventGroupSetBits>
 8006c62:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8006c64:	697b      	ldr	r3, [r7, #20]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <osEventFlagsClear+0x1e>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006c92:	f06f 0303 	mvn.w	r3, #3
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e019      	b.n	8006cce <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c9a:	f3ef 8305 	mrs	r3, IPSR
 8006c9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8006ca6:	6938      	ldr	r0, [r7, #16]
 8006ca8:	f000 fb6e 	bl	8007388 <xEventGroupGetBitsFromISR>
 8006cac:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6938      	ldr	r0, [r7, #16]
 8006cb2:	f000 fb55 	bl	8007360 <xEventGroupClearBitsFromISR>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d108      	bne.n	8006cce <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8006cbc:	f06f 0302 	mvn.w	r3, #2
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	e004      	b.n	8006cce <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6938      	ldr	r0, [r7, #16]
 8006cc8:	f000 fb12 	bl	80072f0 <xEventGroupClearBits>
 8006ccc:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8006cce:	697b      	ldr	r3, [r7, #20]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d102      	bne.n	8006cf0 <osEventFlagsGet+0x18>
    rflags = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e00f      	b.n	8006d10 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cf0:	f3ef 8305 	mrs	r3, IPSR
 8006cf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d004      	beq.n	8006d06 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8006cfc:	6938      	ldr	r0, [r7, #16]
 8006cfe:	f000 fb43 	bl	8007388 <xEventGroupGetBitsFromISR>
 8006d02:	6178      	str	r0, [r7, #20]
 8006d04:	e004      	b.n	8006d10 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8006d06:	2100      	movs	r1, #0
 8006d08:	6938      	ldr	r0, [r7, #16]
 8006d0a:	f000 faf1 	bl	80072f0 <xEventGroupClearBits>
 8006d0e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8006d10:	697b      	ldr	r3, [r7, #20]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b08c      	sub	sp, #48	; 0x30
 8006d1e:	af02      	add	r7, sp, #8
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
 8006d26:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d004      	beq.n	8006d3c <osEventFlagsWait+0x22>
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8006d3c:	f06f 0303 	mvn.w	r3, #3
 8006d40:	61fb      	str	r3, [r7, #28]
 8006d42:	e04b      	b.n	8006ddc <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d44:	f3ef 8305 	mrs	r3, IPSR
 8006d48:	617b      	str	r3, [r7, #20]
  return(result);
 8006d4a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8006d50:	f06f 0305 	mvn.w	r3, #5
 8006d54:	61fb      	str	r3, [r7, #28]
 8006d56:	e041      	b.n	8006ddc <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
 8006d66:	e001      	b.n	8006d6c <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	623b      	str	r3, [r7, #32]
 8006d7a:	e001      	b.n	8006d80 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	6a3a      	ldr	r2, [r7, #32]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	69b8      	ldr	r0, [r7, #24]
 8006d8c:	f000 f9e2 	bl	8007154 <xEventGroupWaitBits>
 8006d90:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4013      	ands	r3, r2
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d019      	beq.n	8006ddc <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8006dae:	f06f 0301 	mvn.w	r3, #1
 8006db2:	61fb      	str	r3, [r7, #28]
 8006db4:	e012      	b.n	8006ddc <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006db6:	f06f 0302 	mvn.w	r3, #2
 8006dba:	61fb      	str	r3, [r7, #28]
 8006dbc:	e00e      	b.n	8006ddc <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d109      	bne.n	8006ddc <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8006dce:	f06f 0301 	mvn.w	r3, #1
 8006dd2:	61fb      	str	r3, [r7, #28]
 8006dd4:	e002      	b.n	8006ddc <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006dd6:	f06f 0302 	mvn.w	r3, #2
 8006dda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8006ddc:	69fb      	ldr	r3, [r7, #28]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3728      	adds	r7, #40	; 0x28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b08a      	sub	sp, #40	; 0x28
 8006dea:	af02      	add	r7, sp, #8
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df6:	f3ef 8305 	mrs	r3, IPSR
 8006dfa:	613b      	str	r3, [r7, #16]
  return(result);
 8006dfc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d15f      	bne.n	8006ec2 <osMessageQueueNew+0xdc>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d05c      	beq.n	8006ec2 <osMessageQueueNew+0xdc>
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d059      	beq.n	8006ec2 <osMessageQueueNew+0xdc>
    mem = -1;
 8006e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d029      	beq.n	8006e6e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d012      	beq.n	8006e48 <osMessageQueueNew+0x62>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	2b4f      	cmp	r3, #79	; 0x4f
 8006e28:	d90e      	bls.n	8006e48 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00a      	beq.n	8006e48 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	fb01 f303 	mul.w	r3, r1, r3
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d302      	bcc.n	8006e48 <osMessageQueueNew+0x62>
        mem = 1;
 8006e42:	2301      	movs	r3, #1
 8006e44:	61bb      	str	r3, [r7, #24]
 8006e46:	e014      	b.n	8006e72 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d110      	bne.n	8006e72 <osMessageQueueNew+0x8c>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10c      	bne.n	8006e72 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d108      	bne.n	8006e72 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d104      	bne.n	8006e72 <osMessageQueueNew+0x8c>
          mem = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61bb      	str	r3, [r7, #24]
 8006e6c:	e001      	b.n	8006e72 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d10b      	bne.n	8006e90 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2100      	movs	r1, #0
 8006e82:	9100      	str	r1, [sp, #0]
 8006e84:	68b9      	ldr	r1, [r7, #8]
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f001 f8d6 	bl	8008038 <xQueueGenericCreateStatic>
 8006e8c:	61f8      	str	r0, [r7, #28]
 8006e8e:	e008      	b.n	8006ea2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d105      	bne.n	8006ea2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006e96:	2200      	movs	r2, #0
 8006e98:	68b9      	ldr	r1, [r7, #8]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f001 f944 	bl	8008128 <xQueueGenericCreate>
 8006ea0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00c      	beq.n	8006ec2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e001      	b.n	8006eba <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006eba:	6979      	ldr	r1, [r7, #20]
 8006ebc:	69f8      	ldr	r0, [r7, #28]
 8006ebe:	f001 fd9b 	bl	80089f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006ec2:	69fb      	ldr	r3, [r7, #28]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3720      	adds	r7, #32
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ee4:	f3ef 8305 	mrs	r3, IPSR
 8006ee8:	617b      	str	r3, [r7, #20]
  return(result);
 8006eea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d028      	beq.n	8006f42 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <osMessageQueuePut+0x36>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <osMessageQueuePut+0x36>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006f02:	f06f 0303 	mvn.w	r3, #3
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	e038      	b.n	8006f7c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006f0e:	f107 0210 	add.w	r2, r7, #16
 8006f12:	2300      	movs	r3, #0
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	69b8      	ldr	r0, [r7, #24]
 8006f18:	f001 fa62 	bl	80083e0 <xQueueGenericSendFromISR>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d003      	beq.n	8006f2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006f22:	f06f 0302 	mvn.w	r3, #2
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	e028      	b.n	8006f7c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d025      	beq.n	8006f7c <osMessageQueuePut+0xb0>
 8006f30:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <osMessageQueuePut+0xbc>)
 8006f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	e01c      	b.n	8006f7c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <osMessageQueuePut+0x82>
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d103      	bne.n	8006f56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006f4e:	f06f 0303 	mvn.w	r3, #3
 8006f52:	61fb      	str	r3, [r7, #28]
 8006f54:	e012      	b.n	8006f7c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f56:	2300      	movs	r3, #0
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	68b9      	ldr	r1, [r7, #8]
 8006f5c:	69b8      	ldr	r0, [r7, #24]
 8006f5e:	f001 f941 	bl	80081e4 <xQueueGenericSend>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d009      	beq.n	8006f7c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006f6e:	f06f 0301 	mvn.w	r3, #1
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	e002      	b.n	8006f7c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006f76:	f06f 0302 	mvn.w	r3, #2
 8006f7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006f7c:	69fb      	ldr	r3, [r7, #28]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3720      	adds	r7, #32
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fa2:	f3ef 8305 	mrs	r3, IPSR
 8006fa6:	617b      	str	r3, [r7, #20]
  return(result);
 8006fa8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d028      	beq.n	8007000 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <osMessageQueueGet+0x34>
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <osMessageQueueGet+0x34>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006fc0:	f06f 0303 	mvn.w	r3, #3
 8006fc4:	61fb      	str	r3, [r7, #28]
 8006fc6:	e037      	b.n	8007038 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006fcc:	f107 0310 	add.w	r3, r7, #16
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	69b8      	ldr	r0, [r7, #24]
 8006fd6:	f001 fb7f 	bl	80086d8 <xQueueReceiveFromISR>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d003      	beq.n	8006fe8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006fe0:	f06f 0302 	mvn.w	r3, #2
 8006fe4:	61fb      	str	r3, [r7, #28]
 8006fe6:	e027      	b.n	8007038 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d024      	beq.n	8007038 <osMessageQueueGet+0xac>
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <osMessageQueueGet+0xb8>)
 8006ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	e01b      	b.n	8007038 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <osMessageQueueGet+0x80>
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800700c:	f06f 0303 	mvn.w	r3, #3
 8007010:	61fb      	str	r3, [r7, #28]
 8007012:	e011      	b.n	8007038 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	68b9      	ldr	r1, [r7, #8]
 8007018:	69b8      	ldr	r0, [r7, #24]
 800701a:	f001 fa7d 	bl	8008518 <xQueueReceive>
 800701e:	4603      	mov	r3, r0
 8007020:	2b01      	cmp	r3, #1
 8007022:	d009      	beq.n	8007038 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800702a:	f06f 0301 	mvn.w	r3, #1
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	e002      	b.n	8007038 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007032:	f06f 0302 	mvn.w	r3, #2
 8007036:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007038:	69fb      	ldr	r3, [r7, #28]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3720      	adds	r7, #32
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4a07      	ldr	r2, [pc, #28]	; (8007074 <vApplicationGetIdleTaskMemory+0x2c>)
 8007058:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	4a06      	ldr	r2, [pc, #24]	; (8007078 <vApplicationGetIdleTaskMemory+0x30>)
 800705e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2280      	movs	r2, #128	; 0x80
 8007064:	601a      	str	r2, [r3, #0]
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	200007f8 	.word	0x200007f8
 8007078:	20000854 	.word	0x20000854

0800707c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4a07      	ldr	r2, [pc, #28]	; (80070a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800708c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	4a06      	ldr	r2, [pc, #24]	; (80070ac <vApplicationGetTimerTaskMemory+0x30>)
 8007092:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800709a:	601a      	str	r2, [r3, #0]
}
 800709c:	bf00      	nop
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	20000a54 	.word	0x20000a54
 80070ac:	20000ab0 	.word	0x20000ab0

080070b0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80070d4:	2320      	movs	r3, #32
 80070d6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d00a      	beq.n	80070f4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	60fb      	str	r3, [r7, #12]
}
 80070f0:	bf00      	nop
 80070f2:	e7fe      	b.n	80070f2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	3304      	adds	r3, #4
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fc27 	bl	800795c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2201      	movs	r2, #1
 8007112:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8007114:	697b      	ldr	r3, [r7, #20]
	}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007124:	2020      	movs	r0, #32
 8007126:	f000 fa2f 	bl	8007588 <pvPortMalloc>
 800712a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3304      	adds	r3, #4
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fc0d 	bl	800795c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007148:	687b      	ldr	r3, [r7, #4]
	}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b090      	sub	sp, #64	; 0x40
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800716a:	2300      	movs	r3, #0
 800716c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <xEventGroupWaitBits+0x36>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	623b      	str	r3, [r7, #32]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <xEventGroupWaitBits+0x56>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	61fb      	str	r3, [r7, #28]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10a      	bne.n	80071c6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	61bb      	str	r3, [r7, #24]
}
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071c6:	f002 fb31 	bl	800982c <xTaskGetSchedulerState>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <xEventGroupWaitBits+0x82>
 80071d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <xEventGroupWaitBits+0x86>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <xEventGroupWaitBits+0x88>
 80071da:	2300      	movs	r3, #0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	617b      	str	r3, [r7, #20]
}
 80071f2:	bf00      	nop
 80071f4:	e7fe      	b.n	80071f4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80071f6:	f001 fe99 	bl	8008f2c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80071fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007206:	f000 f988 	bl	800751a <prvTestWaitCondition>
 800720a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00e      	beq.n	8007230 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007216:	2300      	movs	r3, #0
 8007218:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d028      	beq.n	8007272 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	43db      	mvns	r3, r3
 8007228:	401a      	ands	r2, r3
 800722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	e020      	b.n	8007272 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007232:	2b00      	cmp	r3, #0
 8007234:	d104      	bne.n	8007240 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800723a:	2301      	movs	r3, #1
 800723c:	633b      	str	r3, [r7, #48]	; 0x30
 800723e:	e018      	b.n	8007272 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800724c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800725a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800725c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725e:	1d18      	adds	r0, r3, #4
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	4313      	orrs	r3, r2
 8007266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007268:	4619      	mov	r1, r3
 800726a:	f002 f857 	bl	800931c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007272:	f001 fe69 	bl	8008f48 <xTaskResumeAll>
 8007276:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800727a:	2b00      	cmp	r3, #0
 800727c:	d031      	beq.n	80072e2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	d107      	bne.n	8007294 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8007284:	4b19      	ldr	r3, [pc, #100]	; (80072ec <xEventGroupWaitBits+0x198>)
 8007286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007294:	f002 fb56 	bl	8009944 <uxTaskResetEventItemValue>
 8007298:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800729a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d11a      	bne.n	80072da <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80072a4:	f000 fd3e 	bl	8007d24 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80072a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072b4:	f000 f931 	bl	800751a <prvTestWaitCondition>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d006      	beq.n	80072d2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80072c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	43db      	mvns	r3, r3
 80072cc:	401a      	ands	r2, r3
 80072ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80072d2:	2301      	movs	r3, #1
 80072d4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80072d6:	f000 fd55 	bl	8007d84 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80072da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80072e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3740      	adds	r7, #64	; 0x40
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	e000ed04 	.word	0xe000ed04

080072f0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <xEventGroupClearBits+0x2a>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	60fb      	str	r3, [r7, #12]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <xEventGroupClearBits+0x4a>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	60bb      	str	r3, [r7, #8]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800733a:	f000 fcf3 	bl	8007d24 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	43db      	mvns	r3, r3
 800734c:	401a      	ands	r2, r3
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007352:	f000 fd17 	bl	8007d84 <vPortExitCritical>

	return uxReturn;
 8007356:	693b      	ldr	r3, [r7, #16]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800736a:	2300      	movs	r3, #0
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	4804      	ldr	r0, [pc, #16]	; (8007384 <xEventGroupClearBitsFromISR+0x24>)
 8007372:	f002 fea1 	bl	800a0b8 <xTimerPendFunctionCallFromISR>
 8007376:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8007378:	68fb      	ldr	r3, [r7, #12]
	}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	08007501 	.word	0x08007501

08007388 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8007388:	b480      	push	{r7}
 800738a:	b089      	sub	sp, #36	; 0x24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007394:	f3ef 8211 	mrs	r2, BASEPRI
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	60fa      	str	r2, [r7, #12]
 80073aa:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073ac:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073ae:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073c0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80073c2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80073c4:	4618      	mov	r0, r3
 80073c6:	3724      	adds	r7, #36	; 0x24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08e      	sub	sp, #56	; 0x38
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80073da:	2300      	movs	r3, #0
 80073dc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <xEventGroupSetBits+0x32>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	613b      	str	r3, [r7, #16]
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <xEventGroupSetBits+0x52>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	60fb      	str	r3, [r7, #12]
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	3304      	adds	r3, #4
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	3308      	adds	r3, #8
 800742c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800742e:	f001 fd7d 	bl	8008f2c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	431a      	orrs	r2, r3
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007444:	e03c      	b.n	80074c0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007452:	2300      	movs	r3, #0
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800745c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007464:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d108      	bne.n	8007482 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	4013      	ands	r3, r2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00b      	beq.n	8007494 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800747c:	2301      	movs	r3, #1
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007480:	e008      	b.n	8007494 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	4013      	ands	r3, r2
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	429a      	cmp	r2, r3
 800748e:	d101      	bne.n	8007494 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007490:	2301      	movs	r3, #1
 8007492:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d010      	beq.n	80074bc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80074a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074b4:	4619      	mov	r1, r3
 80074b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80074b8:	f001 fffc 	bl	80094b4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80074c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d1be      	bne.n	8007446 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	43db      	mvns	r3, r3
 80074d0:	401a      	ands	r2, r3
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80074d6:	f001 fd37 	bl	8008f48 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	681b      	ldr	r3, [r3, #0]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3738      	adds	r7, #56	; 0x38
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff ff6c 	bl	80073d0 <xEventGroupSetBits>
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff feef 	bl	80072f0 <xEventGroupClearBits>
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800751a:	b480      	push	{r7}
 800751c:	b087      	sub	sp, #28
 800751e:	af00      	add	r7, sp, #0
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d107      	bne.n	8007540 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4013      	ands	r3, r2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800753a:	2301      	movs	r3, #1
 800753c:	617b      	str	r3, [r7, #20]
 800753e:	e007      	b.n	8007550 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4013      	ands	r3, r2
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	429a      	cmp	r2, r3
 800754a:	d101      	bne.n	8007550 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800754c:	2301      	movs	r3, #1
 800754e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007550:	697b      	ldr	r3, [r7, #20]
}
 8007552:	4618      	mov	r0, r3
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
	...

08007560 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	68f9      	ldr	r1, [r7, #12]
 8007572:	4804      	ldr	r0, [pc, #16]	; (8007584 <xEventGroupSetBitsFromISR+0x24>)
 8007574:	f002 fda0 	bl	800a0b8 <xTimerPendFunctionCallFromISR>
 8007578:	6178      	str	r0, [r7, #20]

		return xReturn;
 800757a:	697b      	ldr	r3, [r7, #20]
	}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	080074e7 	.word	0x080074e7

08007588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	; 0x28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007594:	f001 fcca 	bl	8008f2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007598:	4b5b      	ldr	r3, [pc, #364]	; (8007708 <pvPortMalloc+0x180>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075a0:	f000 f920 	bl	80077e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075a4:	4b59      	ldr	r3, [pc, #356]	; (800770c <pvPortMalloc+0x184>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f040 8093 	bne.w	80076d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d01d      	beq.n	80075f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075b8:	2208      	movs	r2, #8
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d014      	beq.n	80075f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f023 0307 	bic.w	r3, r3, #7
 80075d0:	3308      	adds	r3, #8
 80075d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <pvPortMalloc+0x6c>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	617b      	str	r3, [r7, #20]
}
 80075f0:	bf00      	nop
 80075f2:	e7fe      	b.n	80075f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d06e      	beq.n	80076d8 <pvPortMalloc+0x150>
 80075fa:	4b45      	ldr	r3, [pc, #276]	; (8007710 <pvPortMalloc+0x188>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	429a      	cmp	r2, r3
 8007602:	d869      	bhi.n	80076d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007604:	4b43      	ldr	r3, [pc, #268]	; (8007714 <pvPortMalloc+0x18c>)
 8007606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007608:	4b42      	ldr	r3, [pc, #264]	; (8007714 <pvPortMalloc+0x18c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800760e:	e004      	b.n	800761a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d903      	bls.n	800762c <pvPortMalloc+0xa4>
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f1      	bne.n	8007610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800762c:	4b36      	ldr	r3, [pc, #216]	; (8007708 <pvPortMalloc+0x180>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007632:	429a      	cmp	r2, r3
 8007634:	d050      	beq.n	80076d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2208      	movs	r2, #8
 800763c:	4413      	add	r3, r2
 800763e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	2308      	movs	r3, #8
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	429a      	cmp	r2, r3
 8007656:	d91f      	bls.n	8007698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <pvPortMalloc+0xf8>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	613b      	str	r3, [r7, #16]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007692:	69b8      	ldr	r0, [r7, #24]
 8007694:	f000 f908 	bl	80078a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007698:	4b1d      	ldr	r3, [pc, #116]	; (8007710 <pvPortMalloc+0x188>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <pvPortMalloc+0x188>)
 80076a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076a6:	4b1a      	ldr	r3, [pc, #104]	; (8007710 <pvPortMalloc+0x188>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4b1b      	ldr	r3, [pc, #108]	; (8007718 <pvPortMalloc+0x190>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d203      	bcs.n	80076ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076b2:	4b17      	ldr	r3, [pc, #92]	; (8007710 <pvPortMalloc+0x188>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a18      	ldr	r2, [pc, #96]	; (8007718 <pvPortMalloc+0x190>)
 80076b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	4b13      	ldr	r3, [pc, #76]	; (800770c <pvPortMalloc+0x184>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <pvPortMalloc+0x194>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	4a11      	ldr	r2, [pc, #68]	; (800771c <pvPortMalloc+0x194>)
 80076d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076d8:	f001 fc36 	bl	8008f48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <pvPortMalloc+0x174>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	60fb      	str	r3, [r7, #12]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <pvPortMalloc+0x172>
	return pvReturn;
 80076fc:	69fb      	ldr	r3, [r7, #28]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3728      	adds	r7, #40	; 0x28
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20004ab8 	.word	0x20004ab8
 800770c:	20004acc 	.word	0x20004acc
 8007710:	20004abc 	.word	0x20004abc
 8007714:	20004ab0 	.word	0x20004ab0
 8007718:	20004ac0 	.word	0x20004ac0
 800771c:	20004ac4 	.word	0x20004ac4

08007720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d04d      	beq.n	80077ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007732:	2308      	movs	r3, #8
 8007734:	425b      	negs	r3, r3
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	4413      	add	r3, r2
 800773a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <vPortFree+0xb8>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4013      	ands	r3, r2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <vPortFree+0x44>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	60fb      	str	r3, [r7, #12]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00a      	beq.n	8007782 <vPortFree+0x62>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	60bb      	str	r3, [r7, #8]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <vPortFree+0xb8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4013      	ands	r3, r2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01e      	beq.n	80077ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d11a      	bne.n	80077ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <vPortFree+0xb8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	43db      	mvns	r3, r3
 80077a2:	401a      	ands	r2, r3
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077a8:	f001 fbc0 	bl	8008f2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <vPortFree+0xbc>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4413      	add	r3, r2
 80077b6:	4a09      	ldr	r2, [pc, #36]	; (80077dc <vPortFree+0xbc>)
 80077b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077ba:	6938      	ldr	r0, [r7, #16]
 80077bc:	f000 f874 	bl	80078a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <vPortFree+0xc0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	4a06      	ldr	r2, [pc, #24]	; (80077e0 <vPortFree+0xc0>)
 80077c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077ca:	f001 fbbd 	bl	8008f48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077ce:	bf00      	nop
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20004acc 	.word	0x20004acc
 80077dc:	20004abc 	.word	0x20004abc
 80077e0:	20004ac8 	.word	0x20004ac8

080077e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80077ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077f0:	4b27      	ldr	r3, [pc, #156]	; (8007890 <prvHeapInit+0xac>)
 80077f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00c      	beq.n	8007818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3307      	adds	r3, #7
 8007802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0307 	bic.w	r3, r3, #7
 800780a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	4a1f      	ldr	r2, [pc, #124]	; (8007890 <prvHeapInit+0xac>)
 8007814:	4413      	add	r3, r2
 8007816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800781c:	4a1d      	ldr	r2, [pc, #116]	; (8007894 <prvHeapInit+0xb0>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007822:	4b1c      	ldr	r3, [pc, #112]	; (8007894 <prvHeapInit+0xb0>)
 8007824:	2200      	movs	r2, #0
 8007826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	4413      	add	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007830:	2208      	movs	r2, #8
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0307 	bic.w	r3, r3, #7
 800783e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4a15      	ldr	r2, [pc, #84]	; (8007898 <prvHeapInit+0xb4>)
 8007844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007846:	4b14      	ldr	r3, [pc, #80]	; (8007898 <prvHeapInit+0xb4>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2200      	movs	r2, #0
 800784c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800784e:	4b12      	ldr	r3, [pc, #72]	; (8007898 <prvHeapInit+0xb4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	1ad2      	subs	r2, r2, r3
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007864:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <prvHeapInit+0xb4>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	4a0a      	ldr	r2, [pc, #40]	; (800789c <prvHeapInit+0xb8>)
 8007872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <prvHeapInit+0xbc>)
 800787a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800787c:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <prvHeapInit+0xc0>)
 800787e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007882:	601a      	str	r2, [r3, #0]
}
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	20000eb0 	.word	0x20000eb0
 8007894:	20004ab0 	.word	0x20004ab0
 8007898:	20004ab8 	.word	0x20004ab8
 800789c:	20004ac0 	.word	0x20004ac0
 80078a0:	20004abc 	.word	0x20004abc
 80078a4:	20004acc 	.word	0x20004acc

080078a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078b0:	4b28      	ldr	r3, [pc, #160]	; (8007954 <prvInsertBlockIntoFreeList+0xac>)
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	e002      	b.n	80078bc <prvInsertBlockIntoFreeList+0x14>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d8f7      	bhi.n	80078b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	4413      	add	r3, r2
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d108      	bne.n	80078ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	441a      	add	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	441a      	add	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d118      	bne.n	8007930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	4b15      	ldr	r3, [pc, #84]	; (8007958 <prvInsertBlockIntoFreeList+0xb0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d00d      	beq.n	8007926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	441a      	add	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	e008      	b.n	8007938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007926:	4b0c      	ldr	r3, [pc, #48]	; (8007958 <prvInsertBlockIntoFreeList+0xb0>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	e003      	b.n	8007938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	d002      	beq.n	8007946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007946:	bf00      	nop
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20004ab0 	.word	0x20004ab0
 8007958:	20004ab8 	.word	0x20004ab8

0800795c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f103 0208 	add.w	r2, r3, #8
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f103 0208 	add.w	r2, r3, #8
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f103 0208 	add.w	r2, r3, #8
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	601a      	str	r2, [r3, #0]
}
 80079f2:	bf00      	nop
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079fe:	b480      	push	{r7}
 8007a00:	b085      	sub	sp, #20
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a14:	d103      	bne.n	8007a1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e00c      	b.n	8007a38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3308      	adds	r3, #8
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	e002      	b.n	8007a2c <vListInsert+0x2e>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d2f6      	bcs.n	8007a26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6892      	ldr	r2, [r2, #8]
 8007a86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6852      	ldr	r2, [r2, #4]
 8007a90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d103      	bne.n	8007aa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	1e5a      	subs	r2, r3, #1
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3b04      	subs	r3, #4
 8007ad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3b04      	subs	r3, #4
 8007ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f023 0201 	bic.w	r2, r3, #1
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3b04      	subs	r3, #4
 8007af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007af4:	4a0c      	ldr	r2, [pc, #48]	; (8007b28 <pxPortInitialiseStack+0x64>)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3b14      	subs	r3, #20
 8007afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3b04      	subs	r3, #4
 8007b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f06f 0202 	mvn.w	r2, #2
 8007b12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3b20      	subs	r3, #32
 8007b18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	08007b2d 	.word	0x08007b2d

08007b2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b36:	4b12      	ldr	r3, [pc, #72]	; (8007b80 <prvTaskExitError+0x54>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b3e:	d00a      	beq.n	8007b56 <prvTaskExitError+0x2a>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	60fb      	str	r3, [r7, #12]
}
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <prvTaskExitError+0x28>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	60bb      	str	r3, [r7, #8]
}
 8007b68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b6a:	bf00      	nop
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0fc      	beq.n	8007b6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	20000024 	.word	0x20000024
	...

08007b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b90:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <pxCurrentTCBConst2>)
 8007b92:	6819      	ldr	r1, [r3, #0]
 8007b94:	6808      	ldr	r0, [r1, #0]
 8007b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9a:	f380 8809 	msr	PSP, r0
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f04f 0000 	mov.w	r0, #0
 8007ba6:	f380 8811 	msr	BASEPRI, r0
 8007baa:	4770      	bx	lr
 8007bac:	f3af 8000 	nop.w

08007bb0 <pxCurrentTCBConst2>:
 8007bb0:	20004b18 	.word	0x20004b18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop

08007bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bb8:	4808      	ldr	r0, [pc, #32]	; (8007bdc <prvPortStartFirstTask+0x24>)
 8007bba:	6800      	ldr	r0, [r0, #0]
 8007bbc:	6800      	ldr	r0, [r0, #0]
 8007bbe:	f380 8808 	msr	MSP, r0
 8007bc2:	f04f 0000 	mov.w	r0, #0
 8007bc6:	f380 8814 	msr	CONTROL, r0
 8007bca:	b662      	cpsie	i
 8007bcc:	b661      	cpsie	f
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	df00      	svc	0
 8007bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bda:	bf00      	nop
 8007bdc:	e000ed08 	.word	0xe000ed08

08007be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007be6:	4b46      	ldr	r3, [pc, #280]	; (8007d00 <xPortStartScheduler+0x120>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a46      	ldr	r2, [pc, #280]	; (8007d04 <xPortStartScheduler+0x124>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10a      	bne.n	8007c06 <xPortStartScheduler+0x26>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	613b      	str	r3, [r7, #16]
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c06:	4b3e      	ldr	r3, [pc, #248]	; (8007d00 <xPortStartScheduler+0x120>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a3f      	ldr	r2, [pc, #252]	; (8007d08 <xPortStartScheduler+0x128>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d10a      	bne.n	8007c26 <xPortStartScheduler+0x46>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	60fb      	str	r3, [r7, #12]
}
 8007c22:	bf00      	nop
 8007c24:	e7fe      	b.n	8007c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c26:	4b39      	ldr	r3, [pc, #228]	; (8007d0c <xPortStartScheduler+0x12c>)
 8007c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	22ff      	movs	r2, #255	; 0xff
 8007c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	4b31      	ldr	r3, [pc, #196]	; (8007d10 <xPortStartScheduler+0x130>)
 8007c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c4e:	4b31      	ldr	r3, [pc, #196]	; (8007d14 <xPortStartScheduler+0x134>)
 8007c50:	2207      	movs	r2, #7
 8007c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c54:	e009      	b.n	8007c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c56:	4b2f      	ldr	r3, [pc, #188]	; (8007d14 <xPortStartScheduler+0x134>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	4a2d      	ldr	r2, [pc, #180]	; (8007d14 <xPortStartScheduler+0x134>)
 8007c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c72:	2b80      	cmp	r3, #128	; 0x80
 8007c74:	d0ef      	beq.n	8007c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c76:	4b27      	ldr	r3, [pc, #156]	; (8007d14 <xPortStartScheduler+0x134>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f1c3 0307 	rsb	r3, r3, #7
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d00a      	beq.n	8007c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	60bb      	str	r3, [r7, #8]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c98:	4b1e      	ldr	r3, [pc, #120]	; (8007d14 <xPortStartScheduler+0x134>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	4a1d      	ldr	r2, [pc, #116]	; (8007d14 <xPortStartScheduler+0x134>)
 8007ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ca2:	4b1c      	ldr	r3, [pc, #112]	; (8007d14 <xPortStartScheduler+0x134>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007caa:	4a1a      	ldr	r2, [pc, #104]	; (8007d14 <xPortStartScheduler+0x134>)
 8007cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cb6:	4b18      	ldr	r3, [pc, #96]	; (8007d18 <xPortStartScheduler+0x138>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a17      	ldr	r2, [pc, #92]	; (8007d18 <xPortStartScheduler+0x138>)
 8007cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cc2:	4b15      	ldr	r3, [pc, #84]	; (8007d18 <xPortStartScheduler+0x138>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a14      	ldr	r2, [pc, #80]	; (8007d18 <xPortStartScheduler+0x138>)
 8007cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cce:	f000 f8dd 	bl	8007e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cd2:	4b12      	ldr	r3, [pc, #72]	; (8007d1c <xPortStartScheduler+0x13c>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cd8:	f000 f8fc 	bl	8007ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cdc:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <xPortStartScheduler+0x140>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a0f      	ldr	r2, [pc, #60]	; (8007d20 <xPortStartScheduler+0x140>)
 8007ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ce8:	f7ff ff66 	bl	8007bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cec:	f001 fa94 	bl	8009218 <vTaskSwitchContext>
	prvTaskExitError();
 8007cf0:	f7ff ff1c 	bl	8007b2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	e000ed00 	.word	0xe000ed00
 8007d04:	410fc271 	.word	0x410fc271
 8007d08:	410fc270 	.word	0x410fc270
 8007d0c:	e000e400 	.word	0xe000e400
 8007d10:	20004ad0 	.word	0x20004ad0
 8007d14:	20004ad4 	.word	0x20004ad4
 8007d18:	e000ed20 	.word	0xe000ed20
 8007d1c:	20000024 	.word	0x20000024
 8007d20:	e000ef34 	.word	0xe000ef34

08007d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	607b      	str	r3, [r7, #4]
}
 8007d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d3e:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <vPortEnterCritical+0x58>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3301      	adds	r3, #1
 8007d44:	4a0d      	ldr	r2, [pc, #52]	; (8007d7c <vPortEnterCritical+0x58>)
 8007d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d48:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <vPortEnterCritical+0x58>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d10f      	bne.n	8007d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d50:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <vPortEnterCritical+0x5c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	603b      	str	r3, [r7, #0]
}
 8007d6c:	bf00      	nop
 8007d6e:	e7fe      	b.n	8007d6e <vPortEnterCritical+0x4a>
	}
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	20000024 	.word	0x20000024
 8007d80:	e000ed04 	.word	0xe000ed04

08007d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d8a:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <vPortExitCritical+0x50>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10a      	bne.n	8007da8 <vPortExitCritical+0x24>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	607b      	str	r3, [r7, #4]
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <vPortExitCritical+0x50>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	4a09      	ldr	r2, [pc, #36]	; (8007dd4 <vPortExitCritical+0x50>)
 8007db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007db2:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <vPortExitCritical+0x50>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d105      	bne.n	8007dc6 <vPortExitCritical+0x42>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	f383 8811 	msr	BASEPRI, r3
}
 8007dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	20000024 	.word	0x20000024
	...

08007de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007de0:	f3ef 8009 	mrs	r0, PSP
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	4b15      	ldr	r3, [pc, #84]	; (8007e40 <pxCurrentTCBConst>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	f01e 0f10 	tst.w	lr, #16
 8007df0:	bf08      	it	eq
 8007df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfa:	6010      	str	r0, [r2, #0]
 8007dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e04:	f380 8811 	msr	BASEPRI, r0
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f001 fa02 	bl	8009218 <vTaskSwitchContext>
 8007e14:	f04f 0000 	mov.w	r0, #0
 8007e18:	f380 8811 	msr	BASEPRI, r0
 8007e1c:	bc09      	pop	{r0, r3}
 8007e1e:	6819      	ldr	r1, [r3, #0]
 8007e20:	6808      	ldr	r0, [r1, #0]
 8007e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e26:	f01e 0f10 	tst.w	lr, #16
 8007e2a:	bf08      	it	eq
 8007e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e30:	f380 8809 	msr	PSP, r0
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	f3af 8000 	nop.w

08007e40 <pxCurrentTCBConst>:
 8007e40:	20004b18 	.word	0x20004b18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop

08007e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	607b      	str	r3, [r7, #4]
}
 8007e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e62:	f001 f91f 	bl	80090a4 <xTaskIncrementTick>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <xPortSysTickHandler+0x40>)
 8007e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	f383 8811 	msr	BASEPRI, r3
}
 8007e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e90:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <vPortSetupTimerInterrupt+0x34>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e96:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <vPortSetupTimerInterrupt+0x38>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <vPortSetupTimerInterrupt+0x3c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <vPortSetupTimerInterrupt+0x40>)
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea6:	099b      	lsrs	r3, r3, #6
 8007ea8:	4a09      	ldr	r2, [pc, #36]	; (8007ed0 <vPortSetupTimerInterrupt+0x44>)
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007eae:	4b04      	ldr	r3, [pc, #16]	; (8007ec0 <vPortSetupTimerInterrupt+0x34>)
 8007eb0:	2207      	movs	r2, #7
 8007eb2:	601a      	str	r2, [r3, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	e000e010 	.word	0xe000e010
 8007ec4:	e000e018 	.word	0xe000e018
 8007ec8:	20000018 	.word	0x20000018
 8007ecc:	10624dd3 	.word	0x10624dd3
 8007ed0:	e000e014 	.word	0xe000e014

08007ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ee4 <vPortEnableVFP+0x10>
 8007ed8:	6801      	ldr	r1, [r0, #0]
 8007eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ede:	6001      	str	r1, [r0, #0]
 8007ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ee2:	bf00      	nop
 8007ee4:	e000ed88 	.word	0xe000ed88

08007ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007eee:	f3ef 8305 	mrs	r3, IPSR
 8007ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b0f      	cmp	r3, #15
 8007ef8:	d914      	bls.n	8007f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007efa:	4a17      	ldr	r2, [pc, #92]	; (8007f58 <vPortValidateInterruptPriority+0x70>)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f04:	4b15      	ldr	r3, [pc, #84]	; (8007f5c <vPortValidateInterruptPriority+0x74>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	7afa      	ldrb	r2, [r7, #11]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d20a      	bcs.n	8007f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	607b      	str	r3, [r7, #4]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f24:	4b0e      	ldr	r3, [pc, #56]	; (8007f60 <vPortValidateInterruptPriority+0x78>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f2c:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <vPortValidateInterruptPriority+0x7c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d90a      	bls.n	8007f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	603b      	str	r3, [r7, #0]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <vPortValidateInterruptPriority+0x60>
	}
 8007f4a:	bf00      	nop
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	e000e3f0 	.word	0xe000e3f0
 8007f5c:	20004ad0 	.word	0x20004ad0
 8007f60:	e000ed0c 	.word	0xe000ed0c
 8007f64:	20004ad4 	.word	0x20004ad4

08007f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <xQueueGenericReset+0x2a>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	60bb      	str	r3, [r7, #8]
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f92:	f7ff fec7 	bl	8007d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fa2:	fb01 f303 	mul.w	r3, r1, r3
 8007fa6:	441a      	add	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	68f9      	ldr	r1, [r7, #12]
 8007fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fc8:	fb01 f303 	mul.w	r3, r1, r3
 8007fcc:	441a      	add	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	22ff      	movs	r2, #255	; 0xff
 8007fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	22ff      	movs	r2, #255	; 0xff
 8007fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d114      	bne.n	8008012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d01a      	beq.n	8008026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3310      	adds	r3, #16
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 f9f9 	bl	80093ec <xTaskRemoveFromEventList>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d012      	beq.n	8008026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008000:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <xQueueGenericReset+0xcc>)
 8008002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	e009      	b.n	8008026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3310      	adds	r3, #16
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff fca0 	bl	800795c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3324      	adds	r3, #36	; 0x24
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fc9b 	bl	800795c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008026:	f7ff fead 	bl	8007d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800802a:	2301      	movs	r3, #1
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	e000ed04 	.word	0xe000ed04

08008038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08e      	sub	sp, #56	; 0x38
 800803c:	af02      	add	r7, sp, #8
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10a      	bne.n	800807e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
}
 800807a:	bf00      	nop
 800807c:	e7fe      	b.n	800807c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <xQueueGenericCreateStatic+0x52>
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <xQueueGenericCreateStatic+0x56>
 800808a:	2301      	movs	r3, #1
 800808c:	e000      	b.n	8008090 <xQueueGenericCreateStatic+0x58>
 800808e:	2300      	movs	r3, #0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10a      	bne.n	80080aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	623b      	str	r3, [r7, #32]
}
 80080a6:	bf00      	nop
 80080a8:	e7fe      	b.n	80080a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <xQueueGenericCreateStatic+0x7e>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <xQueueGenericCreateStatic+0x82>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e000      	b.n	80080bc <xQueueGenericCreateStatic+0x84>
 80080ba:	2300      	movs	r3, #0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	61fb      	str	r3, [r7, #28]
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080d6:	2350      	movs	r3, #80	; 0x50
 80080d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2b50      	cmp	r3, #80	; 0x50
 80080de:	d00a      	beq.n	80080f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	61bb      	str	r3, [r7, #24]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80080fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00d      	beq.n	800811e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800810a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800810e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	4613      	mov	r3, r2
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	68b9      	ldr	r1, [r7, #8]
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 f83f 	bl	800819c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008120:	4618      	mov	r0, r3
 8008122:	3730      	adds	r7, #48	; 0x30
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08a      	sub	sp, #40	; 0x28
 800812c:	af02      	add	r7, sp, #8
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	4613      	mov	r3, r2
 8008134:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10a      	bne.n	8008152 <xQueueGenericCreate+0x2a>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	613b      	str	r3, [r7, #16]
}
 800814e:	bf00      	nop
 8008150:	e7fe      	b.n	8008150 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	fb02 f303 	mul.w	r3, r2, r3
 800815a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	3350      	adds	r3, #80	; 0x50
 8008160:	4618      	mov	r0, r3
 8008162:	f7ff fa11 	bl	8007588 <pvPortMalloc>
 8008166:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d011      	beq.n	8008192 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	3350      	adds	r3, #80	; 0x50
 8008176:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008180:	79fa      	ldrb	r2, [r7, #7]
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	4613      	mov	r3, r2
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	68b9      	ldr	r1, [r7, #8]
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 f805 	bl	800819c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008192:	69bb      	ldr	r3, [r7, #24]
	}
 8008194:	4618      	mov	r0, r3
 8008196:	3720      	adds	r7, #32
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d103      	bne.n	80081b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	e002      	b.n	80081be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081ca:	2101      	movs	r1, #1
 80081cc:	69b8      	ldr	r0, [r7, #24]
 80081ce:	f7ff fecb 	bl	8007f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081da:	bf00      	nop
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08e      	sub	sp, #56	; 0x38
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081f2:	2300      	movs	r3, #0
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <xQueueGenericSend+0x32>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d103      	bne.n	8008224 <xQueueGenericSend+0x40>
 800821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <xQueueGenericSend+0x44>
 8008224:	2301      	movs	r3, #1
 8008226:	e000      	b.n	800822a <xQueueGenericSend+0x46>
 8008228:	2300      	movs	r3, #0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <xQueueGenericSend+0x60>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b02      	cmp	r3, #2
 8008248:	d103      	bne.n	8008252 <xQueueGenericSend+0x6e>
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <xQueueGenericSend+0x72>
 8008252:	2301      	movs	r3, #1
 8008254:	e000      	b.n	8008258 <xQueueGenericSend+0x74>
 8008256:	2300      	movs	r3, #0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10a      	bne.n	8008272 <xQueueGenericSend+0x8e>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	623b      	str	r3, [r7, #32]
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008272:	f001 fadb 	bl	800982c <xTaskGetSchedulerState>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <xQueueGenericSend+0x9e>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <xQueueGenericSend+0xa2>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <xQueueGenericSend+0xa4>
 8008286:	2300      	movs	r3, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	61fb      	str	r3, [r7, #28]
}
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082a2:	f7ff fd3f 	bl	8007d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d302      	bcc.n	80082b8 <xQueueGenericSend+0xd4>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d129      	bne.n	800830c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082be:	f000 fa8b 	bl	80087d8 <prvCopyDataToQueue>
 80082c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d010      	beq.n	80082ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	3324      	adds	r3, #36	; 0x24
 80082d0:	4618      	mov	r0, r3
 80082d2:	f001 f88b 	bl	80093ec <xTaskRemoveFromEventList>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d013      	beq.n	8008304 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082dc:	4b3f      	ldr	r3, [pc, #252]	; (80083dc <xQueueGenericSend+0x1f8>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	e00a      	b.n	8008304 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d007      	beq.n	8008304 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082f4:	4b39      	ldr	r3, [pc, #228]	; (80083dc <xQueueGenericSend+0x1f8>)
 80082f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008304:	f7ff fd3e 	bl	8007d84 <vPortExitCritical>
				return pdPASS;
 8008308:	2301      	movs	r3, #1
 800830a:	e063      	b.n	80083d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d103      	bne.n	800831a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008312:	f7ff fd37 	bl	8007d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008316:	2300      	movs	r3, #0
 8008318:	e05c      	b.n	80083d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	2b00      	cmp	r3, #0
 800831e:	d106      	bne.n	800832e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008320:	f107 0314 	add.w	r3, r7, #20
 8008324:	4618      	mov	r0, r3
 8008326:	f001 f927 	bl	8009578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800832a:	2301      	movs	r3, #1
 800832c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800832e:	f7ff fd29 	bl	8007d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008332:	f000 fdfb 	bl	8008f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008336:	f7ff fcf5 	bl	8007d24 <vPortEnterCritical>
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008340:	b25b      	sxtb	r3, r3
 8008342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008346:	d103      	bne.n	8008350 <xQueueGenericSend+0x16c>
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008356:	b25b      	sxtb	r3, r3
 8008358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800835c:	d103      	bne.n	8008366 <xQueueGenericSend+0x182>
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008366:	f7ff fd0d 	bl	8007d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800836a:	1d3a      	adds	r2, r7, #4
 800836c:	f107 0314 	add.w	r3, r7, #20
 8008370:	4611      	mov	r1, r2
 8008372:	4618      	mov	r0, r3
 8008374:	f001 f916 	bl	80095a4 <xTaskCheckForTimeOut>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d124      	bne.n	80083c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800837e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008380:	f000 fb22 	bl	80089c8 <prvIsQueueFull>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d018      	beq.n	80083bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	3310      	adds	r3, #16
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	4611      	mov	r1, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f000 ff9e 	bl	80092d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800839a:	f000 faad 	bl	80088f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800839e:	f000 fdd3 	bl	8008f48 <xTaskResumeAll>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f47f af7c 	bne.w	80082a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80083aa:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <xQueueGenericSend+0x1f8>)
 80083ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	e772      	b.n	80082a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083be:	f000 fa9b 	bl	80088f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083c2:	f000 fdc1 	bl	8008f48 <xTaskResumeAll>
 80083c6:	e76c      	b.n	80082a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ca:	f000 fa95 	bl	80088f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083ce:	f000 fdbb 	bl	8008f48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3738      	adds	r7, #56	; 0x38
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	e000ed04 	.word	0xe000ed04

080083e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b090      	sub	sp, #64	; 0x40
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800840a:	bf00      	nop
 800840c:	e7fe      	b.n	800840c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d103      	bne.n	800841c <xQueueGenericSendFromISR+0x3c>
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <xQueueGenericSendFromISR+0x40>
 800841c:	2301      	movs	r3, #1
 800841e:	e000      	b.n	8008422 <xQueueGenericSendFromISR+0x42>
 8008420:	2300      	movs	r3, #0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10a      	bne.n	800843c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d103      	bne.n	800844a <xQueueGenericSendFromISR+0x6a>
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008446:	2b01      	cmp	r3, #1
 8008448:	d101      	bne.n	800844e <xQueueGenericSendFromISR+0x6e>
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <xQueueGenericSendFromISR+0x70>
 800844e:	2300      	movs	r3, #0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10a      	bne.n	800846a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	623b      	str	r3, [r7, #32]
}
 8008466:	bf00      	nop
 8008468:	e7fe      	b.n	8008468 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800846a:	f7ff fd3d 	bl	8007ee8 <vPortValidateInterruptPriority>
	__asm volatile
 800846e:	f3ef 8211 	mrs	r2, BASEPRI
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	61fa      	str	r2, [r7, #28]
 8008484:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008486:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008488:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008492:	429a      	cmp	r2, r3
 8008494:	d302      	bcc.n	800849c <xQueueGenericSendFromISR+0xbc>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b02      	cmp	r3, #2
 800849a:	d12f      	bne.n	80084fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	68b9      	ldr	r1, [r7, #8]
 80084b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084b2:	f000 f991 	bl	80087d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084be:	d112      	bne.n	80084e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d016      	beq.n	80084f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	3324      	adds	r3, #36	; 0x24
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 ff8d 	bl	80093ec <xTaskRemoveFromEventList>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00e      	beq.n	80084f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00b      	beq.n	80084f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	e007      	b.n	80084f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084ea:	3301      	adds	r3, #1
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	b25a      	sxtb	r2, r3
 80084f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084f6:	2301      	movs	r3, #1
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80084fa:	e001      	b.n	8008500 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008502:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f383 8811 	msr	BASEPRI, r3
}
 800850a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800850c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800850e:	4618      	mov	r0, r3
 8008510:	3740      	adds	r7, #64	; 0x40
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08c      	sub	sp, #48	; 0x30
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008524:	2300      	movs	r3, #0
 8008526:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <xQueueReceive+0x30>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	623b      	str	r3, [r7, #32]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d103      	bne.n	8008556 <xQueueReceive+0x3e>
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <xQueueReceive+0x42>
 8008556:	2301      	movs	r3, #1
 8008558:	e000      	b.n	800855c <xQueueReceive+0x44>
 800855a:	2300      	movs	r3, #0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10a      	bne.n	8008576 <xQueueReceive+0x5e>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	61fb      	str	r3, [r7, #28]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008576:	f001 f959 	bl	800982c <xTaskGetSchedulerState>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d102      	bne.n	8008586 <xQueueReceive+0x6e>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <xQueueReceive+0x72>
 8008586:	2301      	movs	r3, #1
 8008588:	e000      	b.n	800858c <xQueueReceive+0x74>
 800858a:	2300      	movs	r3, #0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10a      	bne.n	80085a6 <xQueueReceive+0x8e>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	61bb      	str	r3, [r7, #24]
}
 80085a2:	bf00      	nop
 80085a4:	e7fe      	b.n	80085a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085a6:	f7ff fbbd 	bl	8007d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d01f      	beq.n	80085f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ba:	f000 f977 	bl	80088ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	1e5a      	subs	r2, r3, #1
 80085c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00f      	beq.n	80085ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	3310      	adds	r3, #16
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 ff0a 	bl	80093ec <xTaskRemoveFromEventList>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d007      	beq.n	80085ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085de:	4b3d      	ldr	r3, [pc, #244]	; (80086d4 <xQueueReceive+0x1bc>)
 80085e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085ee:	f7ff fbc9 	bl	8007d84 <vPortExitCritical>
				return pdPASS;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e069      	b.n	80086ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d103      	bne.n	8008604 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085fc:	f7ff fbc2 	bl	8007d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008600:	2300      	movs	r3, #0
 8008602:	e062      	b.n	80086ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800860a:	f107 0310 	add.w	r3, r7, #16
 800860e:	4618      	mov	r0, r3
 8008610:	f000 ffb2 	bl	8009578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008614:	2301      	movs	r3, #1
 8008616:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008618:	f7ff fbb4 	bl	8007d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800861c:	f000 fc86 	bl	8008f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008620:	f7ff fb80 	bl	8007d24 <vPortEnterCritical>
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800862a:	b25b      	sxtb	r3, r3
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008630:	d103      	bne.n	800863a <xQueueReceive+0x122>
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008640:	b25b      	sxtb	r3, r3
 8008642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008646:	d103      	bne.n	8008650 <xQueueReceive+0x138>
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008650:	f7ff fb98 	bl	8007d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008654:	1d3a      	adds	r2, r7, #4
 8008656:	f107 0310 	add.w	r3, r7, #16
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f000 ffa1 	bl	80095a4 <xTaskCheckForTimeOut>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d123      	bne.n	80086b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800866a:	f000 f997 	bl	800899c <prvIsQueueEmpty>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d017      	beq.n	80086a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	3324      	adds	r3, #36	; 0x24
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	4611      	mov	r1, r2
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fe29 	bl	80092d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008684:	f000 f938 	bl	80088f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008688:	f000 fc5e 	bl	8008f48 <xTaskResumeAll>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d189      	bne.n	80085a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008692:	4b10      	ldr	r3, [pc, #64]	; (80086d4 <xQueueReceive+0x1bc>)
 8008694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	e780      	b.n	80085a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a6:	f000 f927 	bl	80088f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086aa:	f000 fc4d 	bl	8008f48 <xTaskResumeAll>
 80086ae:	e77a      	b.n	80085a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086b2:	f000 f921 	bl	80088f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086b6:	f000 fc47 	bl	8008f48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086bc:	f000 f96e 	bl	800899c <prvIsQueueEmpty>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f43f af6f 	beq.w	80085a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3730      	adds	r7, #48	; 0x30
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08e      	sub	sp, #56	; 0x38
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10a      	bne.n	8008704 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	623b      	str	r3, [r7, #32]
}
 8008700:	bf00      	nop
 8008702:	e7fe      	b.n	8008702 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d103      	bne.n	8008712 <xQueueReceiveFromISR+0x3a>
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <xQueueReceiveFromISR+0x3e>
 8008712:	2301      	movs	r3, #1
 8008714:	e000      	b.n	8008718 <xQueueReceiveFromISR+0x40>
 8008716:	2300      	movs	r3, #0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	61fb      	str	r3, [r7, #28]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008732:	f7ff fbd9 	bl	8007ee8 <vPortValidateInterruptPriority>
	__asm volatile
 8008736:	f3ef 8211 	mrs	r2, BASEPRI
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	61ba      	str	r2, [r7, #24]
 800874c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800874e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008750:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008756:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	2b00      	cmp	r3, #0
 800875c:	d02f      	beq.n	80087be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800876c:	f000 f89e 	bl	80088ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	1e5a      	subs	r2, r3, #1
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008778:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008780:	d112      	bne.n	80087a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d016      	beq.n	80087b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	3310      	adds	r3, #16
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fe2c 	bl	80093ec <xTaskRemoveFromEventList>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00e      	beq.n	80087b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00b      	beq.n	80087b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	e007      	b.n	80087b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80087a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087ac:	3301      	adds	r3, #1
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	b25a      	sxtb	r2, r3
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80087b8:	2301      	movs	r3, #1
 80087ba:	637b      	str	r3, [r7, #52]	; 0x34
 80087bc:	e001      	b.n	80087c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80087be:	2300      	movs	r3, #0
 80087c0:	637b      	str	r3, [r7, #52]	; 0x34
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f383 8811 	msr	BASEPRI, r3
}
 80087cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3738      	adds	r7, #56	; 0x38
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10d      	bne.n	8008812 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d14d      	bne.n	800889a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	4618      	mov	r0, r3
 8008804:	f001 f830 	bl	8009868 <xTaskPriorityDisinherit>
 8008808:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	609a      	str	r2, [r3, #8]
 8008810:	e043      	b.n	800889a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d119      	bne.n	800884c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6858      	ldr	r0, [r3, #4]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008820:	461a      	mov	r2, r3
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	f001 fc92 	bl	800a14c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008830:	441a      	add	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	429a      	cmp	r2, r3
 8008840:	d32b      	bcc.n	800889a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	605a      	str	r2, [r3, #4]
 800884a:	e026      	b.n	800889a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	68d8      	ldr	r0, [r3, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	461a      	mov	r2, r3
 8008856:	68b9      	ldr	r1, [r7, #8]
 8008858:	f001 fc78 	bl	800a14c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008864:	425b      	negs	r3, r3
 8008866:	441a      	add	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	429a      	cmp	r2, r3
 8008876:	d207      	bcs.n	8008888 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008880:	425b      	negs	r3, r3
 8008882:	441a      	add	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b02      	cmp	r3, #2
 800888c:	d105      	bne.n	800889a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	3b01      	subs	r3, #1
 8008898:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80088a2:	697b      	ldr	r3, [r7, #20]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d018      	beq.n	80088f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	441a      	add	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68da      	ldr	r2, [r3, #12]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d303      	bcc.n	80088e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68d9      	ldr	r1, [r3, #12]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e8:	461a      	mov	r2, r3
 80088ea:	6838      	ldr	r0, [r7, #0]
 80088ec:	f001 fc2e 	bl	800a14c <memcpy>
	}
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008900:	f7ff fa10 	bl	8007d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800890a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800890c:	e011      	b.n	8008932 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	2b00      	cmp	r3, #0
 8008914:	d012      	beq.n	800893c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	3324      	adds	r3, #36	; 0x24
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fd66 	bl	80093ec <xTaskRemoveFromEventList>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008926:	f000 fe9f 	bl	8009668 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	3b01      	subs	r3, #1
 800892e:	b2db      	uxtb	r3, r3
 8008930:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008936:	2b00      	cmp	r3, #0
 8008938:	dce9      	bgt.n	800890e <prvUnlockQueue+0x16>
 800893a:	e000      	b.n	800893e <prvUnlockQueue+0x46>
					break;
 800893c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	22ff      	movs	r2, #255	; 0xff
 8008942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008946:	f7ff fa1d 	bl	8007d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800894a:	f7ff f9eb 	bl	8007d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008954:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008956:	e011      	b.n	800897c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d012      	beq.n	8008986 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3310      	adds	r3, #16
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fd41 	bl	80093ec <xTaskRemoveFromEventList>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008970:	f000 fe7a 	bl	8009668 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	3b01      	subs	r3, #1
 8008978:	b2db      	uxtb	r3, r3
 800897a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800897c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008980:	2b00      	cmp	r3, #0
 8008982:	dce9      	bgt.n	8008958 <prvUnlockQueue+0x60>
 8008984:	e000      	b.n	8008988 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008986:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	22ff      	movs	r2, #255	; 0xff
 800898c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008990:	f7ff f9f8 	bl	8007d84 <vPortExitCritical>
}
 8008994:	bf00      	nop
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089a4:	f7ff f9be 	bl	8007d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089b0:	2301      	movs	r3, #1
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	e001      	b.n	80089ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089ba:	f7ff f9e3 	bl	8007d84 <vPortExitCritical>

	return xReturn;
 80089be:	68fb      	ldr	r3, [r7, #12]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089d0:	f7ff f9a8 	bl	8007d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089dc:	429a      	cmp	r2, r3
 80089de:	d102      	bne.n	80089e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089e0:	2301      	movs	r3, #1
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	e001      	b.n	80089ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089ea:	f7ff f9cb 	bl	8007d84 <vPortExitCritical>

	return xReturn;
 80089ee:	68fb      	ldr	r3, [r7, #12]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a02:	2300      	movs	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	e014      	b.n	8008a32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a08:	4a0f      	ldr	r2, [pc, #60]	; (8008a48 <vQueueAddToRegistry+0x50>)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10b      	bne.n	8008a2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a14:	490c      	ldr	r1, [pc, #48]	; (8008a48 <vQueueAddToRegistry+0x50>)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a1e:	4a0a      	ldr	r2, [pc, #40]	; (8008a48 <vQueueAddToRegistry+0x50>)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	4413      	add	r3, r2
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a2a:	e006      	b.n	8008a3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b07      	cmp	r3, #7
 8008a36:	d9e7      	bls.n	8008a08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	20004ad8 	.word	0x20004ad8

08008a4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a5c:	f7ff f962 	bl	8007d24 <vPortEnterCritical>
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a66:	b25b      	sxtb	r3, r3
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a6c:	d103      	bne.n	8008a76 <vQueueWaitForMessageRestricted+0x2a>
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a7c:	b25b      	sxtb	r3, r3
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a82:	d103      	bne.n	8008a8c <vQueueWaitForMessageRestricted+0x40>
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a8c:	f7ff f97a 	bl	8007d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	3324      	adds	r3, #36	; 0x24
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fc77 	bl	8009394 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008aa6:	6978      	ldr	r0, [r7, #20]
 8008aa8:	f7ff ff26 	bl	80088f8 <prvUnlockQueue>
	}
 8008aac:	bf00      	nop
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08e      	sub	sp, #56	; 0x38
 8008ab8:	af04      	add	r7, sp, #16
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	623b      	str	r3, [r7, #32]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10a      	bne.n	8008afa <xTaskCreateStatic+0x46>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	61fb      	str	r3, [r7, #28]
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008afa:	235c      	movs	r3, #92	; 0x5c
 8008afc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b5c      	cmp	r3, #92	; 0x5c
 8008b02:	d00a      	beq.n	8008b1a <xTaskCreateStatic+0x66>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	61bb      	str	r3, [r7, #24]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d01e      	beq.n	8008b60 <xTaskCreateStatic+0xac>
 8008b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d01b      	beq.n	8008b60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	2202      	movs	r2, #2
 8008b36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9303      	str	r3, [sp, #12]
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	9302      	str	r3, [sp, #8]
 8008b42:	f107 0314 	add.w	r3, r7, #20
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	68b9      	ldr	r1, [r7, #8]
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 f850 	bl	8008bf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b5a:	f000 f8dd 	bl	8008d18 <prvAddNewTaskToReadyList>
 8008b5e:	e001      	b.n	8008b64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b64:	697b      	ldr	r3, [r7, #20]
	}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3728      	adds	r7, #40	; 0x28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b08c      	sub	sp, #48	; 0x30
 8008b72:	af04      	add	r7, sp, #16
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	603b      	str	r3, [r7, #0]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b7e:	88fb      	ldrh	r3, [r7, #6]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fd00 	bl	8007588 <pvPortMalloc>
 8008b88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00e      	beq.n	8008bae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b90:	205c      	movs	r0, #92	; 0x5c
 8008b92:	f7fe fcf9 	bl	8007588 <pvPortMalloc>
 8008b96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ba4:	e005      	b.n	8008bb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ba6:	6978      	ldr	r0, [r7, #20]
 8008ba8:	f7fe fdba 	bl	8007720 <vPortFree>
 8008bac:	e001      	b.n	8008bb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d017      	beq.n	8008be8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008bc0:	88fa      	ldrh	r2, [r7, #6]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	9302      	str	r3, [sp, #8]
 8008bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	68b9      	ldr	r1, [r7, #8]
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 f80e 	bl	8008bf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bdc:	69f8      	ldr	r0, [r7, #28]
 8008bde:	f000 f89b 	bl	8008d18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008be2:	2301      	movs	r3, #1
 8008be4:	61bb      	str	r3, [r7, #24]
 8008be6:	e002      	b.n	8008bee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bee:	69bb      	ldr	r3, [r7, #24]
	}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3720      	adds	r7, #32
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	461a      	mov	r2, r3
 8008c10:	21a5      	movs	r1, #165	; 0xa5
 8008c12:	f001 faa9 	bl	800a168 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c20:	3b01      	subs	r3, #1
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	f023 0307 	bic.w	r3, r3, #7
 8008c2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	617b      	str	r3, [r7, #20]
}
 8008c4c:	bf00      	nop
 8008c4e:	e7fe      	b.n	8008c4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d01f      	beq.n	8008c96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c56:	2300      	movs	r3, #0
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	e012      	b.n	8008c82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	4413      	add	r3, r2
 8008c62:	7819      	ldrb	r1, [r3, #0]
 8008c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	4413      	add	r3, r2
 8008c6a:	3334      	adds	r3, #52	; 0x34
 8008c6c:	460a      	mov	r2, r1
 8008c6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	4413      	add	r3, r2
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d006      	beq.n	8008c8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	61fb      	str	r3, [r7, #28]
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	2b0f      	cmp	r3, #15
 8008c86:	d9e9      	bls.n	8008c5c <prvInitialiseNewTask+0x64>
 8008c88:	e000      	b.n	8008c8c <prvInitialiseNewTask+0x94>
			{
				break;
 8008c8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c94:	e003      	b.n	8008c9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	2b37      	cmp	r3, #55	; 0x37
 8008ca2:	d901      	bls.n	8008ca8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ca4:	2337      	movs	r3, #55	; 0x37
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fe fe6c 	bl	800799c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	3318      	adds	r3, #24
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fe fe67 	bl	800799c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	68f9      	ldr	r1, [r7, #12]
 8008cf6:	69b8      	ldr	r0, [r7, #24]
 8008cf8:	f7fe fee4 	bl	8007ac4 <pxPortInitialiseStack>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d0e:	bf00      	nop
 8008d10:	3720      	adds	r7, #32
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
	...

08008d18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d20:	f7ff f800 	bl	8007d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d24:	4b2d      	ldr	r3, [pc, #180]	; (8008ddc <prvAddNewTaskToReadyList+0xc4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	4a2c      	ldr	r2, [pc, #176]	; (8008ddc <prvAddNewTaskToReadyList+0xc4>)
 8008d2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d2e:	4b2c      	ldr	r3, [pc, #176]	; (8008de0 <prvAddNewTaskToReadyList+0xc8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d109      	bne.n	8008d4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d36:	4a2a      	ldr	r2, [pc, #168]	; (8008de0 <prvAddNewTaskToReadyList+0xc8>)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d3c:	4b27      	ldr	r3, [pc, #156]	; (8008ddc <prvAddNewTaskToReadyList+0xc4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d110      	bne.n	8008d66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d44:	f000 fcb4 	bl	80096b0 <prvInitialiseTaskLists>
 8008d48:	e00d      	b.n	8008d66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d4a:	4b26      	ldr	r3, [pc, #152]	; (8008de4 <prvAddNewTaskToReadyList+0xcc>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d109      	bne.n	8008d66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d52:	4b23      	ldr	r3, [pc, #140]	; (8008de0 <prvAddNewTaskToReadyList+0xc8>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d802      	bhi.n	8008d66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d60:	4a1f      	ldr	r2, [pc, #124]	; (8008de0 <prvAddNewTaskToReadyList+0xc8>)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d66:	4b20      	ldr	r3, [pc, #128]	; (8008de8 <prvAddNewTaskToReadyList+0xd0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	4a1e      	ldr	r2, [pc, #120]	; (8008de8 <prvAddNewTaskToReadyList+0xd0>)
 8008d6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d70:	4b1d      	ldr	r3, [pc, #116]	; (8008de8 <prvAddNewTaskToReadyList+0xd0>)
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7c:	4b1b      	ldr	r3, [pc, #108]	; (8008dec <prvAddNewTaskToReadyList+0xd4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d903      	bls.n	8008d8c <prvAddNewTaskToReadyList+0x74>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	4a18      	ldr	r2, [pc, #96]	; (8008dec <prvAddNewTaskToReadyList+0xd4>)
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4a15      	ldr	r2, [pc, #84]	; (8008df0 <prvAddNewTaskToReadyList+0xd8>)
 8008d9a:	441a      	add	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f7fe fe07 	bl	80079b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008da8:	f7fe ffec 	bl	8007d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008dac:	4b0d      	ldr	r3, [pc, #52]	; (8008de4 <prvAddNewTaskToReadyList+0xcc>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00e      	beq.n	8008dd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008db4:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <prvAddNewTaskToReadyList+0xc8>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d207      	bcs.n	8008dd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <prvAddNewTaskToReadyList+0xdc>)
 8008dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dd2:	bf00      	nop
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	20004fec 	.word	0x20004fec
 8008de0:	20004b18 	.word	0x20004b18
 8008de4:	20004ff8 	.word	0x20004ff8
 8008de8:	20005008 	.word	0x20005008
 8008dec:	20004ff4 	.word	0x20004ff4
 8008df0:	20004b1c 	.word	0x20004b1c
 8008df4:	e000ed04 	.word	0xe000ed04

08008df8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d017      	beq.n	8008e3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e0a:	4b13      	ldr	r3, [pc, #76]	; (8008e58 <vTaskDelay+0x60>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <vTaskDelay+0x30>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	60bb      	str	r3, [r7, #8]
}
 8008e24:	bf00      	nop
 8008e26:	e7fe      	b.n	8008e26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e28:	f000 f880 	bl	8008f2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fda0 	bl	8009974 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e34:	f000 f888 	bl	8008f48 <xTaskResumeAll>
 8008e38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d107      	bne.n	8008e50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008e40:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <vTaskDelay+0x64>)
 8008e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e50:	bf00      	nop
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	20005014 	.word	0x20005014
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08a      	sub	sp, #40	; 0x28
 8008e64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e6e:	463a      	mov	r2, r7
 8008e70:	1d39      	adds	r1, r7, #4
 8008e72:	f107 0308 	add.w	r3, r7, #8
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe f8e6 	bl	8007048 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	9202      	str	r2, [sp, #8]
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	2300      	movs	r3, #0
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	460a      	mov	r2, r1
 8008e8e:	4921      	ldr	r1, [pc, #132]	; (8008f14 <vTaskStartScheduler+0xb4>)
 8008e90:	4821      	ldr	r0, [pc, #132]	; (8008f18 <vTaskStartScheduler+0xb8>)
 8008e92:	f7ff fe0f 	bl	8008ab4 <xTaskCreateStatic>
 8008e96:	4603      	mov	r3, r0
 8008e98:	4a20      	ldr	r2, [pc, #128]	; (8008f1c <vTaskStartScheduler+0xbc>)
 8008e9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e9c:	4b1f      	ldr	r3, [pc, #124]	; (8008f1c <vTaskStartScheduler+0xbc>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	e001      	b.n	8008eae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d102      	bne.n	8008eba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008eb4:	f000 fdb2 	bl	8009a1c <xTimerCreateTimerTask>
 8008eb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d116      	bne.n	8008eee <vTaskStartScheduler+0x8e>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	613b      	str	r3, [r7, #16]
}
 8008ed2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ed4:	4b12      	ldr	r3, [pc, #72]	; (8008f20 <vTaskStartScheduler+0xc0>)
 8008ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008edc:	4b11      	ldr	r3, [pc, #68]	; (8008f24 <vTaskStartScheduler+0xc4>)
 8008ede:	2201      	movs	r2, #1
 8008ee0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ee2:	4b11      	ldr	r3, [pc, #68]	; (8008f28 <vTaskStartScheduler+0xc8>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ee8:	f7fe fe7a 	bl	8007be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008eec:	e00e      	b.n	8008f0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef4:	d10a      	bne.n	8008f0c <vTaskStartScheduler+0xac>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	60fb      	str	r3, [r7, #12]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <vTaskStartScheduler+0xaa>
}
 8008f0c:	bf00      	nop
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	0800eb58 	.word	0x0800eb58
 8008f18:	08009681 	.word	0x08009681
 8008f1c:	20005010 	.word	0x20005010
 8008f20:	2000500c 	.word	0x2000500c
 8008f24:	20004ff8 	.word	0x20004ff8
 8008f28:	20004ff0 	.word	0x20004ff0

08008f2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f30:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <vTaskSuspendAll+0x18>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3301      	adds	r3, #1
 8008f36:	4a03      	ldr	r2, [pc, #12]	; (8008f44 <vTaskSuspendAll+0x18>)
 8008f38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f3a:	bf00      	nop
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	20005014 	.word	0x20005014

08008f48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f56:	4b42      	ldr	r3, [pc, #264]	; (8009060 <xTaskResumeAll+0x118>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10a      	bne.n	8008f74 <xTaskResumeAll+0x2c>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	603b      	str	r3, [r7, #0]
}
 8008f70:	bf00      	nop
 8008f72:	e7fe      	b.n	8008f72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f74:	f7fe fed6 	bl	8007d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f78:	4b39      	ldr	r3, [pc, #228]	; (8009060 <xTaskResumeAll+0x118>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	4a38      	ldr	r2, [pc, #224]	; (8009060 <xTaskResumeAll+0x118>)
 8008f80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f82:	4b37      	ldr	r3, [pc, #220]	; (8009060 <xTaskResumeAll+0x118>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d162      	bne.n	8009050 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f8a:	4b36      	ldr	r3, [pc, #216]	; (8009064 <xTaskResumeAll+0x11c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d05e      	beq.n	8009050 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f92:	e02f      	b.n	8008ff4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f94:	4b34      	ldr	r3, [pc, #208]	; (8009068 <xTaskResumeAll+0x120>)
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3318      	adds	r3, #24
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fe fd65 	bl	8007a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe fd60 	bl	8007a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb4:	4b2d      	ldr	r3, [pc, #180]	; (800906c <xTaskResumeAll+0x124>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d903      	bls.n	8008fc4 <xTaskResumeAll+0x7c>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc0:	4a2a      	ldr	r2, [pc, #168]	; (800906c <xTaskResumeAll+0x124>)
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc8:	4613      	mov	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4a27      	ldr	r2, [pc, #156]	; (8009070 <xTaskResumeAll+0x128>)
 8008fd2:	441a      	add	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4610      	mov	r0, r2
 8008fdc:	f7fe fceb 	bl	80079b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe4:	4b23      	ldr	r3, [pc, #140]	; (8009074 <xTaskResumeAll+0x12c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d302      	bcc.n	8008ff4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008fee:	4b22      	ldr	r3, [pc, #136]	; (8009078 <xTaskResumeAll+0x130>)
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ff4:	4b1c      	ldr	r3, [pc, #112]	; (8009068 <xTaskResumeAll+0x120>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1cb      	bne.n	8008f94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009002:	f000 fbf3 	bl	80097ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009006:	4b1d      	ldr	r3, [pc, #116]	; (800907c <xTaskResumeAll+0x134>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d010      	beq.n	8009034 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009012:	f000 f847 	bl	80090a4 <xTaskIncrementTick>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800901c:	4b16      	ldr	r3, [pc, #88]	; (8009078 <xTaskResumeAll+0x130>)
 800901e:	2201      	movs	r2, #1
 8009020:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3b01      	subs	r3, #1
 8009026:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1f1      	bne.n	8009012 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800902e:	4b13      	ldr	r3, [pc, #76]	; (800907c <xTaskResumeAll+0x134>)
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009034:	4b10      	ldr	r3, [pc, #64]	; (8009078 <xTaskResumeAll+0x130>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d009      	beq.n	8009050 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800903c:	2301      	movs	r3, #1
 800903e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009040:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <xTaskResumeAll+0x138>)
 8009042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009050:	f7fe fe98 	bl	8007d84 <vPortExitCritical>

	return xAlreadyYielded;
 8009054:	68bb      	ldr	r3, [r7, #8]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20005014 	.word	0x20005014
 8009064:	20004fec 	.word	0x20004fec
 8009068:	20004fac 	.word	0x20004fac
 800906c:	20004ff4 	.word	0x20004ff4
 8009070:	20004b1c 	.word	0x20004b1c
 8009074:	20004b18 	.word	0x20004b18
 8009078:	20005000 	.word	0x20005000
 800907c:	20004ffc 	.word	0x20004ffc
 8009080:	e000ed04 	.word	0xe000ed04

08009084 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800908a:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <xTaskGetTickCount+0x1c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009090:	687b      	ldr	r3, [r7, #4]
}
 8009092:	4618      	mov	r0, r3
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	20004ff0 	.word	0x20004ff0

080090a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090aa:	2300      	movs	r3, #0
 80090ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ae:	4b4f      	ldr	r3, [pc, #316]	; (80091ec <xTaskIncrementTick+0x148>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f040 808f 	bne.w	80091d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090b8:	4b4d      	ldr	r3, [pc, #308]	; (80091f0 <xTaskIncrementTick+0x14c>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3301      	adds	r3, #1
 80090be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090c0:	4a4b      	ldr	r2, [pc, #300]	; (80091f0 <xTaskIncrementTick+0x14c>)
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d120      	bne.n	800910e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80090cc:	4b49      	ldr	r3, [pc, #292]	; (80091f4 <xTaskIncrementTick+0x150>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <xTaskIncrementTick+0x48>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	603b      	str	r3, [r7, #0]
}
 80090e8:	bf00      	nop
 80090ea:	e7fe      	b.n	80090ea <xTaskIncrementTick+0x46>
 80090ec:	4b41      	ldr	r3, [pc, #260]	; (80091f4 <xTaskIncrementTick+0x150>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60fb      	str	r3, [r7, #12]
 80090f2:	4b41      	ldr	r3, [pc, #260]	; (80091f8 <xTaskIncrementTick+0x154>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a3f      	ldr	r2, [pc, #252]	; (80091f4 <xTaskIncrementTick+0x150>)
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	4a3f      	ldr	r2, [pc, #252]	; (80091f8 <xTaskIncrementTick+0x154>)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	4b3e      	ldr	r3, [pc, #248]	; (80091fc <xTaskIncrementTick+0x158>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3301      	adds	r3, #1
 8009106:	4a3d      	ldr	r2, [pc, #244]	; (80091fc <xTaskIncrementTick+0x158>)
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	f000 fb6f 	bl	80097ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800910e:	4b3c      	ldr	r3, [pc, #240]	; (8009200 <xTaskIncrementTick+0x15c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	429a      	cmp	r2, r3
 8009116:	d349      	bcc.n	80091ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009118:	4b36      	ldr	r3, [pc, #216]	; (80091f4 <xTaskIncrementTick+0x150>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d104      	bne.n	800912c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009122:	4b37      	ldr	r3, [pc, #220]	; (8009200 <xTaskIncrementTick+0x15c>)
 8009124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009128:	601a      	str	r2, [r3, #0]
					break;
 800912a:	e03f      	b.n	80091ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800912c:	4b31      	ldr	r3, [pc, #196]	; (80091f4 <xTaskIncrementTick+0x150>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	429a      	cmp	r2, r3
 8009142:	d203      	bcs.n	800914c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009144:	4a2e      	ldr	r2, [pc, #184]	; (8009200 <xTaskIncrementTick+0x15c>)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800914a:	e02f      	b.n	80091ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	3304      	adds	r3, #4
 8009150:	4618      	mov	r0, r3
 8009152:	f7fe fc8d 	bl	8007a70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	d004      	beq.n	8009168 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	3318      	adds	r3, #24
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe fc84 	bl	8007a70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916c:	4b25      	ldr	r3, [pc, #148]	; (8009204 <xTaskIncrementTick+0x160>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d903      	bls.n	800917c <xTaskIncrementTick+0xd8>
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	4a22      	ldr	r2, [pc, #136]	; (8009204 <xTaskIncrementTick+0x160>)
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4a1f      	ldr	r2, [pc, #124]	; (8009208 <xTaskIncrementTick+0x164>)
 800918a:	441a      	add	r2, r3
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	4610      	mov	r0, r2
 8009194:	f7fe fc0f 	bl	80079b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919c:	4b1b      	ldr	r3, [pc, #108]	; (800920c <xTaskIncrementTick+0x168>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d3b8      	bcc.n	8009118 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80091a6:	2301      	movs	r3, #1
 80091a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091aa:	e7b5      	b.n	8009118 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091ac:	4b17      	ldr	r3, [pc, #92]	; (800920c <xTaskIncrementTick+0x168>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b2:	4915      	ldr	r1, [pc, #84]	; (8009208 <xTaskIncrementTick+0x164>)
 80091b4:	4613      	mov	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	440b      	add	r3, r1
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d901      	bls.n	80091c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80091c4:	2301      	movs	r3, #1
 80091c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80091c8:	4b11      	ldr	r3, [pc, #68]	; (8009210 <xTaskIncrementTick+0x16c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d007      	beq.n	80091e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80091d0:	2301      	movs	r3, #1
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	e004      	b.n	80091e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80091d6:	4b0f      	ldr	r3, [pc, #60]	; (8009214 <xTaskIncrementTick+0x170>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3301      	adds	r3, #1
 80091dc:	4a0d      	ldr	r2, [pc, #52]	; (8009214 <xTaskIncrementTick+0x170>)
 80091de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091e0:	697b      	ldr	r3, [r7, #20]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	20005014 	.word	0x20005014
 80091f0:	20004ff0 	.word	0x20004ff0
 80091f4:	20004fa4 	.word	0x20004fa4
 80091f8:	20004fa8 	.word	0x20004fa8
 80091fc:	20005004 	.word	0x20005004
 8009200:	2000500c 	.word	0x2000500c
 8009204:	20004ff4 	.word	0x20004ff4
 8009208:	20004b1c 	.word	0x20004b1c
 800920c:	20004b18 	.word	0x20004b18
 8009210:	20005000 	.word	0x20005000
 8009214:	20004ffc 	.word	0x20004ffc

08009218 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800921e:	4b28      	ldr	r3, [pc, #160]	; (80092c0 <vTaskSwitchContext+0xa8>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d003      	beq.n	800922e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009226:	4b27      	ldr	r3, [pc, #156]	; (80092c4 <vTaskSwitchContext+0xac>)
 8009228:	2201      	movs	r2, #1
 800922a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800922c:	e041      	b.n	80092b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800922e:	4b25      	ldr	r3, [pc, #148]	; (80092c4 <vTaskSwitchContext+0xac>)
 8009230:	2200      	movs	r2, #0
 8009232:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009234:	4b24      	ldr	r3, [pc, #144]	; (80092c8 <vTaskSwitchContext+0xb0>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60fb      	str	r3, [r7, #12]
 800923a:	e010      	b.n	800925e <vTaskSwitchContext+0x46>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <vTaskSwitchContext+0x40>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	607b      	str	r3, [r7, #4]
}
 8009254:	bf00      	nop
 8009256:	e7fe      	b.n	8009256 <vTaskSwitchContext+0x3e>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	3b01      	subs	r3, #1
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	491b      	ldr	r1, [pc, #108]	; (80092cc <vTaskSwitchContext+0xb4>)
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	440b      	add	r3, r1
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0e4      	beq.n	800923c <vTaskSwitchContext+0x24>
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	4613      	mov	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4a13      	ldr	r2, [pc, #76]	; (80092cc <vTaskSwitchContext+0xb4>)
 800927e:	4413      	add	r3, r2
 8009280:	60bb      	str	r3, [r7, #8]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	605a      	str	r2, [r3, #4]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	3308      	adds	r3, #8
 8009294:	429a      	cmp	r2, r3
 8009296:	d104      	bne.n	80092a2 <vTaskSwitchContext+0x8a>
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	605a      	str	r2, [r3, #4]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	4a09      	ldr	r2, [pc, #36]	; (80092d0 <vTaskSwitchContext+0xb8>)
 80092aa:	6013      	str	r3, [r2, #0]
 80092ac:	4a06      	ldr	r2, [pc, #24]	; (80092c8 <vTaskSwitchContext+0xb0>)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6013      	str	r3, [r2, #0]
}
 80092b2:	bf00      	nop
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20005014 	.word	0x20005014
 80092c4:	20005000 	.word	0x20005000
 80092c8:	20004ff4 	.word	0x20004ff4
 80092cc:	20004b1c 	.word	0x20004b1c
 80092d0:	20004b18 	.word	0x20004b18

080092d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10a      	bne.n	80092fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	60fb      	str	r3, [r7, #12]
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092fa:	4b07      	ldr	r3, [pc, #28]	; (8009318 <vTaskPlaceOnEventList+0x44>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3318      	adds	r3, #24
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7fe fb7b 	bl	80079fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009308:	2101      	movs	r1, #1
 800930a:	6838      	ldr	r0, [r7, #0]
 800930c:	f000 fb32 	bl	8009974 <prvAddCurrentTaskToDelayedList>
}
 8009310:	bf00      	nop
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20004b18 	.word	0x20004b18

0800931c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10a      	bne.n	8009344 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	617b      	str	r3, [r7, #20]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009344:	4b11      	ldr	r3, [pc, #68]	; (800938c <vTaskPlaceOnUnorderedEventList+0x70>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	613b      	str	r3, [r7, #16]
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009362:	4b0b      	ldr	r3, [pc, #44]	; (8009390 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800936c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800936e:	4b08      	ldr	r3, [pc, #32]	; (8009390 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3318      	adds	r3, #24
 8009374:	4619      	mov	r1, r3
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7fe fb1d 	bl	80079b6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800937c:	2101      	movs	r1, #1
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 faf8 	bl	8009974 <prvAddCurrentTaskToDelayedList>
}
 8009384:	bf00      	nop
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20005014 	.word	0x20005014
 8009390:	20004b18 	.word	0x20004b18

08009394 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10a      	bne.n	80093bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	617b      	str	r3, [r7, #20]
}
 80093b8:	bf00      	nop
 80093ba:	e7fe      	b.n	80093ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093bc:	4b0a      	ldr	r3, [pc, #40]	; (80093e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3318      	adds	r3, #24
 80093c2:	4619      	mov	r1, r3
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f7fe faf6 	bl	80079b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80093d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	68b8      	ldr	r0, [r7, #8]
 80093da:	f000 facb 	bl	8009974 <prvAddCurrentTaskToDelayedList>
	}
 80093de:	bf00      	nop
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20004b18 	.word	0x20004b18

080093ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	60fb      	str	r3, [r7, #12]
}
 8009414:	bf00      	nop
 8009416:	e7fe      	b.n	8009416 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	3318      	adds	r3, #24
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe fb27 	bl	8007a70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009422:	4b1e      	ldr	r3, [pc, #120]	; (800949c <xTaskRemoveFromEventList+0xb0>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d11d      	bne.n	8009466 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	3304      	adds	r3, #4
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fb1e 	bl	8007a70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009438:	4b19      	ldr	r3, [pc, #100]	; (80094a0 <xTaskRemoveFromEventList+0xb4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d903      	bls.n	8009448 <xTaskRemoveFromEventList+0x5c>
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	4a16      	ldr	r2, [pc, #88]	; (80094a0 <xTaskRemoveFromEventList+0xb4>)
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944c:	4613      	mov	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4a13      	ldr	r2, [pc, #76]	; (80094a4 <xTaskRemoveFromEventList+0xb8>)
 8009456:	441a      	add	r2, r3
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	3304      	adds	r3, #4
 800945c:	4619      	mov	r1, r3
 800945e:	4610      	mov	r0, r2
 8009460:	f7fe faa9 	bl	80079b6 <vListInsertEnd>
 8009464:	e005      	b.n	8009472 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	3318      	adds	r3, #24
 800946a:	4619      	mov	r1, r3
 800946c:	480e      	ldr	r0, [pc, #56]	; (80094a8 <xTaskRemoveFromEventList+0xbc>)
 800946e:	f7fe faa2 	bl	80079b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009476:	4b0d      	ldr	r3, [pc, #52]	; (80094ac <xTaskRemoveFromEventList+0xc0>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947c:	429a      	cmp	r2, r3
 800947e:	d905      	bls.n	800948c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009480:	2301      	movs	r3, #1
 8009482:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009484:	4b0a      	ldr	r3, [pc, #40]	; (80094b0 <xTaskRemoveFromEventList+0xc4>)
 8009486:	2201      	movs	r2, #1
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	e001      	b.n	8009490 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800948c:	2300      	movs	r3, #0
 800948e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009490:	697b      	ldr	r3, [r7, #20]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20005014 	.word	0x20005014
 80094a0:	20004ff4 	.word	0x20004ff4
 80094a4:	20004b1c 	.word	0x20004b1c
 80094a8:	20004fac 	.word	0x20004fac
 80094ac:	20004b18 	.word	0x20004b18
 80094b0:	20005000 	.word	0x20005000

080094b4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80094be:	4b29      	ldr	r3, [pc, #164]	; (8009564 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10a      	bne.n	80094dc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80094c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	613b      	str	r3, [r7, #16]
}
 80094d8:	bf00      	nop
 80094da:	e7fe      	b.n	80094da <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10a      	bne.n	8009508 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	60fb      	str	r3, [r7, #12]
}
 8009504:	bf00      	nop
 8009506:	e7fe      	b.n	8009506 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7fe fab1 	bl	8007a70 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	3304      	adds	r3, #4
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe faac 	bl	8007a70 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951c:	4b12      	ldr	r3, [pc, #72]	; (8009568 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d903      	bls.n	800952c <vTaskRemoveFromUnorderedEventList+0x78>
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009528:	4a0f      	ldr	r2, [pc, #60]	; (8009568 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009530:	4613      	mov	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4a0c      	ldr	r2, [pc, #48]	; (800956c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800953a:	441a      	add	r2, r3
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	3304      	adds	r3, #4
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f7fe fa37 	bl	80079b6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954c:	4b08      	ldr	r3, [pc, #32]	; (8009570 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009552:	429a      	cmp	r2, r3
 8009554:	d902      	bls.n	800955c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009556:	4b07      	ldr	r3, [pc, #28]	; (8009574 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009558:	2201      	movs	r2, #1
 800955a:	601a      	str	r2, [r3, #0]
	}
}
 800955c:	bf00      	nop
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20005014 	.word	0x20005014
 8009568:	20004ff4 	.word	0x20004ff4
 800956c:	20004b1c 	.word	0x20004b1c
 8009570:	20004b18 	.word	0x20004b18
 8009574:	20005000 	.word	0x20005000

08009578 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009580:	4b06      	ldr	r3, [pc, #24]	; (800959c <vTaskInternalSetTimeOutState+0x24>)
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009588:	4b05      	ldr	r3, [pc, #20]	; (80095a0 <vTaskInternalSetTimeOutState+0x28>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	605a      	str	r2, [r3, #4]
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	20005004 	.word	0x20005004
 80095a0:	20004ff0 	.word	0x20004ff0

080095a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10a      	bne.n	80095ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	613b      	str	r3, [r7, #16]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	60fb      	str	r3, [r7, #12]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80095e6:	f7fe fb9d 	bl	8007d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095ea:	4b1d      	ldr	r3, [pc, #116]	; (8009660 <xTaskCheckForTimeOut+0xbc>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	69ba      	ldr	r2, [r7, #24]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009602:	d102      	bne.n	800960a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009604:	2300      	movs	r3, #0
 8009606:	61fb      	str	r3, [r7, #28]
 8009608:	e023      	b.n	8009652 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	4b15      	ldr	r3, [pc, #84]	; (8009664 <xTaskCheckForTimeOut+0xc0>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d007      	beq.n	8009626 <xTaskCheckForTimeOut+0x82>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	429a      	cmp	r2, r3
 800961e:	d302      	bcc.n	8009626 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	61fb      	str	r3, [r7, #28]
 8009624:	e015      	b.n	8009652 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	429a      	cmp	r2, r3
 800962e:	d20b      	bcs.n	8009648 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	1ad2      	subs	r2, r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff ff9b 	bl	8009578 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009642:	2300      	movs	r3, #0
 8009644:	61fb      	str	r3, [r7, #28]
 8009646:	e004      	b.n	8009652 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800964e:	2301      	movs	r3, #1
 8009650:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009652:	f7fe fb97 	bl	8007d84 <vPortExitCritical>

	return xReturn;
 8009656:	69fb      	ldr	r3, [r7, #28]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3720      	adds	r7, #32
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20004ff0 	.word	0x20004ff0
 8009664:	20005004 	.word	0x20005004

08009668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009668:	b480      	push	{r7}
 800966a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800966c:	4b03      	ldr	r3, [pc, #12]	; (800967c <vTaskMissedYield+0x14>)
 800966e:	2201      	movs	r2, #1
 8009670:	601a      	str	r2, [r3, #0]
}
 8009672:	bf00      	nop
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	20005000 	.word	0x20005000

08009680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009688:	f000 f852 	bl	8009730 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800968c:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <prvIdleTask+0x28>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d9f9      	bls.n	8009688 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009694:	4b05      	ldr	r3, [pc, #20]	; (80096ac <prvIdleTask+0x2c>)
 8009696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096a4:	e7f0      	b.n	8009688 <prvIdleTask+0x8>
 80096a6:	bf00      	nop
 80096a8:	20004b1c 	.word	0x20004b1c
 80096ac:	e000ed04 	.word	0xe000ed04

080096b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096b6:	2300      	movs	r3, #0
 80096b8:	607b      	str	r3, [r7, #4]
 80096ba:	e00c      	b.n	80096d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	4613      	mov	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4a12      	ldr	r2, [pc, #72]	; (8009710 <prvInitialiseTaskLists+0x60>)
 80096c8:	4413      	add	r3, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe f946 	bl	800795c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3301      	adds	r3, #1
 80096d4:	607b      	str	r3, [r7, #4]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b37      	cmp	r3, #55	; 0x37
 80096da:	d9ef      	bls.n	80096bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096dc:	480d      	ldr	r0, [pc, #52]	; (8009714 <prvInitialiseTaskLists+0x64>)
 80096de:	f7fe f93d 	bl	800795c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096e2:	480d      	ldr	r0, [pc, #52]	; (8009718 <prvInitialiseTaskLists+0x68>)
 80096e4:	f7fe f93a 	bl	800795c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096e8:	480c      	ldr	r0, [pc, #48]	; (800971c <prvInitialiseTaskLists+0x6c>)
 80096ea:	f7fe f937 	bl	800795c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096ee:	480c      	ldr	r0, [pc, #48]	; (8009720 <prvInitialiseTaskLists+0x70>)
 80096f0:	f7fe f934 	bl	800795c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096f4:	480b      	ldr	r0, [pc, #44]	; (8009724 <prvInitialiseTaskLists+0x74>)
 80096f6:	f7fe f931 	bl	800795c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096fa:	4b0b      	ldr	r3, [pc, #44]	; (8009728 <prvInitialiseTaskLists+0x78>)
 80096fc:	4a05      	ldr	r2, [pc, #20]	; (8009714 <prvInitialiseTaskLists+0x64>)
 80096fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009700:	4b0a      	ldr	r3, [pc, #40]	; (800972c <prvInitialiseTaskLists+0x7c>)
 8009702:	4a05      	ldr	r2, [pc, #20]	; (8009718 <prvInitialiseTaskLists+0x68>)
 8009704:	601a      	str	r2, [r3, #0]
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20004b1c 	.word	0x20004b1c
 8009714:	20004f7c 	.word	0x20004f7c
 8009718:	20004f90 	.word	0x20004f90
 800971c:	20004fac 	.word	0x20004fac
 8009720:	20004fc0 	.word	0x20004fc0
 8009724:	20004fd8 	.word	0x20004fd8
 8009728:	20004fa4 	.word	0x20004fa4
 800972c:	20004fa8 	.word	0x20004fa8

08009730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009736:	e019      	b.n	800976c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009738:	f7fe faf4 	bl	8007d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800973c:	4b10      	ldr	r3, [pc, #64]	; (8009780 <prvCheckTasksWaitingTermination+0x50>)
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3304      	adds	r3, #4
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe f991 	bl	8007a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800974e:	4b0d      	ldr	r3, [pc, #52]	; (8009784 <prvCheckTasksWaitingTermination+0x54>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3b01      	subs	r3, #1
 8009754:	4a0b      	ldr	r2, [pc, #44]	; (8009784 <prvCheckTasksWaitingTermination+0x54>)
 8009756:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009758:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <prvCheckTasksWaitingTermination+0x58>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3b01      	subs	r3, #1
 800975e:	4a0a      	ldr	r2, [pc, #40]	; (8009788 <prvCheckTasksWaitingTermination+0x58>)
 8009760:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009762:	f7fe fb0f 	bl	8007d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f810 	bl	800978c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800976c:	4b06      	ldr	r3, [pc, #24]	; (8009788 <prvCheckTasksWaitingTermination+0x58>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e1      	bne.n	8009738 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20004fc0 	.word	0x20004fc0
 8009784:	20004fec 	.word	0x20004fec
 8009788:	20004fd4 	.word	0x20004fd4

0800978c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800979a:	2b00      	cmp	r3, #0
 800979c:	d108      	bne.n	80097b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fd ffbc 	bl	8007720 <vPortFree>
				vPortFree( pxTCB );
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7fd ffb9 	bl	8007720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097ae:	e018      	b.n	80097e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d103      	bne.n	80097c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7fd ffb0 	bl	8007720 <vPortFree>
	}
 80097c0:	e00f      	b.n	80097e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d00a      	beq.n	80097e2 <prvDeleteTCB+0x56>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	60fb      	str	r3, [r7, #12]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <prvDeleteTCB+0x54>
	}
 80097e2:	bf00      	nop
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097f2:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <prvResetNextTaskUnblockTime+0x38>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097fc:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <prvResetNextTaskUnblockTime+0x3c>)
 80097fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009804:	e008      	b.n	8009818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009806:	4b07      	ldr	r3, [pc, #28]	; (8009824 <prvResetNextTaskUnblockTime+0x38>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	4a04      	ldr	r2, [pc, #16]	; (8009828 <prvResetNextTaskUnblockTime+0x3c>)
 8009816:	6013      	str	r3, [r2, #0]
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	20004fa4 	.word	0x20004fa4
 8009828:	2000500c 	.word	0x2000500c

0800982c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009832:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <xTaskGetSchedulerState+0x34>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d102      	bne.n	8009840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800983a:	2301      	movs	r3, #1
 800983c:	607b      	str	r3, [r7, #4]
 800983e:	e008      	b.n	8009852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009840:	4b08      	ldr	r3, [pc, #32]	; (8009864 <xTaskGetSchedulerState+0x38>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009848:	2302      	movs	r3, #2
 800984a:	607b      	str	r3, [r7, #4]
 800984c:	e001      	b.n	8009852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800984e:	2300      	movs	r3, #0
 8009850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009852:	687b      	ldr	r3, [r7, #4]
	}
 8009854:	4618      	mov	r0, r3
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	20004ff8 	.word	0x20004ff8
 8009864:	20005014 	.word	0x20005014

08009868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009874:	2300      	movs	r3, #0
 8009876:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d056      	beq.n	800992c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800987e:	4b2e      	ldr	r3, [pc, #184]	; (8009938 <xTaskPriorityDisinherit+0xd0>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	429a      	cmp	r2, r3
 8009886:	d00a      	beq.n	800989e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	60fb      	str	r3, [r7, #12]
}
 800989a:	bf00      	nop
 800989c:	e7fe      	b.n	800989c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10a      	bne.n	80098bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	60bb      	str	r3, [r7, #8]
}
 80098b8:	bf00      	nop
 80098ba:	e7fe      	b.n	80098ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c0:	1e5a      	subs	r2, r3, #1
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d02c      	beq.n	800992c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d128      	bne.n	800992c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	3304      	adds	r3, #4
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe f8c6 	bl	8007a70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fc:	4b0f      	ldr	r3, [pc, #60]	; (800993c <xTaskPriorityDisinherit+0xd4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	429a      	cmp	r2, r3
 8009902:	d903      	bls.n	800990c <xTaskPriorityDisinherit+0xa4>
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009908:	4a0c      	ldr	r2, [pc, #48]	; (800993c <xTaskPriorityDisinherit+0xd4>)
 800990a:	6013      	str	r3, [r2, #0]
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4a09      	ldr	r2, [pc, #36]	; (8009940 <xTaskPriorityDisinherit+0xd8>)
 800991a:	441a      	add	r2, r3
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	3304      	adds	r3, #4
 8009920:	4619      	mov	r1, r3
 8009922:	4610      	mov	r0, r2
 8009924:	f7fe f847 	bl	80079b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009928:	2301      	movs	r3, #1
 800992a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800992c:	697b      	ldr	r3, [r7, #20]
	}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20004b18 	.word	0x20004b18
 800993c:	20004ff4 	.word	0x20004ff4
 8009940:	20004b1c 	.word	0x20004b1c

08009944 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800994a:	4b09      	ldr	r3, [pc, #36]	; (8009970 <uxTaskResetEventItemValue+0x2c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009952:	4b07      	ldr	r3, [pc, #28]	; (8009970 <uxTaskResetEventItemValue+0x2c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009958:	4b05      	ldr	r3, [pc, #20]	; (8009970 <uxTaskResetEventItemValue+0x2c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009960:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8009962:	687b      	ldr	r3, [r7, #4]
}
 8009964:	4618      	mov	r0, r3
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	20004b18 	.word	0x20004b18

08009974 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800997e:	4b21      	ldr	r3, [pc, #132]	; (8009a04 <prvAddCurrentTaskToDelayedList+0x90>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009984:	4b20      	ldr	r3, [pc, #128]	; (8009a08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	3304      	adds	r3, #4
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe f870 	bl	8007a70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009996:	d10a      	bne.n	80099ae <prvAddCurrentTaskToDelayedList+0x3a>
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d007      	beq.n	80099ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800999e:	4b1a      	ldr	r3, [pc, #104]	; (8009a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3304      	adds	r3, #4
 80099a4:	4619      	mov	r1, r3
 80099a6:	4819      	ldr	r0, [pc, #100]	; (8009a0c <prvAddCurrentTaskToDelayedList+0x98>)
 80099a8:	f7fe f805 	bl	80079b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099ac:	e026      	b.n	80099fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4413      	add	r3, r2
 80099b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099b6:	4b14      	ldr	r3, [pc, #80]	; (8009a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d209      	bcs.n	80099da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099c6:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	4b0f      	ldr	r3, [pc, #60]	; (8009a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	3304      	adds	r3, #4
 80099d0:	4619      	mov	r1, r3
 80099d2:	4610      	mov	r0, r2
 80099d4:	f7fe f813 	bl	80079fe <vListInsert>
}
 80099d8:	e010      	b.n	80099fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099da:	4b0e      	ldr	r3, [pc, #56]	; (8009a14 <prvAddCurrentTaskToDelayedList+0xa0>)
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4619      	mov	r1, r3
 80099e6:	4610      	mov	r0, r2
 80099e8:	f7fe f809 	bl	80079fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099ec:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d202      	bcs.n	80099fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099f6:	4a08      	ldr	r2, [pc, #32]	; (8009a18 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	6013      	str	r3, [r2, #0]
}
 80099fc:	bf00      	nop
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20004ff0 	.word	0x20004ff0
 8009a08:	20004b18 	.word	0x20004b18
 8009a0c:	20004fd8 	.word	0x20004fd8
 8009a10:	20004fa8 	.word	0x20004fa8
 8009a14:	20004fa4 	.word	0x20004fa4
 8009a18:	2000500c 	.word	0x2000500c

08009a1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08a      	sub	sp, #40	; 0x28
 8009a20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a26:	f000 fb07 	bl	800a038 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a2a:	4b1c      	ldr	r3, [pc, #112]	; (8009a9c <xTimerCreateTimerTask+0x80>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d021      	beq.n	8009a76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a32:	2300      	movs	r3, #0
 8009a34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a3a:	1d3a      	adds	r2, r7, #4
 8009a3c:	f107 0108 	add.w	r1, r7, #8
 8009a40:	f107 030c 	add.w	r3, r7, #12
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fd fb19 	bl	800707c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	9202      	str	r2, [sp, #8]
 8009a52:	9301      	str	r3, [sp, #4]
 8009a54:	2302      	movs	r3, #2
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	2300      	movs	r3, #0
 8009a5a:	460a      	mov	r2, r1
 8009a5c:	4910      	ldr	r1, [pc, #64]	; (8009aa0 <xTimerCreateTimerTask+0x84>)
 8009a5e:	4811      	ldr	r0, [pc, #68]	; (8009aa4 <xTimerCreateTimerTask+0x88>)
 8009a60:	f7ff f828 	bl	8008ab4 <xTaskCreateStatic>
 8009a64:	4603      	mov	r3, r0
 8009a66:	4a10      	ldr	r2, [pc, #64]	; (8009aa8 <xTimerCreateTimerTask+0x8c>)
 8009a68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a6a:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <xTimerCreateTimerTask+0x8c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a72:	2301      	movs	r3, #1
 8009a74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	613b      	str	r3, [r7, #16]
}
 8009a8e:	bf00      	nop
 8009a90:	e7fe      	b.n	8009a90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a92:	697b      	ldr	r3, [r7, #20]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20005048 	.word	0x20005048
 8009aa0:	0800eb60 	.word	0x0800eb60
 8009aa4:	08009be1 	.word	0x08009be1
 8009aa8:	2000504c 	.word	0x2000504c

08009aac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08a      	sub	sp, #40	; 0x28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10a      	bne.n	8009ada <xTimerGenericCommand+0x2e>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	623b      	str	r3, [r7, #32]
}
 8009ad6:	bf00      	nop
 8009ad8:	e7fe      	b.n	8009ad8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ada:	4b1a      	ldr	r3, [pc, #104]	; (8009b44 <xTimerGenericCommand+0x98>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d02a      	beq.n	8009b38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	2b05      	cmp	r3, #5
 8009af2:	dc18      	bgt.n	8009b26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009af4:	f7ff fe9a 	bl	800982c <xTaskGetSchedulerState>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d109      	bne.n	8009b12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009afe:	4b11      	ldr	r3, [pc, #68]	; (8009b44 <xTimerGenericCommand+0x98>)
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	f107 0110 	add.w	r1, r7, #16
 8009b06:	2300      	movs	r3, #0
 8009b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b0a:	f7fe fb6b 	bl	80081e4 <xQueueGenericSend>
 8009b0e:	6278      	str	r0, [r7, #36]	; 0x24
 8009b10:	e012      	b.n	8009b38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b12:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <xTimerGenericCommand+0x98>)
 8009b14:	6818      	ldr	r0, [r3, #0]
 8009b16:	f107 0110 	add.w	r1, r7, #16
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f7fe fb61 	bl	80081e4 <xQueueGenericSend>
 8009b22:	6278      	str	r0, [r7, #36]	; 0x24
 8009b24:	e008      	b.n	8009b38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b26:	4b07      	ldr	r3, [pc, #28]	; (8009b44 <xTimerGenericCommand+0x98>)
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	f107 0110 	add.w	r1, r7, #16
 8009b2e:	2300      	movs	r3, #0
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	f7fe fc55 	bl	80083e0 <xQueueGenericSendFromISR>
 8009b36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3728      	adds	r7, #40	; 0x28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20005048 	.word	0x20005048

08009b48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af02      	add	r7, sp, #8
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b52:	4b22      	ldr	r3, [pc, #136]	; (8009bdc <prvProcessExpiredTimer+0x94>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fd ff85 	bl	8007a70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d022      	beq.n	8009bba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	699a      	ldr	r2, [r3, #24]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	18d1      	adds	r1, r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	6978      	ldr	r0, [r7, #20]
 8009b82:	f000 f8d1 	bl	8009d28 <prvInsertTimerInActiveList>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d01f      	beq.n	8009bcc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	2300      	movs	r3, #0
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	2100      	movs	r1, #0
 8009b96:	6978      	ldr	r0, [r7, #20]
 8009b98:	f7ff ff88 	bl	8009aac <xTimerGenericCommand>
 8009b9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d113      	bne.n	8009bcc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	60fb      	str	r3, [r7, #12]
}
 8009bb6:	bf00      	nop
 8009bb8:	e7fe      	b.n	8009bb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bc0:	f023 0301 	bic.w	r3, r3, #1
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	6a1b      	ldr	r3, [r3, #32]
 8009bd0:	6978      	ldr	r0, [r7, #20]
 8009bd2:	4798      	blx	r3
}
 8009bd4:	bf00      	nop
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	20005040 	.word	0x20005040

08009be0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009be8:	f107 0308 	add.w	r3, r7, #8
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f857 	bl	8009ca0 <prvGetNextExpireTime>
 8009bf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f000 f803 	bl	8009c04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009bfe:	f000 f8d5 	bl	8009dac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c02:	e7f1      	b.n	8009be8 <prvTimerTask+0x8>

08009c04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c0e:	f7ff f98d 	bl	8008f2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c12:	f107 0308 	add.w	r3, r7, #8
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 f866 	bl	8009ce8 <prvSampleTimeNow>
 8009c1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d130      	bne.n	8009c86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10a      	bne.n	8009c40 <prvProcessTimerOrBlockTask+0x3c>
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d806      	bhi.n	8009c40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c32:	f7ff f989 	bl	8008f48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c36:	68f9      	ldr	r1, [r7, #12]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff ff85 	bl	8009b48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c3e:	e024      	b.n	8009c8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d008      	beq.n	8009c58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c46:	4b13      	ldr	r3, [pc, #76]	; (8009c94 <prvProcessTimerOrBlockTask+0x90>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <prvProcessTimerOrBlockTask+0x50>
 8009c50:	2301      	movs	r3, #1
 8009c52:	e000      	b.n	8009c56 <prvProcessTimerOrBlockTask+0x52>
 8009c54:	2300      	movs	r3, #0
 8009c56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c58:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <prvProcessTimerOrBlockTask+0x94>)
 8009c5a:	6818      	ldr	r0, [r3, #0]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	4619      	mov	r1, r3
 8009c66:	f7fe fef1 	bl	8008a4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c6a:	f7ff f96d 	bl	8008f48 <xTaskResumeAll>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10a      	bne.n	8009c8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c74:	4b09      	ldr	r3, [pc, #36]	; (8009c9c <prvProcessTimerOrBlockTask+0x98>)
 8009c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	f3bf 8f6f 	isb	sy
}
 8009c84:	e001      	b.n	8009c8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c86:	f7ff f95f 	bl	8008f48 <xTaskResumeAll>
}
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	20005044 	.word	0x20005044
 8009c98:	20005048 	.word	0x20005048
 8009c9c:	e000ed04 	.word	0xe000ed04

08009ca0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ca8:	4b0e      	ldr	r3, [pc, #56]	; (8009ce4 <prvGetNextExpireTime+0x44>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <prvGetNextExpireTime+0x16>
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	e000      	b.n	8009cb8 <prvGetNextExpireTime+0x18>
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d105      	bne.n	8009cd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cc4:	4b07      	ldr	r3, [pc, #28]	; (8009ce4 <prvGetNextExpireTime+0x44>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	60fb      	str	r3, [r7, #12]
 8009cce:	e001      	b.n	8009cd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20005040 	.word	0x20005040

08009ce8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cf0:	f7ff f9c8 	bl	8009084 <xTaskGetTickCount>
 8009cf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <prvSampleTimeNow+0x3c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d205      	bcs.n	8009d0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d00:	f000 f936 	bl	8009f70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	e002      	b.n	8009d12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d12:	4a04      	ldr	r2, [pc, #16]	; (8009d24 <prvSampleTimeNow+0x3c>)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d18:	68fb      	ldr	r3, [r7, #12]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20005050 	.word	0x20005050

08009d28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d36:	2300      	movs	r3, #0
 8009d38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d812      	bhi.n	8009d74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	1ad2      	subs	r2, r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d302      	bcc.n	8009d62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	617b      	str	r3, [r7, #20]
 8009d60:	e01b      	b.n	8009d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d62:	4b10      	ldr	r3, [pc, #64]	; (8009da4 <prvInsertTimerInActiveList+0x7c>)
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	f7fd fe46 	bl	80079fe <vListInsert>
 8009d72:	e012      	b.n	8009d9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d206      	bcs.n	8009d8a <prvInsertTimerInActiveList+0x62>
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d302      	bcc.n	8009d8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d84:	2301      	movs	r3, #1
 8009d86:	617b      	str	r3, [r7, #20]
 8009d88:	e007      	b.n	8009d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d8a:	4b07      	ldr	r3, [pc, #28]	; (8009da8 <prvInsertTimerInActiveList+0x80>)
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3304      	adds	r3, #4
 8009d92:	4619      	mov	r1, r3
 8009d94:	4610      	mov	r0, r2
 8009d96:	f7fd fe32 	bl	80079fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d9a:	697b      	ldr	r3, [r7, #20]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	20005044 	.word	0x20005044
 8009da8:	20005040 	.word	0x20005040

08009dac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08e      	sub	sp, #56	; 0x38
 8009db0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009db2:	e0ca      	b.n	8009f4a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	da18      	bge.n	8009dec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009dba:	1d3b      	adds	r3, r7, #4
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10a      	bne.n	8009ddc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	61fb      	str	r3, [r7, #28]
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009de2:	6850      	ldr	r0, [r2, #4]
 8009de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009de6:	6892      	ldr	r2, [r2, #8]
 8009de8:	4611      	mov	r1, r2
 8009dea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f2c0 80aa 	blt.w	8009f48 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	3304      	adds	r3, #4
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fd fe33 	bl	8007a70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e0a:	463b      	mov	r3, r7
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7ff ff6b 	bl	8009ce8 <prvSampleTimeNow>
 8009e12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b09      	cmp	r3, #9
 8009e18:	f200 8097 	bhi.w	8009f4a <prvProcessReceivedCommands+0x19e>
 8009e1c:	a201      	add	r2, pc, #4	; (adr r2, 8009e24 <prvProcessReceivedCommands+0x78>)
 8009e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e22:	bf00      	nop
 8009e24:	08009e4d 	.word	0x08009e4d
 8009e28:	08009e4d 	.word	0x08009e4d
 8009e2c:	08009e4d 	.word	0x08009e4d
 8009e30:	08009ec1 	.word	0x08009ec1
 8009e34:	08009ed5 	.word	0x08009ed5
 8009e38:	08009f1f 	.word	0x08009f1f
 8009e3c:	08009e4d 	.word	0x08009e4d
 8009e40:	08009e4d 	.word	0x08009e4d
 8009e44:	08009ec1 	.word	0x08009ec1
 8009e48:	08009ed5 	.word	0x08009ed5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e52:	f043 0301 	orr.w	r3, r3, #1
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	18d1      	adds	r1, r2, r3
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e6c:	f7ff ff5c 	bl	8009d28 <prvInsertTimerInActiveList>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d069      	beq.n	8009f4a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e84:	f003 0304 	and.w	r3, r3, #4
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d05e      	beq.n	8009f4a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	441a      	add	r2, r3
 8009e94:	2300      	movs	r3, #0
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e9e:	f7ff fe05 	bl	8009aac <xTimerGenericCommand>
 8009ea2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d14f      	bne.n	8009f4a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	61bb      	str	r3, [r7, #24]
}
 8009ebc:	bf00      	nop
 8009ebe:	e7fe      	b.n	8009ebe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ec6:	f023 0301 	bic.w	r3, r3, #1
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009ed2:	e03a      	b.n	8009f4a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eda:	f043 0301 	orr.w	r3, r3, #1
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	617b      	str	r3, [r7, #20]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	699a      	ldr	r2, [r3, #24]
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	18d1      	adds	r1, r2, r3
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f18:	f7ff ff06 	bl	8009d28 <prvInsertTimerInActiveList>
					break;
 8009f1c:	e015      	b.n	8009f4a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d103      	bne.n	8009f34 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f2e:	f7fd fbf7 	bl	8007720 <vPortFree>
 8009f32:	e00a      	b.n	8009f4a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f3a:	f023 0301 	bic.w	r3, r3, #1
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f46:	e000      	b.n	8009f4a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f4a:	4b08      	ldr	r3, [pc, #32]	; (8009f6c <prvProcessReceivedCommands+0x1c0>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	1d39      	adds	r1, r7, #4
 8009f50:	2200      	movs	r2, #0
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe fae0 	bl	8008518 <xQueueReceive>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f47f af2a 	bne.w	8009db4 <prvProcessReceivedCommands+0x8>
	}
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	3730      	adds	r7, #48	; 0x30
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	20005048 	.word	0x20005048

08009f70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f76:	e048      	b.n	800a00a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f78:	4b2d      	ldr	r3, [pc, #180]	; (800a030 <prvSwitchTimerLists+0xc0>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f82:	4b2b      	ldr	r3, [pc, #172]	; (800a030 <prvSwitchTimerLists+0xc0>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fd fd6d 	bl	8007a70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fa4:	f003 0304 	and.w	r3, r3, #4
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d02e      	beq.n	800a00a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d90e      	bls.n	8009fdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fca:	4b19      	ldr	r3, [pc, #100]	; (800a030 <prvSwitchTimerLists+0xc0>)
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	f7fd fd12 	bl	80079fe <vListInsert>
 8009fda:	e016      	b.n	800a00a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fdc:	2300      	movs	r3, #0
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f7ff fd60 	bl	8009aac <xTimerGenericCommand>
 8009fec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10a      	bne.n	800a00a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	603b      	str	r3, [r7, #0]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <prvSwitchTimerLists+0xc0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1b1      	bne.n	8009f78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a014:	4b06      	ldr	r3, [pc, #24]	; (800a030 <prvSwitchTimerLists+0xc0>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a01a:	4b06      	ldr	r3, [pc, #24]	; (800a034 <prvSwitchTimerLists+0xc4>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a04      	ldr	r2, [pc, #16]	; (800a030 <prvSwitchTimerLists+0xc0>)
 800a020:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a022:	4a04      	ldr	r2, [pc, #16]	; (800a034 <prvSwitchTimerLists+0xc4>)
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	6013      	str	r3, [r2, #0]
}
 800a028:	bf00      	nop
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20005040 	.word	0x20005040
 800a034:	20005044 	.word	0x20005044

0800a038 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a03e:	f7fd fe71 	bl	8007d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a042:	4b15      	ldr	r3, [pc, #84]	; (800a098 <prvCheckForValidListAndQueue+0x60>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d120      	bne.n	800a08c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a04a:	4814      	ldr	r0, [pc, #80]	; (800a09c <prvCheckForValidListAndQueue+0x64>)
 800a04c:	f7fd fc86 	bl	800795c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a050:	4813      	ldr	r0, [pc, #76]	; (800a0a0 <prvCheckForValidListAndQueue+0x68>)
 800a052:	f7fd fc83 	bl	800795c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a056:	4b13      	ldr	r3, [pc, #76]	; (800a0a4 <prvCheckForValidListAndQueue+0x6c>)
 800a058:	4a10      	ldr	r2, [pc, #64]	; (800a09c <prvCheckForValidListAndQueue+0x64>)
 800a05a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a05c:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <prvCheckForValidListAndQueue+0x70>)
 800a05e:	4a10      	ldr	r2, [pc, #64]	; (800a0a0 <prvCheckForValidListAndQueue+0x68>)
 800a060:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a062:	2300      	movs	r3, #0
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	4b11      	ldr	r3, [pc, #68]	; (800a0ac <prvCheckForValidListAndQueue+0x74>)
 800a068:	4a11      	ldr	r2, [pc, #68]	; (800a0b0 <prvCheckForValidListAndQueue+0x78>)
 800a06a:	2110      	movs	r1, #16
 800a06c:	200a      	movs	r0, #10
 800a06e:	f7fd ffe3 	bl	8008038 <xQueueGenericCreateStatic>
 800a072:	4603      	mov	r3, r0
 800a074:	4a08      	ldr	r2, [pc, #32]	; (800a098 <prvCheckForValidListAndQueue+0x60>)
 800a076:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a078:	4b07      	ldr	r3, [pc, #28]	; (800a098 <prvCheckForValidListAndQueue+0x60>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a080:	4b05      	ldr	r3, [pc, #20]	; (800a098 <prvCheckForValidListAndQueue+0x60>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	490b      	ldr	r1, [pc, #44]	; (800a0b4 <prvCheckForValidListAndQueue+0x7c>)
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe fcb6 	bl	80089f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a08c:	f7fd fe7a 	bl	8007d84 <vPortExitCritical>
}
 800a090:	bf00      	nop
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20005048 	.word	0x20005048
 800a09c:	20005018 	.word	0x20005018
 800a0a0:	2000502c 	.word	0x2000502c
 800a0a4:	20005040 	.word	0x20005040
 800a0a8:	20005044 	.word	0x20005044
 800a0ac:	200050f4 	.word	0x200050f4
 800a0b0:	20005054 	.word	0x20005054
 800a0b4:	0800eb68 	.word	0x0800eb68

0800a0b8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08a      	sub	sp, #40	; 0x28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a0c6:	f06f 0301 	mvn.w	r3, #1
 800a0ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0d8:	4b06      	ldr	r3, [pc, #24]	; (800a0f4 <xTimerPendFunctionCallFromISR+0x3c>)
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	f107 0114 	add.w	r1, r7, #20
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	f7fe f97c 	bl	80083e0 <xQueueGenericSendFromISR>
 800a0e8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3728      	adds	r7, #40	; 0x28
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20005048 	.word	0x20005048

0800a0f8 <__errno>:
 800a0f8:	4b01      	ldr	r3, [pc, #4]	; (800a100 <__errno+0x8>)
 800a0fa:	6818      	ldr	r0, [r3, #0]
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	20000028 	.word	0x20000028

0800a104 <__libc_init_array>:
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	4d0d      	ldr	r5, [pc, #52]	; (800a13c <__libc_init_array+0x38>)
 800a108:	4c0d      	ldr	r4, [pc, #52]	; (800a140 <__libc_init_array+0x3c>)
 800a10a:	1b64      	subs	r4, r4, r5
 800a10c:	10a4      	asrs	r4, r4, #2
 800a10e:	2600      	movs	r6, #0
 800a110:	42a6      	cmp	r6, r4
 800a112:	d109      	bne.n	800a128 <__libc_init_array+0x24>
 800a114:	4d0b      	ldr	r5, [pc, #44]	; (800a144 <__libc_init_array+0x40>)
 800a116:	4c0c      	ldr	r4, [pc, #48]	; (800a148 <__libc_init_array+0x44>)
 800a118:	f004 fc8e 	bl	800ea38 <_init>
 800a11c:	1b64      	subs	r4, r4, r5
 800a11e:	10a4      	asrs	r4, r4, #2
 800a120:	2600      	movs	r6, #0
 800a122:	42a6      	cmp	r6, r4
 800a124:	d105      	bne.n	800a132 <__libc_init_array+0x2e>
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	f855 3b04 	ldr.w	r3, [r5], #4
 800a12c:	4798      	blx	r3
 800a12e:	3601      	adds	r6, #1
 800a130:	e7ee      	b.n	800a110 <__libc_init_array+0xc>
 800a132:	f855 3b04 	ldr.w	r3, [r5], #4
 800a136:	4798      	blx	r3
 800a138:	3601      	adds	r6, #1
 800a13a:	e7f2      	b.n	800a122 <__libc_init_array+0x1e>
 800a13c:	080117cc 	.word	0x080117cc
 800a140:	080117cc 	.word	0x080117cc
 800a144:	080117cc 	.word	0x080117cc
 800a148:	080117d0 	.word	0x080117d0

0800a14c <memcpy>:
 800a14c:	440a      	add	r2, r1
 800a14e:	4291      	cmp	r1, r2
 800a150:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a154:	d100      	bne.n	800a158 <memcpy+0xc>
 800a156:	4770      	bx	lr
 800a158:	b510      	push	{r4, lr}
 800a15a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a15e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a162:	4291      	cmp	r1, r2
 800a164:	d1f9      	bne.n	800a15a <memcpy+0xe>
 800a166:	bd10      	pop	{r4, pc}

0800a168 <memset>:
 800a168:	4402      	add	r2, r0
 800a16a:	4603      	mov	r3, r0
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d100      	bne.n	800a172 <memset+0xa>
 800a170:	4770      	bx	lr
 800a172:	f803 1b01 	strb.w	r1, [r3], #1
 800a176:	e7f9      	b.n	800a16c <memset+0x4>

0800a178 <__cvt>:
 800a178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a17c:	ec55 4b10 	vmov	r4, r5, d0
 800a180:	2d00      	cmp	r5, #0
 800a182:	460e      	mov	r6, r1
 800a184:	4619      	mov	r1, r3
 800a186:	462b      	mov	r3, r5
 800a188:	bfbb      	ittet	lt
 800a18a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a18e:	461d      	movlt	r5, r3
 800a190:	2300      	movge	r3, #0
 800a192:	232d      	movlt	r3, #45	; 0x2d
 800a194:	700b      	strb	r3, [r1, #0]
 800a196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a198:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a19c:	4691      	mov	r9, r2
 800a19e:	f023 0820 	bic.w	r8, r3, #32
 800a1a2:	bfbc      	itt	lt
 800a1a4:	4622      	movlt	r2, r4
 800a1a6:	4614      	movlt	r4, r2
 800a1a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a1ac:	d005      	beq.n	800a1ba <__cvt+0x42>
 800a1ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a1b2:	d100      	bne.n	800a1b6 <__cvt+0x3e>
 800a1b4:	3601      	adds	r6, #1
 800a1b6:	2102      	movs	r1, #2
 800a1b8:	e000      	b.n	800a1bc <__cvt+0x44>
 800a1ba:	2103      	movs	r1, #3
 800a1bc:	ab03      	add	r3, sp, #12
 800a1be:	9301      	str	r3, [sp, #4]
 800a1c0:	ab02      	add	r3, sp, #8
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	ec45 4b10 	vmov	d0, r4, r5
 800a1c8:	4653      	mov	r3, sl
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	f001 fdac 	bl	800bd28 <_dtoa_r>
 800a1d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	d102      	bne.n	800a1de <__cvt+0x66>
 800a1d8:	f019 0f01 	tst.w	r9, #1
 800a1dc:	d022      	beq.n	800a224 <__cvt+0xac>
 800a1de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a1e2:	eb07 0906 	add.w	r9, r7, r6
 800a1e6:	d110      	bne.n	800a20a <__cvt+0x92>
 800a1e8:	783b      	ldrb	r3, [r7, #0]
 800a1ea:	2b30      	cmp	r3, #48	; 0x30
 800a1ec:	d10a      	bne.n	800a204 <__cvt+0x8c>
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	f7f6 fc6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1fa:	b918      	cbnz	r0, 800a204 <__cvt+0x8c>
 800a1fc:	f1c6 0601 	rsb	r6, r6, #1
 800a200:	f8ca 6000 	str.w	r6, [sl]
 800a204:	f8da 3000 	ldr.w	r3, [sl]
 800a208:	4499      	add	r9, r3
 800a20a:	2200      	movs	r2, #0
 800a20c:	2300      	movs	r3, #0
 800a20e:	4620      	mov	r0, r4
 800a210:	4629      	mov	r1, r5
 800a212:	f7f6 fc61 	bl	8000ad8 <__aeabi_dcmpeq>
 800a216:	b108      	cbz	r0, 800a21c <__cvt+0xa4>
 800a218:	f8cd 900c 	str.w	r9, [sp, #12]
 800a21c:	2230      	movs	r2, #48	; 0x30
 800a21e:	9b03      	ldr	r3, [sp, #12]
 800a220:	454b      	cmp	r3, r9
 800a222:	d307      	bcc.n	800a234 <__cvt+0xbc>
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a228:	1bdb      	subs	r3, r3, r7
 800a22a:	4638      	mov	r0, r7
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	b004      	add	sp, #16
 800a230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a234:	1c59      	adds	r1, r3, #1
 800a236:	9103      	str	r1, [sp, #12]
 800a238:	701a      	strb	r2, [r3, #0]
 800a23a:	e7f0      	b.n	800a21e <__cvt+0xa6>

0800a23c <__exponent>:
 800a23c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a23e:	4603      	mov	r3, r0
 800a240:	2900      	cmp	r1, #0
 800a242:	bfb8      	it	lt
 800a244:	4249      	neglt	r1, r1
 800a246:	f803 2b02 	strb.w	r2, [r3], #2
 800a24a:	bfb4      	ite	lt
 800a24c:	222d      	movlt	r2, #45	; 0x2d
 800a24e:	222b      	movge	r2, #43	; 0x2b
 800a250:	2909      	cmp	r1, #9
 800a252:	7042      	strb	r2, [r0, #1]
 800a254:	dd2a      	ble.n	800a2ac <__exponent+0x70>
 800a256:	f10d 0407 	add.w	r4, sp, #7
 800a25a:	46a4      	mov	ip, r4
 800a25c:	270a      	movs	r7, #10
 800a25e:	46a6      	mov	lr, r4
 800a260:	460a      	mov	r2, r1
 800a262:	fb91 f6f7 	sdiv	r6, r1, r7
 800a266:	fb07 1516 	mls	r5, r7, r6, r1
 800a26a:	3530      	adds	r5, #48	; 0x30
 800a26c:	2a63      	cmp	r2, #99	; 0x63
 800a26e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a272:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a276:	4631      	mov	r1, r6
 800a278:	dcf1      	bgt.n	800a25e <__exponent+0x22>
 800a27a:	3130      	adds	r1, #48	; 0x30
 800a27c:	f1ae 0502 	sub.w	r5, lr, #2
 800a280:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a284:	1c44      	adds	r4, r0, #1
 800a286:	4629      	mov	r1, r5
 800a288:	4561      	cmp	r1, ip
 800a28a:	d30a      	bcc.n	800a2a2 <__exponent+0x66>
 800a28c:	f10d 0209 	add.w	r2, sp, #9
 800a290:	eba2 020e 	sub.w	r2, r2, lr
 800a294:	4565      	cmp	r5, ip
 800a296:	bf88      	it	hi
 800a298:	2200      	movhi	r2, #0
 800a29a:	4413      	add	r3, r2
 800a29c:	1a18      	subs	r0, r3, r0
 800a29e:	b003      	add	sp, #12
 800a2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a2aa:	e7ed      	b.n	800a288 <__exponent+0x4c>
 800a2ac:	2330      	movs	r3, #48	; 0x30
 800a2ae:	3130      	adds	r1, #48	; 0x30
 800a2b0:	7083      	strb	r3, [r0, #2]
 800a2b2:	70c1      	strb	r1, [r0, #3]
 800a2b4:	1d03      	adds	r3, r0, #4
 800a2b6:	e7f1      	b.n	800a29c <__exponent+0x60>

0800a2b8 <_printf_float>:
 800a2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	ed2d 8b02 	vpush	{d8}
 800a2c0:	b08d      	sub	sp, #52	; 0x34
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	461f      	mov	r7, r3
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	f002 fe89 	bl	800cfe4 <_localeconv_r>
 800a2d2:	f8d0 a000 	ldr.w	sl, [r0]
 800a2d6:	4650      	mov	r0, sl
 800a2d8:	f7f5 ff82 	bl	80001e0 <strlen>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	930a      	str	r3, [sp, #40]	; 0x28
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	9305      	str	r3, [sp, #20]
 800a2e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a2ec:	3307      	adds	r3, #7
 800a2ee:	f023 0307 	bic.w	r3, r3, #7
 800a2f2:	f103 0208 	add.w	r2, r3, #8
 800a2f6:	f8c8 2000 	str.w	r2, [r8]
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a302:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a306:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a30a:	9307      	str	r3, [sp, #28]
 800a30c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a310:	ee08 0a10 	vmov	s16, r0
 800a314:	4b9f      	ldr	r3, [pc, #636]	; (800a594 <_printf_float+0x2dc>)
 800a316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a31a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a31e:	f7f6 fc0d 	bl	8000b3c <__aeabi_dcmpun>
 800a322:	bb88      	cbnz	r0, 800a388 <_printf_float+0xd0>
 800a324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a328:	4b9a      	ldr	r3, [pc, #616]	; (800a594 <_printf_float+0x2dc>)
 800a32a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a32e:	f7f6 fbe7 	bl	8000b00 <__aeabi_dcmple>
 800a332:	bb48      	cbnz	r0, 800a388 <_printf_float+0xd0>
 800a334:	2200      	movs	r2, #0
 800a336:	2300      	movs	r3, #0
 800a338:	4640      	mov	r0, r8
 800a33a:	4649      	mov	r1, r9
 800a33c:	f7f6 fbd6 	bl	8000aec <__aeabi_dcmplt>
 800a340:	b110      	cbz	r0, 800a348 <_printf_float+0x90>
 800a342:	232d      	movs	r3, #45	; 0x2d
 800a344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a348:	4b93      	ldr	r3, [pc, #588]	; (800a598 <_printf_float+0x2e0>)
 800a34a:	4894      	ldr	r0, [pc, #592]	; (800a59c <_printf_float+0x2e4>)
 800a34c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a350:	bf94      	ite	ls
 800a352:	4698      	movls	r8, r3
 800a354:	4680      	movhi	r8, r0
 800a356:	2303      	movs	r3, #3
 800a358:	6123      	str	r3, [r4, #16]
 800a35a:	9b05      	ldr	r3, [sp, #20]
 800a35c:	f023 0204 	bic.w	r2, r3, #4
 800a360:	6022      	str	r2, [r4, #0]
 800a362:	f04f 0900 	mov.w	r9, #0
 800a366:	9700      	str	r7, [sp, #0]
 800a368:	4633      	mov	r3, r6
 800a36a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a36c:	4621      	mov	r1, r4
 800a36e:	4628      	mov	r0, r5
 800a370:	f000 f9d8 	bl	800a724 <_printf_common>
 800a374:	3001      	adds	r0, #1
 800a376:	f040 8090 	bne.w	800a49a <_printf_float+0x1e2>
 800a37a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a37e:	b00d      	add	sp, #52	; 0x34
 800a380:	ecbd 8b02 	vpop	{d8}
 800a384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a388:	4642      	mov	r2, r8
 800a38a:	464b      	mov	r3, r9
 800a38c:	4640      	mov	r0, r8
 800a38e:	4649      	mov	r1, r9
 800a390:	f7f6 fbd4 	bl	8000b3c <__aeabi_dcmpun>
 800a394:	b140      	cbz	r0, 800a3a8 <_printf_float+0xf0>
 800a396:	464b      	mov	r3, r9
 800a398:	2b00      	cmp	r3, #0
 800a39a:	bfbc      	itt	lt
 800a39c:	232d      	movlt	r3, #45	; 0x2d
 800a39e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a3a2:	487f      	ldr	r0, [pc, #508]	; (800a5a0 <_printf_float+0x2e8>)
 800a3a4:	4b7f      	ldr	r3, [pc, #508]	; (800a5a4 <_printf_float+0x2ec>)
 800a3a6:	e7d1      	b.n	800a34c <_printf_float+0x94>
 800a3a8:	6863      	ldr	r3, [r4, #4]
 800a3aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a3ae:	9206      	str	r2, [sp, #24]
 800a3b0:	1c5a      	adds	r2, r3, #1
 800a3b2:	d13f      	bne.n	800a434 <_printf_float+0x17c>
 800a3b4:	2306      	movs	r3, #6
 800a3b6:	6063      	str	r3, [r4, #4]
 800a3b8:	9b05      	ldr	r3, [sp, #20]
 800a3ba:	6861      	ldr	r1, [r4, #4]
 800a3bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	9303      	str	r3, [sp, #12]
 800a3c4:	ab0a      	add	r3, sp, #40	; 0x28
 800a3c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a3ca:	ab09      	add	r3, sp, #36	; 0x24
 800a3cc:	ec49 8b10 	vmov	d0, r8, r9
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	6022      	str	r2, [r4, #0]
 800a3d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7ff fecd 	bl	800a178 <__cvt>
 800a3de:	9b06      	ldr	r3, [sp, #24]
 800a3e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3e2:	2b47      	cmp	r3, #71	; 0x47
 800a3e4:	4680      	mov	r8, r0
 800a3e6:	d108      	bne.n	800a3fa <_printf_float+0x142>
 800a3e8:	1cc8      	adds	r0, r1, #3
 800a3ea:	db02      	blt.n	800a3f2 <_printf_float+0x13a>
 800a3ec:	6863      	ldr	r3, [r4, #4]
 800a3ee:	4299      	cmp	r1, r3
 800a3f0:	dd41      	ble.n	800a476 <_printf_float+0x1be>
 800a3f2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a3f6:	fa5f fb8b 	uxtb.w	fp, fp
 800a3fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a3fe:	d820      	bhi.n	800a442 <_printf_float+0x18a>
 800a400:	3901      	subs	r1, #1
 800a402:	465a      	mov	r2, fp
 800a404:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a408:	9109      	str	r1, [sp, #36]	; 0x24
 800a40a:	f7ff ff17 	bl	800a23c <__exponent>
 800a40e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a410:	1813      	adds	r3, r2, r0
 800a412:	2a01      	cmp	r2, #1
 800a414:	4681      	mov	r9, r0
 800a416:	6123      	str	r3, [r4, #16]
 800a418:	dc02      	bgt.n	800a420 <_printf_float+0x168>
 800a41a:	6822      	ldr	r2, [r4, #0]
 800a41c:	07d2      	lsls	r2, r2, #31
 800a41e:	d501      	bpl.n	800a424 <_printf_float+0x16c>
 800a420:	3301      	adds	r3, #1
 800a422:	6123      	str	r3, [r4, #16]
 800a424:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d09c      	beq.n	800a366 <_printf_float+0xae>
 800a42c:	232d      	movs	r3, #45	; 0x2d
 800a42e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a432:	e798      	b.n	800a366 <_printf_float+0xae>
 800a434:	9a06      	ldr	r2, [sp, #24]
 800a436:	2a47      	cmp	r2, #71	; 0x47
 800a438:	d1be      	bne.n	800a3b8 <_printf_float+0x100>
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1bc      	bne.n	800a3b8 <_printf_float+0x100>
 800a43e:	2301      	movs	r3, #1
 800a440:	e7b9      	b.n	800a3b6 <_printf_float+0xfe>
 800a442:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a446:	d118      	bne.n	800a47a <_printf_float+0x1c2>
 800a448:	2900      	cmp	r1, #0
 800a44a:	6863      	ldr	r3, [r4, #4]
 800a44c:	dd0b      	ble.n	800a466 <_printf_float+0x1ae>
 800a44e:	6121      	str	r1, [r4, #16]
 800a450:	b913      	cbnz	r3, 800a458 <_printf_float+0x1a0>
 800a452:	6822      	ldr	r2, [r4, #0]
 800a454:	07d0      	lsls	r0, r2, #31
 800a456:	d502      	bpl.n	800a45e <_printf_float+0x1a6>
 800a458:	3301      	adds	r3, #1
 800a45a:	440b      	add	r3, r1
 800a45c:	6123      	str	r3, [r4, #16]
 800a45e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a460:	f04f 0900 	mov.w	r9, #0
 800a464:	e7de      	b.n	800a424 <_printf_float+0x16c>
 800a466:	b913      	cbnz	r3, 800a46e <_printf_float+0x1b6>
 800a468:	6822      	ldr	r2, [r4, #0]
 800a46a:	07d2      	lsls	r2, r2, #31
 800a46c:	d501      	bpl.n	800a472 <_printf_float+0x1ba>
 800a46e:	3302      	adds	r3, #2
 800a470:	e7f4      	b.n	800a45c <_printf_float+0x1a4>
 800a472:	2301      	movs	r3, #1
 800a474:	e7f2      	b.n	800a45c <_printf_float+0x1a4>
 800a476:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47c:	4299      	cmp	r1, r3
 800a47e:	db05      	blt.n	800a48c <_printf_float+0x1d4>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	6121      	str	r1, [r4, #16]
 800a484:	07d8      	lsls	r0, r3, #31
 800a486:	d5ea      	bpl.n	800a45e <_printf_float+0x1a6>
 800a488:	1c4b      	adds	r3, r1, #1
 800a48a:	e7e7      	b.n	800a45c <_printf_float+0x1a4>
 800a48c:	2900      	cmp	r1, #0
 800a48e:	bfd4      	ite	le
 800a490:	f1c1 0202 	rsble	r2, r1, #2
 800a494:	2201      	movgt	r2, #1
 800a496:	4413      	add	r3, r2
 800a498:	e7e0      	b.n	800a45c <_printf_float+0x1a4>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	055a      	lsls	r2, r3, #21
 800a49e:	d407      	bmi.n	800a4b0 <_printf_float+0x1f8>
 800a4a0:	6923      	ldr	r3, [r4, #16]
 800a4a2:	4642      	mov	r2, r8
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	47b8      	blx	r7
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	d12c      	bne.n	800a508 <_printf_float+0x250>
 800a4ae:	e764      	b.n	800a37a <_printf_float+0xc2>
 800a4b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4b4:	f240 80e0 	bls.w	800a678 <_printf_float+0x3c0>
 800a4b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f7f6 fb0a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d034      	beq.n	800a532 <_printf_float+0x27a>
 800a4c8:	4a37      	ldr	r2, [pc, #220]	; (800a5a8 <_printf_float+0x2f0>)
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b8      	blx	r7
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	f43f af51 	beq.w	800a37a <_printf_float+0xc2>
 800a4d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	db02      	blt.n	800a4e6 <_printf_float+0x22e>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	07d8      	lsls	r0, r3, #31
 800a4e4:	d510      	bpl.n	800a508 <_printf_float+0x250>
 800a4e6:	ee18 3a10 	vmov	r3, s16
 800a4ea:	4652      	mov	r2, sl
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b8      	blx	r7
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	f43f af41 	beq.w	800a37a <_printf_float+0xc2>
 800a4f8:	f04f 0800 	mov.w	r8, #0
 800a4fc:	f104 091a 	add.w	r9, r4, #26
 800a500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a502:	3b01      	subs	r3, #1
 800a504:	4543      	cmp	r3, r8
 800a506:	dc09      	bgt.n	800a51c <_printf_float+0x264>
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	079b      	lsls	r3, r3, #30
 800a50c:	f100 8105 	bmi.w	800a71a <_printf_float+0x462>
 800a510:	68e0      	ldr	r0, [r4, #12]
 800a512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a514:	4298      	cmp	r0, r3
 800a516:	bfb8      	it	lt
 800a518:	4618      	movlt	r0, r3
 800a51a:	e730      	b.n	800a37e <_printf_float+0xc6>
 800a51c:	2301      	movs	r3, #1
 800a51e:	464a      	mov	r2, r9
 800a520:	4631      	mov	r1, r6
 800a522:	4628      	mov	r0, r5
 800a524:	47b8      	blx	r7
 800a526:	3001      	adds	r0, #1
 800a528:	f43f af27 	beq.w	800a37a <_printf_float+0xc2>
 800a52c:	f108 0801 	add.w	r8, r8, #1
 800a530:	e7e6      	b.n	800a500 <_printf_float+0x248>
 800a532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a534:	2b00      	cmp	r3, #0
 800a536:	dc39      	bgt.n	800a5ac <_printf_float+0x2f4>
 800a538:	4a1b      	ldr	r2, [pc, #108]	; (800a5a8 <_printf_float+0x2f0>)
 800a53a:	2301      	movs	r3, #1
 800a53c:	4631      	mov	r1, r6
 800a53e:	4628      	mov	r0, r5
 800a540:	47b8      	blx	r7
 800a542:	3001      	adds	r0, #1
 800a544:	f43f af19 	beq.w	800a37a <_printf_float+0xc2>
 800a548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a54c:	4313      	orrs	r3, r2
 800a54e:	d102      	bne.n	800a556 <_printf_float+0x29e>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	07d9      	lsls	r1, r3, #31
 800a554:	d5d8      	bpl.n	800a508 <_printf_float+0x250>
 800a556:	ee18 3a10 	vmov	r3, s16
 800a55a:	4652      	mov	r2, sl
 800a55c:	4631      	mov	r1, r6
 800a55e:	4628      	mov	r0, r5
 800a560:	47b8      	blx	r7
 800a562:	3001      	adds	r0, #1
 800a564:	f43f af09 	beq.w	800a37a <_printf_float+0xc2>
 800a568:	f04f 0900 	mov.w	r9, #0
 800a56c:	f104 0a1a 	add.w	sl, r4, #26
 800a570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a572:	425b      	negs	r3, r3
 800a574:	454b      	cmp	r3, r9
 800a576:	dc01      	bgt.n	800a57c <_printf_float+0x2c4>
 800a578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57a:	e792      	b.n	800a4a2 <_printf_float+0x1ea>
 800a57c:	2301      	movs	r3, #1
 800a57e:	4652      	mov	r2, sl
 800a580:	4631      	mov	r1, r6
 800a582:	4628      	mov	r0, r5
 800a584:	47b8      	blx	r7
 800a586:	3001      	adds	r0, #1
 800a588:	f43f aef7 	beq.w	800a37a <_printf_float+0xc2>
 800a58c:	f109 0901 	add.w	r9, r9, #1
 800a590:	e7ee      	b.n	800a570 <_printf_float+0x2b8>
 800a592:	bf00      	nop
 800a594:	7fefffff 	.word	0x7fefffff
 800a598:	08011320 	.word	0x08011320
 800a59c:	08011324 	.word	0x08011324
 800a5a0:	0801132c 	.word	0x0801132c
 800a5a4:	08011328 	.word	0x08011328
 800a5a8:	08011330 	.word	0x08011330
 800a5ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	bfa8      	it	ge
 800a5b4:	461a      	movge	r2, r3
 800a5b6:	2a00      	cmp	r2, #0
 800a5b8:	4691      	mov	r9, r2
 800a5ba:	dc37      	bgt.n	800a62c <_printf_float+0x374>
 800a5bc:	f04f 0b00 	mov.w	fp, #0
 800a5c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5c4:	f104 021a 	add.w	r2, r4, #26
 800a5c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5ca:	9305      	str	r3, [sp, #20]
 800a5cc:	eba3 0309 	sub.w	r3, r3, r9
 800a5d0:	455b      	cmp	r3, fp
 800a5d2:	dc33      	bgt.n	800a63c <_printf_float+0x384>
 800a5d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	db3b      	blt.n	800a654 <_printf_float+0x39c>
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	07da      	lsls	r2, r3, #31
 800a5e0:	d438      	bmi.n	800a654 <_printf_float+0x39c>
 800a5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5e4:	9a05      	ldr	r2, [sp, #20]
 800a5e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5e8:	1a9a      	subs	r2, r3, r2
 800a5ea:	eba3 0901 	sub.w	r9, r3, r1
 800a5ee:	4591      	cmp	r9, r2
 800a5f0:	bfa8      	it	ge
 800a5f2:	4691      	movge	r9, r2
 800a5f4:	f1b9 0f00 	cmp.w	r9, #0
 800a5f8:	dc35      	bgt.n	800a666 <_printf_float+0x3ae>
 800a5fa:	f04f 0800 	mov.w	r8, #0
 800a5fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a602:	f104 0a1a 	add.w	sl, r4, #26
 800a606:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a60a:	1a9b      	subs	r3, r3, r2
 800a60c:	eba3 0309 	sub.w	r3, r3, r9
 800a610:	4543      	cmp	r3, r8
 800a612:	f77f af79 	ble.w	800a508 <_printf_float+0x250>
 800a616:	2301      	movs	r3, #1
 800a618:	4652      	mov	r2, sl
 800a61a:	4631      	mov	r1, r6
 800a61c:	4628      	mov	r0, r5
 800a61e:	47b8      	blx	r7
 800a620:	3001      	adds	r0, #1
 800a622:	f43f aeaa 	beq.w	800a37a <_printf_float+0xc2>
 800a626:	f108 0801 	add.w	r8, r8, #1
 800a62a:	e7ec      	b.n	800a606 <_printf_float+0x34e>
 800a62c:	4613      	mov	r3, r2
 800a62e:	4631      	mov	r1, r6
 800a630:	4642      	mov	r2, r8
 800a632:	4628      	mov	r0, r5
 800a634:	47b8      	blx	r7
 800a636:	3001      	adds	r0, #1
 800a638:	d1c0      	bne.n	800a5bc <_printf_float+0x304>
 800a63a:	e69e      	b.n	800a37a <_printf_float+0xc2>
 800a63c:	2301      	movs	r3, #1
 800a63e:	4631      	mov	r1, r6
 800a640:	4628      	mov	r0, r5
 800a642:	9205      	str	r2, [sp, #20]
 800a644:	47b8      	blx	r7
 800a646:	3001      	adds	r0, #1
 800a648:	f43f ae97 	beq.w	800a37a <_printf_float+0xc2>
 800a64c:	9a05      	ldr	r2, [sp, #20]
 800a64e:	f10b 0b01 	add.w	fp, fp, #1
 800a652:	e7b9      	b.n	800a5c8 <_printf_float+0x310>
 800a654:	ee18 3a10 	vmov	r3, s16
 800a658:	4652      	mov	r2, sl
 800a65a:	4631      	mov	r1, r6
 800a65c:	4628      	mov	r0, r5
 800a65e:	47b8      	blx	r7
 800a660:	3001      	adds	r0, #1
 800a662:	d1be      	bne.n	800a5e2 <_printf_float+0x32a>
 800a664:	e689      	b.n	800a37a <_printf_float+0xc2>
 800a666:	9a05      	ldr	r2, [sp, #20]
 800a668:	464b      	mov	r3, r9
 800a66a:	4442      	add	r2, r8
 800a66c:	4631      	mov	r1, r6
 800a66e:	4628      	mov	r0, r5
 800a670:	47b8      	blx	r7
 800a672:	3001      	adds	r0, #1
 800a674:	d1c1      	bne.n	800a5fa <_printf_float+0x342>
 800a676:	e680      	b.n	800a37a <_printf_float+0xc2>
 800a678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a67a:	2a01      	cmp	r2, #1
 800a67c:	dc01      	bgt.n	800a682 <_printf_float+0x3ca>
 800a67e:	07db      	lsls	r3, r3, #31
 800a680:	d538      	bpl.n	800a6f4 <_printf_float+0x43c>
 800a682:	2301      	movs	r3, #1
 800a684:	4642      	mov	r2, r8
 800a686:	4631      	mov	r1, r6
 800a688:	4628      	mov	r0, r5
 800a68a:	47b8      	blx	r7
 800a68c:	3001      	adds	r0, #1
 800a68e:	f43f ae74 	beq.w	800a37a <_printf_float+0xc2>
 800a692:	ee18 3a10 	vmov	r3, s16
 800a696:	4652      	mov	r2, sl
 800a698:	4631      	mov	r1, r6
 800a69a:	4628      	mov	r0, r5
 800a69c:	47b8      	blx	r7
 800a69e:	3001      	adds	r0, #1
 800a6a0:	f43f ae6b 	beq.w	800a37a <_printf_float+0xc2>
 800a6a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	f7f6 fa14 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6b0:	b9d8      	cbnz	r0, 800a6ea <_printf_float+0x432>
 800a6b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b4:	f108 0201 	add.w	r2, r8, #1
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4628      	mov	r0, r5
 800a6be:	47b8      	blx	r7
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	d10e      	bne.n	800a6e2 <_printf_float+0x42a>
 800a6c4:	e659      	b.n	800a37a <_printf_float+0xc2>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	4652      	mov	r2, sl
 800a6ca:	4631      	mov	r1, r6
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	47b8      	blx	r7
 800a6d0:	3001      	adds	r0, #1
 800a6d2:	f43f ae52 	beq.w	800a37a <_printf_float+0xc2>
 800a6d6:	f108 0801 	add.w	r8, r8, #1
 800a6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	4543      	cmp	r3, r8
 800a6e0:	dcf1      	bgt.n	800a6c6 <_printf_float+0x40e>
 800a6e2:	464b      	mov	r3, r9
 800a6e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a6e8:	e6dc      	b.n	800a4a4 <_printf_float+0x1ec>
 800a6ea:	f04f 0800 	mov.w	r8, #0
 800a6ee:	f104 0a1a 	add.w	sl, r4, #26
 800a6f2:	e7f2      	b.n	800a6da <_printf_float+0x422>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	4642      	mov	r2, r8
 800a6f8:	e7df      	b.n	800a6ba <_printf_float+0x402>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	464a      	mov	r2, r9
 800a6fe:	4631      	mov	r1, r6
 800a700:	4628      	mov	r0, r5
 800a702:	47b8      	blx	r7
 800a704:	3001      	adds	r0, #1
 800a706:	f43f ae38 	beq.w	800a37a <_printf_float+0xc2>
 800a70a:	f108 0801 	add.w	r8, r8, #1
 800a70e:	68e3      	ldr	r3, [r4, #12]
 800a710:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a712:	1a5b      	subs	r3, r3, r1
 800a714:	4543      	cmp	r3, r8
 800a716:	dcf0      	bgt.n	800a6fa <_printf_float+0x442>
 800a718:	e6fa      	b.n	800a510 <_printf_float+0x258>
 800a71a:	f04f 0800 	mov.w	r8, #0
 800a71e:	f104 0919 	add.w	r9, r4, #25
 800a722:	e7f4      	b.n	800a70e <_printf_float+0x456>

0800a724 <_printf_common>:
 800a724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a728:	4616      	mov	r6, r2
 800a72a:	4699      	mov	r9, r3
 800a72c:	688a      	ldr	r2, [r1, #8]
 800a72e:	690b      	ldr	r3, [r1, #16]
 800a730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a734:	4293      	cmp	r3, r2
 800a736:	bfb8      	it	lt
 800a738:	4613      	movlt	r3, r2
 800a73a:	6033      	str	r3, [r6, #0]
 800a73c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a740:	4607      	mov	r7, r0
 800a742:	460c      	mov	r4, r1
 800a744:	b10a      	cbz	r2, 800a74a <_printf_common+0x26>
 800a746:	3301      	adds	r3, #1
 800a748:	6033      	str	r3, [r6, #0]
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	0699      	lsls	r1, r3, #26
 800a74e:	bf42      	ittt	mi
 800a750:	6833      	ldrmi	r3, [r6, #0]
 800a752:	3302      	addmi	r3, #2
 800a754:	6033      	strmi	r3, [r6, #0]
 800a756:	6825      	ldr	r5, [r4, #0]
 800a758:	f015 0506 	ands.w	r5, r5, #6
 800a75c:	d106      	bne.n	800a76c <_printf_common+0x48>
 800a75e:	f104 0a19 	add.w	sl, r4, #25
 800a762:	68e3      	ldr	r3, [r4, #12]
 800a764:	6832      	ldr	r2, [r6, #0]
 800a766:	1a9b      	subs	r3, r3, r2
 800a768:	42ab      	cmp	r3, r5
 800a76a:	dc26      	bgt.n	800a7ba <_printf_common+0x96>
 800a76c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a770:	1e13      	subs	r3, r2, #0
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	bf18      	it	ne
 800a776:	2301      	movne	r3, #1
 800a778:	0692      	lsls	r2, r2, #26
 800a77a:	d42b      	bmi.n	800a7d4 <_printf_common+0xb0>
 800a77c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a780:	4649      	mov	r1, r9
 800a782:	4638      	mov	r0, r7
 800a784:	47c0      	blx	r8
 800a786:	3001      	adds	r0, #1
 800a788:	d01e      	beq.n	800a7c8 <_printf_common+0xa4>
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	68e5      	ldr	r5, [r4, #12]
 800a78e:	6832      	ldr	r2, [r6, #0]
 800a790:	f003 0306 	and.w	r3, r3, #6
 800a794:	2b04      	cmp	r3, #4
 800a796:	bf08      	it	eq
 800a798:	1aad      	subeq	r5, r5, r2
 800a79a:	68a3      	ldr	r3, [r4, #8]
 800a79c:	6922      	ldr	r2, [r4, #16]
 800a79e:	bf0c      	ite	eq
 800a7a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7a4:	2500      	movne	r5, #0
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	bfc4      	itt	gt
 800a7aa:	1a9b      	subgt	r3, r3, r2
 800a7ac:	18ed      	addgt	r5, r5, r3
 800a7ae:	2600      	movs	r6, #0
 800a7b0:	341a      	adds	r4, #26
 800a7b2:	42b5      	cmp	r5, r6
 800a7b4:	d11a      	bne.n	800a7ec <_printf_common+0xc8>
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	e008      	b.n	800a7cc <_printf_common+0xa8>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	4652      	mov	r2, sl
 800a7be:	4649      	mov	r1, r9
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	47c0      	blx	r8
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	d103      	bne.n	800a7d0 <_printf_common+0xac>
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d0:	3501      	adds	r5, #1
 800a7d2:	e7c6      	b.n	800a762 <_printf_common+0x3e>
 800a7d4:	18e1      	adds	r1, r4, r3
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	2030      	movs	r0, #48	; 0x30
 800a7da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7de:	4422      	add	r2, r4
 800a7e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7e8:	3302      	adds	r3, #2
 800a7ea:	e7c7      	b.n	800a77c <_printf_common+0x58>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	4622      	mov	r2, r4
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	47c0      	blx	r8
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	d0e6      	beq.n	800a7c8 <_printf_common+0xa4>
 800a7fa:	3601      	adds	r6, #1
 800a7fc:	e7d9      	b.n	800a7b2 <_printf_common+0x8e>
	...

0800a800 <_printf_i>:
 800a800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a804:	7e0f      	ldrb	r7, [r1, #24]
 800a806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a808:	2f78      	cmp	r7, #120	; 0x78
 800a80a:	4691      	mov	r9, r2
 800a80c:	4680      	mov	r8, r0
 800a80e:	460c      	mov	r4, r1
 800a810:	469a      	mov	sl, r3
 800a812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a816:	d807      	bhi.n	800a828 <_printf_i+0x28>
 800a818:	2f62      	cmp	r7, #98	; 0x62
 800a81a:	d80a      	bhi.n	800a832 <_printf_i+0x32>
 800a81c:	2f00      	cmp	r7, #0
 800a81e:	f000 80d8 	beq.w	800a9d2 <_printf_i+0x1d2>
 800a822:	2f58      	cmp	r7, #88	; 0x58
 800a824:	f000 80a3 	beq.w	800a96e <_printf_i+0x16e>
 800a828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a82c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a830:	e03a      	b.n	800a8a8 <_printf_i+0xa8>
 800a832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a836:	2b15      	cmp	r3, #21
 800a838:	d8f6      	bhi.n	800a828 <_printf_i+0x28>
 800a83a:	a101      	add	r1, pc, #4	; (adr r1, 800a840 <_printf_i+0x40>)
 800a83c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a840:	0800a899 	.word	0x0800a899
 800a844:	0800a8ad 	.word	0x0800a8ad
 800a848:	0800a829 	.word	0x0800a829
 800a84c:	0800a829 	.word	0x0800a829
 800a850:	0800a829 	.word	0x0800a829
 800a854:	0800a829 	.word	0x0800a829
 800a858:	0800a8ad 	.word	0x0800a8ad
 800a85c:	0800a829 	.word	0x0800a829
 800a860:	0800a829 	.word	0x0800a829
 800a864:	0800a829 	.word	0x0800a829
 800a868:	0800a829 	.word	0x0800a829
 800a86c:	0800a9b9 	.word	0x0800a9b9
 800a870:	0800a8dd 	.word	0x0800a8dd
 800a874:	0800a99b 	.word	0x0800a99b
 800a878:	0800a829 	.word	0x0800a829
 800a87c:	0800a829 	.word	0x0800a829
 800a880:	0800a9db 	.word	0x0800a9db
 800a884:	0800a829 	.word	0x0800a829
 800a888:	0800a8dd 	.word	0x0800a8dd
 800a88c:	0800a829 	.word	0x0800a829
 800a890:	0800a829 	.word	0x0800a829
 800a894:	0800a9a3 	.word	0x0800a9a3
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	1d1a      	adds	r2, r3, #4
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	602a      	str	r2, [r5, #0]
 800a8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e0a3      	b.n	800a9f4 <_printf_i+0x1f4>
 800a8ac:	6820      	ldr	r0, [r4, #0]
 800a8ae:	6829      	ldr	r1, [r5, #0]
 800a8b0:	0606      	lsls	r6, r0, #24
 800a8b2:	f101 0304 	add.w	r3, r1, #4
 800a8b6:	d50a      	bpl.n	800a8ce <_printf_i+0xce>
 800a8b8:	680e      	ldr	r6, [r1, #0]
 800a8ba:	602b      	str	r3, [r5, #0]
 800a8bc:	2e00      	cmp	r6, #0
 800a8be:	da03      	bge.n	800a8c8 <_printf_i+0xc8>
 800a8c0:	232d      	movs	r3, #45	; 0x2d
 800a8c2:	4276      	negs	r6, r6
 800a8c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8c8:	485e      	ldr	r0, [pc, #376]	; (800aa44 <_printf_i+0x244>)
 800a8ca:	230a      	movs	r3, #10
 800a8cc:	e019      	b.n	800a902 <_printf_i+0x102>
 800a8ce:	680e      	ldr	r6, [r1, #0]
 800a8d0:	602b      	str	r3, [r5, #0]
 800a8d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8d6:	bf18      	it	ne
 800a8d8:	b236      	sxthne	r6, r6
 800a8da:	e7ef      	b.n	800a8bc <_printf_i+0xbc>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	6820      	ldr	r0, [r4, #0]
 800a8e0:	1d19      	adds	r1, r3, #4
 800a8e2:	6029      	str	r1, [r5, #0]
 800a8e4:	0601      	lsls	r1, r0, #24
 800a8e6:	d501      	bpl.n	800a8ec <_printf_i+0xec>
 800a8e8:	681e      	ldr	r6, [r3, #0]
 800a8ea:	e002      	b.n	800a8f2 <_printf_i+0xf2>
 800a8ec:	0646      	lsls	r6, r0, #25
 800a8ee:	d5fb      	bpl.n	800a8e8 <_printf_i+0xe8>
 800a8f0:	881e      	ldrh	r6, [r3, #0]
 800a8f2:	4854      	ldr	r0, [pc, #336]	; (800aa44 <_printf_i+0x244>)
 800a8f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a8f6:	bf0c      	ite	eq
 800a8f8:	2308      	moveq	r3, #8
 800a8fa:	230a      	movne	r3, #10
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a902:	6865      	ldr	r5, [r4, #4]
 800a904:	60a5      	str	r5, [r4, #8]
 800a906:	2d00      	cmp	r5, #0
 800a908:	bfa2      	ittt	ge
 800a90a:	6821      	ldrge	r1, [r4, #0]
 800a90c:	f021 0104 	bicge.w	r1, r1, #4
 800a910:	6021      	strge	r1, [r4, #0]
 800a912:	b90e      	cbnz	r6, 800a918 <_printf_i+0x118>
 800a914:	2d00      	cmp	r5, #0
 800a916:	d04d      	beq.n	800a9b4 <_printf_i+0x1b4>
 800a918:	4615      	mov	r5, r2
 800a91a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a91e:	fb03 6711 	mls	r7, r3, r1, r6
 800a922:	5dc7      	ldrb	r7, [r0, r7]
 800a924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a928:	4637      	mov	r7, r6
 800a92a:	42bb      	cmp	r3, r7
 800a92c:	460e      	mov	r6, r1
 800a92e:	d9f4      	bls.n	800a91a <_printf_i+0x11a>
 800a930:	2b08      	cmp	r3, #8
 800a932:	d10b      	bne.n	800a94c <_printf_i+0x14c>
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	07de      	lsls	r6, r3, #31
 800a938:	d508      	bpl.n	800a94c <_printf_i+0x14c>
 800a93a:	6923      	ldr	r3, [r4, #16]
 800a93c:	6861      	ldr	r1, [r4, #4]
 800a93e:	4299      	cmp	r1, r3
 800a940:	bfde      	ittt	le
 800a942:	2330      	movle	r3, #48	; 0x30
 800a944:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a948:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a94c:	1b52      	subs	r2, r2, r5
 800a94e:	6122      	str	r2, [r4, #16]
 800a950:	f8cd a000 	str.w	sl, [sp]
 800a954:	464b      	mov	r3, r9
 800a956:	aa03      	add	r2, sp, #12
 800a958:	4621      	mov	r1, r4
 800a95a:	4640      	mov	r0, r8
 800a95c:	f7ff fee2 	bl	800a724 <_printf_common>
 800a960:	3001      	adds	r0, #1
 800a962:	d14c      	bne.n	800a9fe <_printf_i+0x1fe>
 800a964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a968:	b004      	add	sp, #16
 800a96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a96e:	4835      	ldr	r0, [pc, #212]	; (800aa44 <_printf_i+0x244>)
 800a970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a974:	6829      	ldr	r1, [r5, #0]
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	f851 6b04 	ldr.w	r6, [r1], #4
 800a97c:	6029      	str	r1, [r5, #0]
 800a97e:	061d      	lsls	r5, r3, #24
 800a980:	d514      	bpl.n	800a9ac <_printf_i+0x1ac>
 800a982:	07df      	lsls	r7, r3, #31
 800a984:	bf44      	itt	mi
 800a986:	f043 0320 	orrmi.w	r3, r3, #32
 800a98a:	6023      	strmi	r3, [r4, #0]
 800a98c:	b91e      	cbnz	r6, 800a996 <_printf_i+0x196>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	f023 0320 	bic.w	r3, r3, #32
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	2310      	movs	r3, #16
 800a998:	e7b0      	b.n	800a8fc <_printf_i+0xfc>
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	f043 0320 	orr.w	r3, r3, #32
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	2378      	movs	r3, #120	; 0x78
 800a9a4:	4828      	ldr	r0, [pc, #160]	; (800aa48 <_printf_i+0x248>)
 800a9a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9aa:	e7e3      	b.n	800a974 <_printf_i+0x174>
 800a9ac:	0659      	lsls	r1, r3, #25
 800a9ae:	bf48      	it	mi
 800a9b0:	b2b6      	uxthmi	r6, r6
 800a9b2:	e7e6      	b.n	800a982 <_printf_i+0x182>
 800a9b4:	4615      	mov	r5, r2
 800a9b6:	e7bb      	b.n	800a930 <_printf_i+0x130>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	6826      	ldr	r6, [r4, #0]
 800a9bc:	6961      	ldr	r1, [r4, #20]
 800a9be:	1d18      	adds	r0, r3, #4
 800a9c0:	6028      	str	r0, [r5, #0]
 800a9c2:	0635      	lsls	r5, r6, #24
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	d501      	bpl.n	800a9cc <_printf_i+0x1cc>
 800a9c8:	6019      	str	r1, [r3, #0]
 800a9ca:	e002      	b.n	800a9d2 <_printf_i+0x1d2>
 800a9cc:	0670      	lsls	r0, r6, #25
 800a9ce:	d5fb      	bpl.n	800a9c8 <_printf_i+0x1c8>
 800a9d0:	8019      	strh	r1, [r3, #0]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	6123      	str	r3, [r4, #16]
 800a9d6:	4615      	mov	r5, r2
 800a9d8:	e7ba      	b.n	800a950 <_printf_i+0x150>
 800a9da:	682b      	ldr	r3, [r5, #0]
 800a9dc:	1d1a      	adds	r2, r3, #4
 800a9de:	602a      	str	r2, [r5, #0]
 800a9e0:	681d      	ldr	r5, [r3, #0]
 800a9e2:	6862      	ldr	r2, [r4, #4]
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f7f5 fc02 	bl	80001f0 <memchr>
 800a9ec:	b108      	cbz	r0, 800a9f2 <_printf_i+0x1f2>
 800a9ee:	1b40      	subs	r0, r0, r5
 800a9f0:	6060      	str	r0, [r4, #4]
 800a9f2:	6863      	ldr	r3, [r4, #4]
 800a9f4:	6123      	str	r3, [r4, #16]
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9fc:	e7a8      	b.n	800a950 <_printf_i+0x150>
 800a9fe:	6923      	ldr	r3, [r4, #16]
 800aa00:	462a      	mov	r2, r5
 800aa02:	4649      	mov	r1, r9
 800aa04:	4640      	mov	r0, r8
 800aa06:	47d0      	blx	sl
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d0ab      	beq.n	800a964 <_printf_i+0x164>
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	079b      	lsls	r3, r3, #30
 800aa10:	d413      	bmi.n	800aa3a <_printf_i+0x23a>
 800aa12:	68e0      	ldr	r0, [r4, #12]
 800aa14:	9b03      	ldr	r3, [sp, #12]
 800aa16:	4298      	cmp	r0, r3
 800aa18:	bfb8      	it	lt
 800aa1a:	4618      	movlt	r0, r3
 800aa1c:	e7a4      	b.n	800a968 <_printf_i+0x168>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	4632      	mov	r2, r6
 800aa22:	4649      	mov	r1, r9
 800aa24:	4640      	mov	r0, r8
 800aa26:	47d0      	blx	sl
 800aa28:	3001      	adds	r0, #1
 800aa2a:	d09b      	beq.n	800a964 <_printf_i+0x164>
 800aa2c:	3501      	adds	r5, #1
 800aa2e:	68e3      	ldr	r3, [r4, #12]
 800aa30:	9903      	ldr	r1, [sp, #12]
 800aa32:	1a5b      	subs	r3, r3, r1
 800aa34:	42ab      	cmp	r3, r5
 800aa36:	dcf2      	bgt.n	800aa1e <_printf_i+0x21e>
 800aa38:	e7eb      	b.n	800aa12 <_printf_i+0x212>
 800aa3a:	2500      	movs	r5, #0
 800aa3c:	f104 0619 	add.w	r6, r4, #25
 800aa40:	e7f5      	b.n	800aa2e <_printf_i+0x22e>
 800aa42:	bf00      	nop
 800aa44:	08011332 	.word	0x08011332
 800aa48:	08011343 	.word	0x08011343

0800aa4c <_scanf_float>:
 800aa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa50:	b087      	sub	sp, #28
 800aa52:	4617      	mov	r7, r2
 800aa54:	9303      	str	r3, [sp, #12]
 800aa56:	688b      	ldr	r3, [r1, #8]
 800aa58:	1e5a      	subs	r2, r3, #1
 800aa5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aa5e:	bf83      	ittte	hi
 800aa60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aa64:	195b      	addhi	r3, r3, r5
 800aa66:	9302      	strhi	r3, [sp, #8]
 800aa68:	2300      	movls	r3, #0
 800aa6a:	bf86      	itte	hi
 800aa6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa70:	608b      	strhi	r3, [r1, #8]
 800aa72:	9302      	strls	r3, [sp, #8]
 800aa74:	680b      	ldr	r3, [r1, #0]
 800aa76:	468b      	mov	fp, r1
 800aa78:	2500      	movs	r5, #0
 800aa7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aa7e:	f84b 3b1c 	str.w	r3, [fp], #28
 800aa82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa86:	4680      	mov	r8, r0
 800aa88:	460c      	mov	r4, r1
 800aa8a:	465e      	mov	r6, fp
 800aa8c:	46aa      	mov	sl, r5
 800aa8e:	46a9      	mov	r9, r5
 800aa90:	9501      	str	r5, [sp, #4]
 800aa92:	68a2      	ldr	r2, [r4, #8]
 800aa94:	b152      	cbz	r2, 800aaac <_scanf_float+0x60>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	2b4e      	cmp	r3, #78	; 0x4e
 800aa9c:	d864      	bhi.n	800ab68 <_scanf_float+0x11c>
 800aa9e:	2b40      	cmp	r3, #64	; 0x40
 800aaa0:	d83c      	bhi.n	800ab1c <_scanf_float+0xd0>
 800aaa2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aaa6:	b2c8      	uxtb	r0, r1
 800aaa8:	280e      	cmp	r0, #14
 800aaaa:	d93a      	bls.n	800ab22 <_scanf_float+0xd6>
 800aaac:	f1b9 0f00 	cmp.w	r9, #0
 800aab0:	d003      	beq.n	800aaba <_scanf_float+0x6e>
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aabe:	f1ba 0f01 	cmp.w	sl, #1
 800aac2:	f200 8113 	bhi.w	800acec <_scanf_float+0x2a0>
 800aac6:	455e      	cmp	r6, fp
 800aac8:	f200 8105 	bhi.w	800acd6 <_scanf_float+0x28a>
 800aacc:	2501      	movs	r5, #1
 800aace:	4628      	mov	r0, r5
 800aad0:	b007      	add	sp, #28
 800aad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800aada:	2a0d      	cmp	r2, #13
 800aadc:	d8e6      	bhi.n	800aaac <_scanf_float+0x60>
 800aade:	a101      	add	r1, pc, #4	; (adr r1, 800aae4 <_scanf_float+0x98>)
 800aae0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aae4:	0800ac23 	.word	0x0800ac23
 800aae8:	0800aaad 	.word	0x0800aaad
 800aaec:	0800aaad 	.word	0x0800aaad
 800aaf0:	0800aaad 	.word	0x0800aaad
 800aaf4:	0800ac83 	.word	0x0800ac83
 800aaf8:	0800ac5b 	.word	0x0800ac5b
 800aafc:	0800aaad 	.word	0x0800aaad
 800ab00:	0800aaad 	.word	0x0800aaad
 800ab04:	0800ac31 	.word	0x0800ac31
 800ab08:	0800aaad 	.word	0x0800aaad
 800ab0c:	0800aaad 	.word	0x0800aaad
 800ab10:	0800aaad 	.word	0x0800aaad
 800ab14:	0800aaad 	.word	0x0800aaad
 800ab18:	0800abe9 	.word	0x0800abe9
 800ab1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ab20:	e7db      	b.n	800aada <_scanf_float+0x8e>
 800ab22:	290e      	cmp	r1, #14
 800ab24:	d8c2      	bhi.n	800aaac <_scanf_float+0x60>
 800ab26:	a001      	add	r0, pc, #4	; (adr r0, 800ab2c <_scanf_float+0xe0>)
 800ab28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ab2c:	0800abdb 	.word	0x0800abdb
 800ab30:	0800aaad 	.word	0x0800aaad
 800ab34:	0800abdb 	.word	0x0800abdb
 800ab38:	0800ac6f 	.word	0x0800ac6f
 800ab3c:	0800aaad 	.word	0x0800aaad
 800ab40:	0800ab89 	.word	0x0800ab89
 800ab44:	0800abc5 	.word	0x0800abc5
 800ab48:	0800abc5 	.word	0x0800abc5
 800ab4c:	0800abc5 	.word	0x0800abc5
 800ab50:	0800abc5 	.word	0x0800abc5
 800ab54:	0800abc5 	.word	0x0800abc5
 800ab58:	0800abc5 	.word	0x0800abc5
 800ab5c:	0800abc5 	.word	0x0800abc5
 800ab60:	0800abc5 	.word	0x0800abc5
 800ab64:	0800abc5 	.word	0x0800abc5
 800ab68:	2b6e      	cmp	r3, #110	; 0x6e
 800ab6a:	d809      	bhi.n	800ab80 <_scanf_float+0x134>
 800ab6c:	2b60      	cmp	r3, #96	; 0x60
 800ab6e:	d8b2      	bhi.n	800aad6 <_scanf_float+0x8a>
 800ab70:	2b54      	cmp	r3, #84	; 0x54
 800ab72:	d077      	beq.n	800ac64 <_scanf_float+0x218>
 800ab74:	2b59      	cmp	r3, #89	; 0x59
 800ab76:	d199      	bne.n	800aaac <_scanf_float+0x60>
 800ab78:	2d07      	cmp	r5, #7
 800ab7a:	d197      	bne.n	800aaac <_scanf_float+0x60>
 800ab7c:	2508      	movs	r5, #8
 800ab7e:	e029      	b.n	800abd4 <_scanf_float+0x188>
 800ab80:	2b74      	cmp	r3, #116	; 0x74
 800ab82:	d06f      	beq.n	800ac64 <_scanf_float+0x218>
 800ab84:	2b79      	cmp	r3, #121	; 0x79
 800ab86:	e7f6      	b.n	800ab76 <_scanf_float+0x12a>
 800ab88:	6821      	ldr	r1, [r4, #0]
 800ab8a:	05c8      	lsls	r0, r1, #23
 800ab8c:	d51a      	bpl.n	800abc4 <_scanf_float+0x178>
 800ab8e:	9b02      	ldr	r3, [sp, #8]
 800ab90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab94:	6021      	str	r1, [r4, #0]
 800ab96:	f109 0901 	add.w	r9, r9, #1
 800ab9a:	b11b      	cbz	r3, 800aba4 <_scanf_float+0x158>
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	3201      	adds	r2, #1
 800aba0:	9302      	str	r3, [sp, #8]
 800aba2:	60a2      	str	r2, [r4, #8]
 800aba4:	68a3      	ldr	r3, [r4, #8]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	60a3      	str	r3, [r4, #8]
 800abaa:	6923      	ldr	r3, [r4, #16]
 800abac:	3301      	adds	r3, #1
 800abae:	6123      	str	r3, [r4, #16]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3b01      	subs	r3, #1
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	607b      	str	r3, [r7, #4]
 800abb8:	f340 8084 	ble.w	800acc4 <_scanf_float+0x278>
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	3301      	adds	r3, #1
 800abc0:	603b      	str	r3, [r7, #0]
 800abc2:	e766      	b.n	800aa92 <_scanf_float+0x46>
 800abc4:	eb1a 0f05 	cmn.w	sl, r5
 800abc8:	f47f af70 	bne.w	800aaac <_scanf_float+0x60>
 800abcc:	6822      	ldr	r2, [r4, #0]
 800abce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800abd2:	6022      	str	r2, [r4, #0]
 800abd4:	f806 3b01 	strb.w	r3, [r6], #1
 800abd8:	e7e4      	b.n	800aba4 <_scanf_float+0x158>
 800abda:	6822      	ldr	r2, [r4, #0]
 800abdc:	0610      	lsls	r0, r2, #24
 800abde:	f57f af65 	bpl.w	800aaac <_scanf_float+0x60>
 800abe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abe6:	e7f4      	b.n	800abd2 <_scanf_float+0x186>
 800abe8:	f1ba 0f00 	cmp.w	sl, #0
 800abec:	d10e      	bne.n	800ac0c <_scanf_float+0x1c0>
 800abee:	f1b9 0f00 	cmp.w	r9, #0
 800abf2:	d10e      	bne.n	800ac12 <_scanf_float+0x1c6>
 800abf4:	6822      	ldr	r2, [r4, #0]
 800abf6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800abfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800abfe:	d108      	bne.n	800ac12 <_scanf_float+0x1c6>
 800ac00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac04:	6022      	str	r2, [r4, #0]
 800ac06:	f04f 0a01 	mov.w	sl, #1
 800ac0a:	e7e3      	b.n	800abd4 <_scanf_float+0x188>
 800ac0c:	f1ba 0f02 	cmp.w	sl, #2
 800ac10:	d055      	beq.n	800acbe <_scanf_float+0x272>
 800ac12:	2d01      	cmp	r5, #1
 800ac14:	d002      	beq.n	800ac1c <_scanf_float+0x1d0>
 800ac16:	2d04      	cmp	r5, #4
 800ac18:	f47f af48 	bne.w	800aaac <_scanf_float+0x60>
 800ac1c:	3501      	adds	r5, #1
 800ac1e:	b2ed      	uxtb	r5, r5
 800ac20:	e7d8      	b.n	800abd4 <_scanf_float+0x188>
 800ac22:	f1ba 0f01 	cmp.w	sl, #1
 800ac26:	f47f af41 	bne.w	800aaac <_scanf_float+0x60>
 800ac2a:	f04f 0a02 	mov.w	sl, #2
 800ac2e:	e7d1      	b.n	800abd4 <_scanf_float+0x188>
 800ac30:	b97d      	cbnz	r5, 800ac52 <_scanf_float+0x206>
 800ac32:	f1b9 0f00 	cmp.w	r9, #0
 800ac36:	f47f af3c 	bne.w	800aab2 <_scanf_float+0x66>
 800ac3a:	6822      	ldr	r2, [r4, #0]
 800ac3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ac40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ac44:	f47f af39 	bne.w	800aaba <_scanf_float+0x6e>
 800ac48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac4c:	6022      	str	r2, [r4, #0]
 800ac4e:	2501      	movs	r5, #1
 800ac50:	e7c0      	b.n	800abd4 <_scanf_float+0x188>
 800ac52:	2d03      	cmp	r5, #3
 800ac54:	d0e2      	beq.n	800ac1c <_scanf_float+0x1d0>
 800ac56:	2d05      	cmp	r5, #5
 800ac58:	e7de      	b.n	800ac18 <_scanf_float+0x1cc>
 800ac5a:	2d02      	cmp	r5, #2
 800ac5c:	f47f af26 	bne.w	800aaac <_scanf_float+0x60>
 800ac60:	2503      	movs	r5, #3
 800ac62:	e7b7      	b.n	800abd4 <_scanf_float+0x188>
 800ac64:	2d06      	cmp	r5, #6
 800ac66:	f47f af21 	bne.w	800aaac <_scanf_float+0x60>
 800ac6a:	2507      	movs	r5, #7
 800ac6c:	e7b2      	b.n	800abd4 <_scanf_float+0x188>
 800ac6e:	6822      	ldr	r2, [r4, #0]
 800ac70:	0591      	lsls	r1, r2, #22
 800ac72:	f57f af1b 	bpl.w	800aaac <_scanf_float+0x60>
 800ac76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ac7a:	6022      	str	r2, [r4, #0]
 800ac7c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac80:	e7a8      	b.n	800abd4 <_scanf_float+0x188>
 800ac82:	6822      	ldr	r2, [r4, #0]
 800ac84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ac88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac8c:	d006      	beq.n	800ac9c <_scanf_float+0x250>
 800ac8e:	0550      	lsls	r0, r2, #21
 800ac90:	f57f af0c 	bpl.w	800aaac <_scanf_float+0x60>
 800ac94:	f1b9 0f00 	cmp.w	r9, #0
 800ac98:	f43f af0f 	beq.w	800aaba <_scanf_float+0x6e>
 800ac9c:	0591      	lsls	r1, r2, #22
 800ac9e:	bf58      	it	pl
 800aca0:	9901      	ldrpl	r1, [sp, #4]
 800aca2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aca6:	bf58      	it	pl
 800aca8:	eba9 0101 	subpl.w	r1, r9, r1
 800acac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800acb0:	bf58      	it	pl
 800acb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800acb6:	6022      	str	r2, [r4, #0]
 800acb8:	f04f 0900 	mov.w	r9, #0
 800acbc:	e78a      	b.n	800abd4 <_scanf_float+0x188>
 800acbe:	f04f 0a03 	mov.w	sl, #3
 800acc2:	e787      	b.n	800abd4 <_scanf_float+0x188>
 800acc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800acc8:	4639      	mov	r1, r7
 800acca:	4640      	mov	r0, r8
 800accc:	4798      	blx	r3
 800acce:	2800      	cmp	r0, #0
 800acd0:	f43f aedf 	beq.w	800aa92 <_scanf_float+0x46>
 800acd4:	e6ea      	b.n	800aaac <_scanf_float+0x60>
 800acd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acde:	463a      	mov	r2, r7
 800ace0:	4640      	mov	r0, r8
 800ace2:	4798      	blx	r3
 800ace4:	6923      	ldr	r3, [r4, #16]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	6123      	str	r3, [r4, #16]
 800acea:	e6ec      	b.n	800aac6 <_scanf_float+0x7a>
 800acec:	1e6b      	subs	r3, r5, #1
 800acee:	2b06      	cmp	r3, #6
 800acf0:	d825      	bhi.n	800ad3e <_scanf_float+0x2f2>
 800acf2:	2d02      	cmp	r5, #2
 800acf4:	d836      	bhi.n	800ad64 <_scanf_float+0x318>
 800acf6:	455e      	cmp	r6, fp
 800acf8:	f67f aee8 	bls.w	800aacc <_scanf_float+0x80>
 800acfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad04:	463a      	mov	r2, r7
 800ad06:	4640      	mov	r0, r8
 800ad08:	4798      	blx	r3
 800ad0a:	6923      	ldr	r3, [r4, #16]
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	6123      	str	r3, [r4, #16]
 800ad10:	e7f1      	b.n	800acf6 <_scanf_float+0x2aa>
 800ad12:	9802      	ldr	r0, [sp, #8]
 800ad14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ad1c:	9002      	str	r0, [sp, #8]
 800ad1e:	463a      	mov	r2, r7
 800ad20:	4640      	mov	r0, r8
 800ad22:	4798      	blx	r3
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	6123      	str	r3, [r4, #16]
 800ad2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ad2e:	fa5f fa8a 	uxtb.w	sl, sl
 800ad32:	f1ba 0f02 	cmp.w	sl, #2
 800ad36:	d1ec      	bne.n	800ad12 <_scanf_float+0x2c6>
 800ad38:	3d03      	subs	r5, #3
 800ad3a:	b2ed      	uxtb	r5, r5
 800ad3c:	1b76      	subs	r6, r6, r5
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	05da      	lsls	r2, r3, #23
 800ad42:	d52f      	bpl.n	800ada4 <_scanf_float+0x358>
 800ad44:	055b      	lsls	r3, r3, #21
 800ad46:	d510      	bpl.n	800ad6a <_scanf_float+0x31e>
 800ad48:	455e      	cmp	r6, fp
 800ad4a:	f67f aebf 	bls.w	800aacc <_scanf_float+0x80>
 800ad4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad56:	463a      	mov	r2, r7
 800ad58:	4640      	mov	r0, r8
 800ad5a:	4798      	blx	r3
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	6123      	str	r3, [r4, #16]
 800ad62:	e7f1      	b.n	800ad48 <_scanf_float+0x2fc>
 800ad64:	46aa      	mov	sl, r5
 800ad66:	9602      	str	r6, [sp, #8]
 800ad68:	e7df      	b.n	800ad2a <_scanf_float+0x2de>
 800ad6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad6e:	6923      	ldr	r3, [r4, #16]
 800ad70:	2965      	cmp	r1, #101	; 0x65
 800ad72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ad76:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800ad7a:	6123      	str	r3, [r4, #16]
 800ad7c:	d00c      	beq.n	800ad98 <_scanf_float+0x34c>
 800ad7e:	2945      	cmp	r1, #69	; 0x45
 800ad80:	d00a      	beq.n	800ad98 <_scanf_float+0x34c>
 800ad82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad86:	463a      	mov	r2, r7
 800ad88:	4640      	mov	r0, r8
 800ad8a:	4798      	blx	r3
 800ad8c:	6923      	ldr	r3, [r4, #16]
 800ad8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad92:	3b01      	subs	r3, #1
 800ad94:	1eb5      	subs	r5, r6, #2
 800ad96:	6123      	str	r3, [r4, #16]
 800ad98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad9c:	463a      	mov	r2, r7
 800ad9e:	4640      	mov	r0, r8
 800ada0:	4798      	blx	r3
 800ada2:	462e      	mov	r6, r5
 800ada4:	6825      	ldr	r5, [r4, #0]
 800ada6:	f015 0510 	ands.w	r5, r5, #16
 800adaa:	d159      	bne.n	800ae60 <_scanf_float+0x414>
 800adac:	7035      	strb	r5, [r6, #0]
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800adb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adb8:	d11b      	bne.n	800adf2 <_scanf_float+0x3a6>
 800adba:	9b01      	ldr	r3, [sp, #4]
 800adbc:	454b      	cmp	r3, r9
 800adbe:	eba3 0209 	sub.w	r2, r3, r9
 800adc2:	d123      	bne.n	800ae0c <_scanf_float+0x3c0>
 800adc4:	2200      	movs	r2, #0
 800adc6:	4659      	mov	r1, fp
 800adc8:	4640      	mov	r0, r8
 800adca:	f000 fe97 	bl	800bafc <_strtod_r>
 800adce:	6822      	ldr	r2, [r4, #0]
 800add0:	9b03      	ldr	r3, [sp, #12]
 800add2:	f012 0f02 	tst.w	r2, #2
 800add6:	ec57 6b10 	vmov	r6, r7, d0
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	d021      	beq.n	800ae22 <_scanf_float+0x3d6>
 800adde:	9903      	ldr	r1, [sp, #12]
 800ade0:	1d1a      	adds	r2, r3, #4
 800ade2:	600a      	str	r2, [r1, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	e9c3 6700 	strd	r6, r7, [r3]
 800adea:	68e3      	ldr	r3, [r4, #12]
 800adec:	3301      	adds	r3, #1
 800adee:	60e3      	str	r3, [r4, #12]
 800adf0:	e66d      	b.n	800aace <_scanf_float+0x82>
 800adf2:	9b04      	ldr	r3, [sp, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0e5      	beq.n	800adc4 <_scanf_float+0x378>
 800adf8:	9905      	ldr	r1, [sp, #20]
 800adfa:	230a      	movs	r3, #10
 800adfc:	462a      	mov	r2, r5
 800adfe:	3101      	adds	r1, #1
 800ae00:	4640      	mov	r0, r8
 800ae02:	f000 ff03 	bl	800bc0c <_strtol_r>
 800ae06:	9b04      	ldr	r3, [sp, #16]
 800ae08:	9e05      	ldr	r6, [sp, #20]
 800ae0a:	1ac2      	subs	r2, r0, r3
 800ae0c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ae10:	429e      	cmp	r6, r3
 800ae12:	bf28      	it	cs
 800ae14:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ae18:	4912      	ldr	r1, [pc, #72]	; (800ae64 <_scanf_float+0x418>)
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f000 f82c 	bl	800ae78 <siprintf>
 800ae20:	e7d0      	b.n	800adc4 <_scanf_float+0x378>
 800ae22:	9903      	ldr	r1, [sp, #12]
 800ae24:	f012 0f04 	tst.w	r2, #4
 800ae28:	f103 0204 	add.w	r2, r3, #4
 800ae2c:	600a      	str	r2, [r1, #0]
 800ae2e:	d1d9      	bne.n	800ade4 <_scanf_float+0x398>
 800ae30:	f8d3 8000 	ldr.w	r8, [r3]
 800ae34:	ee10 2a10 	vmov	r2, s0
 800ae38:	ee10 0a10 	vmov	r0, s0
 800ae3c:	463b      	mov	r3, r7
 800ae3e:	4639      	mov	r1, r7
 800ae40:	f7f5 fe7c 	bl	8000b3c <__aeabi_dcmpun>
 800ae44:	b128      	cbz	r0, 800ae52 <_scanf_float+0x406>
 800ae46:	4808      	ldr	r0, [pc, #32]	; (800ae68 <_scanf_float+0x41c>)
 800ae48:	f000 f810 	bl	800ae6c <nanf>
 800ae4c:	ed88 0a00 	vstr	s0, [r8]
 800ae50:	e7cb      	b.n	800adea <_scanf_float+0x39e>
 800ae52:	4630      	mov	r0, r6
 800ae54:	4639      	mov	r1, r7
 800ae56:	f7f5 fecf 	bl	8000bf8 <__aeabi_d2f>
 800ae5a:	f8c8 0000 	str.w	r0, [r8]
 800ae5e:	e7c4      	b.n	800adea <_scanf_float+0x39e>
 800ae60:	2500      	movs	r5, #0
 800ae62:	e634      	b.n	800aace <_scanf_float+0x82>
 800ae64:	08011354 	.word	0x08011354
 800ae68:	08011760 	.word	0x08011760

0800ae6c <nanf>:
 800ae6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae74 <nanf+0x8>
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	7fc00000 	.word	0x7fc00000

0800ae78 <siprintf>:
 800ae78:	b40e      	push	{r1, r2, r3}
 800ae7a:	b500      	push	{lr}
 800ae7c:	b09c      	sub	sp, #112	; 0x70
 800ae7e:	ab1d      	add	r3, sp, #116	; 0x74
 800ae80:	9002      	str	r0, [sp, #8]
 800ae82:	9006      	str	r0, [sp, #24]
 800ae84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae88:	4809      	ldr	r0, [pc, #36]	; (800aeb0 <siprintf+0x38>)
 800ae8a:	9107      	str	r1, [sp, #28]
 800ae8c:	9104      	str	r1, [sp, #16]
 800ae8e:	4909      	ldr	r1, [pc, #36]	; (800aeb4 <siprintf+0x3c>)
 800ae90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae94:	9105      	str	r1, [sp, #20]
 800ae96:	6800      	ldr	r0, [r0, #0]
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	a902      	add	r1, sp, #8
 800ae9c:	f002 fed4 	bl	800dc48 <_svfiprintf_r>
 800aea0:	9b02      	ldr	r3, [sp, #8]
 800aea2:	2200      	movs	r2, #0
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	b01c      	add	sp, #112	; 0x70
 800aea8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aeac:	b003      	add	sp, #12
 800aeae:	4770      	bx	lr
 800aeb0:	20000028 	.word	0x20000028
 800aeb4:	ffff0208 	.word	0xffff0208

0800aeb8 <sulp>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	4604      	mov	r4, r0
 800aebc:	460d      	mov	r5, r1
 800aebe:	ec45 4b10 	vmov	d0, r4, r5
 800aec2:	4616      	mov	r6, r2
 800aec4:	f002 fc1e 	bl	800d704 <__ulp>
 800aec8:	ec51 0b10 	vmov	r0, r1, d0
 800aecc:	b17e      	cbz	r6, 800aeee <sulp+0x36>
 800aece:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aed2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	dd09      	ble.n	800aeee <sulp+0x36>
 800aeda:	051b      	lsls	r3, r3, #20
 800aedc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aee0:	2400      	movs	r4, #0
 800aee2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aee6:	4622      	mov	r2, r4
 800aee8:	462b      	mov	r3, r5
 800aeea:	f7f5 fb8d 	bl	8000608 <__aeabi_dmul>
 800aeee:	bd70      	pop	{r4, r5, r6, pc}

0800aef0 <_strtod_l>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	ed2d 8b02 	vpush	{d8}
 800aef8:	b09d      	sub	sp, #116	; 0x74
 800aefa:	461f      	mov	r7, r3
 800aefc:	2300      	movs	r3, #0
 800aefe:	9318      	str	r3, [sp, #96]	; 0x60
 800af00:	4ba2      	ldr	r3, [pc, #648]	; (800b18c <_strtod_l+0x29c>)
 800af02:	9213      	str	r2, [sp, #76]	; 0x4c
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	9305      	str	r3, [sp, #20]
 800af08:	4604      	mov	r4, r0
 800af0a:	4618      	mov	r0, r3
 800af0c:	4688      	mov	r8, r1
 800af0e:	f7f5 f967 	bl	80001e0 <strlen>
 800af12:	f04f 0a00 	mov.w	sl, #0
 800af16:	4605      	mov	r5, r0
 800af18:	f04f 0b00 	mov.w	fp, #0
 800af1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800af20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af22:	781a      	ldrb	r2, [r3, #0]
 800af24:	2a2b      	cmp	r2, #43	; 0x2b
 800af26:	d04e      	beq.n	800afc6 <_strtod_l+0xd6>
 800af28:	d83b      	bhi.n	800afa2 <_strtod_l+0xb2>
 800af2a:	2a0d      	cmp	r2, #13
 800af2c:	d834      	bhi.n	800af98 <_strtod_l+0xa8>
 800af2e:	2a08      	cmp	r2, #8
 800af30:	d834      	bhi.n	800af9c <_strtod_l+0xac>
 800af32:	2a00      	cmp	r2, #0
 800af34:	d03e      	beq.n	800afb4 <_strtod_l+0xc4>
 800af36:	2300      	movs	r3, #0
 800af38:	930a      	str	r3, [sp, #40]	; 0x28
 800af3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800af3c:	7833      	ldrb	r3, [r6, #0]
 800af3e:	2b30      	cmp	r3, #48	; 0x30
 800af40:	f040 80b0 	bne.w	800b0a4 <_strtod_l+0x1b4>
 800af44:	7873      	ldrb	r3, [r6, #1]
 800af46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af4a:	2b58      	cmp	r3, #88	; 0x58
 800af4c:	d168      	bne.n	800b020 <_strtod_l+0x130>
 800af4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	ab18      	add	r3, sp, #96	; 0x60
 800af54:	9702      	str	r7, [sp, #8]
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	4a8d      	ldr	r2, [pc, #564]	; (800b190 <_strtod_l+0x2a0>)
 800af5a:	ab19      	add	r3, sp, #100	; 0x64
 800af5c:	a917      	add	r1, sp, #92	; 0x5c
 800af5e:	4620      	mov	r0, r4
 800af60:	f001 fd38 	bl	800c9d4 <__gethex>
 800af64:	f010 0707 	ands.w	r7, r0, #7
 800af68:	4605      	mov	r5, r0
 800af6a:	d005      	beq.n	800af78 <_strtod_l+0x88>
 800af6c:	2f06      	cmp	r7, #6
 800af6e:	d12c      	bne.n	800afca <_strtod_l+0xda>
 800af70:	3601      	adds	r6, #1
 800af72:	2300      	movs	r3, #0
 800af74:	9617      	str	r6, [sp, #92]	; 0x5c
 800af76:	930a      	str	r3, [sp, #40]	; 0x28
 800af78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f040 8590 	bne.w	800baa0 <_strtod_l+0xbb0>
 800af80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af82:	b1eb      	cbz	r3, 800afc0 <_strtod_l+0xd0>
 800af84:	4652      	mov	r2, sl
 800af86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af8a:	ec43 2b10 	vmov	d0, r2, r3
 800af8e:	b01d      	add	sp, #116	; 0x74
 800af90:	ecbd 8b02 	vpop	{d8}
 800af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af98:	2a20      	cmp	r2, #32
 800af9a:	d1cc      	bne.n	800af36 <_strtod_l+0x46>
 800af9c:	3301      	adds	r3, #1
 800af9e:	9317      	str	r3, [sp, #92]	; 0x5c
 800afa0:	e7be      	b.n	800af20 <_strtod_l+0x30>
 800afa2:	2a2d      	cmp	r2, #45	; 0x2d
 800afa4:	d1c7      	bne.n	800af36 <_strtod_l+0x46>
 800afa6:	2201      	movs	r2, #1
 800afa8:	920a      	str	r2, [sp, #40]	; 0x28
 800afaa:	1c5a      	adds	r2, r3, #1
 800afac:	9217      	str	r2, [sp, #92]	; 0x5c
 800afae:	785b      	ldrb	r3, [r3, #1]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1c2      	bne.n	800af3a <_strtod_l+0x4a>
 800afb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f040 856e 	bne.w	800ba9c <_strtod_l+0xbac>
 800afc0:	4652      	mov	r2, sl
 800afc2:	465b      	mov	r3, fp
 800afc4:	e7e1      	b.n	800af8a <_strtod_l+0x9a>
 800afc6:	2200      	movs	r2, #0
 800afc8:	e7ee      	b.n	800afa8 <_strtod_l+0xb8>
 800afca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800afcc:	b13a      	cbz	r2, 800afde <_strtod_l+0xee>
 800afce:	2135      	movs	r1, #53	; 0x35
 800afd0:	a81a      	add	r0, sp, #104	; 0x68
 800afd2:	f002 fca2 	bl	800d91a <__copybits>
 800afd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afd8:	4620      	mov	r0, r4
 800afda:	f002 f861 	bl	800d0a0 <_Bfree>
 800afde:	3f01      	subs	r7, #1
 800afe0:	2f04      	cmp	r7, #4
 800afe2:	d806      	bhi.n	800aff2 <_strtod_l+0x102>
 800afe4:	e8df f007 	tbb	[pc, r7]
 800afe8:	1714030a 	.word	0x1714030a
 800afec:	0a          	.byte	0x0a
 800afed:	00          	.byte	0x00
 800afee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800aff2:	0728      	lsls	r0, r5, #28
 800aff4:	d5c0      	bpl.n	800af78 <_strtod_l+0x88>
 800aff6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800affa:	e7bd      	b.n	800af78 <_strtod_l+0x88>
 800affc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b000:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b002:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b006:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b00a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b00e:	e7f0      	b.n	800aff2 <_strtod_l+0x102>
 800b010:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b194 <_strtod_l+0x2a4>
 800b014:	e7ed      	b.n	800aff2 <_strtod_l+0x102>
 800b016:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b01a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b01e:	e7e8      	b.n	800aff2 <_strtod_l+0x102>
 800b020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	9217      	str	r2, [sp, #92]	; 0x5c
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	2b30      	cmp	r3, #48	; 0x30
 800b02a:	d0f9      	beq.n	800b020 <_strtod_l+0x130>
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d0a3      	beq.n	800af78 <_strtod_l+0x88>
 800b030:	2301      	movs	r3, #1
 800b032:	f04f 0900 	mov.w	r9, #0
 800b036:	9304      	str	r3, [sp, #16]
 800b038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b03a:	9308      	str	r3, [sp, #32]
 800b03c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b040:	464f      	mov	r7, r9
 800b042:	220a      	movs	r2, #10
 800b044:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b046:	7806      	ldrb	r6, [r0, #0]
 800b048:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b04c:	b2d9      	uxtb	r1, r3
 800b04e:	2909      	cmp	r1, #9
 800b050:	d92a      	bls.n	800b0a8 <_strtod_l+0x1b8>
 800b052:	9905      	ldr	r1, [sp, #20]
 800b054:	462a      	mov	r2, r5
 800b056:	f002 ff0f 	bl	800de78 <strncmp>
 800b05a:	b398      	cbz	r0, 800b0c4 <_strtod_l+0x1d4>
 800b05c:	2000      	movs	r0, #0
 800b05e:	4632      	mov	r2, r6
 800b060:	463d      	mov	r5, r7
 800b062:	9005      	str	r0, [sp, #20]
 800b064:	4603      	mov	r3, r0
 800b066:	2a65      	cmp	r2, #101	; 0x65
 800b068:	d001      	beq.n	800b06e <_strtod_l+0x17e>
 800b06a:	2a45      	cmp	r2, #69	; 0x45
 800b06c:	d118      	bne.n	800b0a0 <_strtod_l+0x1b0>
 800b06e:	b91d      	cbnz	r5, 800b078 <_strtod_l+0x188>
 800b070:	9a04      	ldr	r2, [sp, #16]
 800b072:	4302      	orrs	r2, r0
 800b074:	d09e      	beq.n	800afb4 <_strtod_l+0xc4>
 800b076:	2500      	movs	r5, #0
 800b078:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b07c:	f108 0201 	add.w	r2, r8, #1
 800b080:	9217      	str	r2, [sp, #92]	; 0x5c
 800b082:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b086:	2a2b      	cmp	r2, #43	; 0x2b
 800b088:	d075      	beq.n	800b176 <_strtod_l+0x286>
 800b08a:	2a2d      	cmp	r2, #45	; 0x2d
 800b08c:	d07b      	beq.n	800b186 <_strtod_l+0x296>
 800b08e:	f04f 0c00 	mov.w	ip, #0
 800b092:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b096:	2909      	cmp	r1, #9
 800b098:	f240 8082 	bls.w	800b1a0 <_strtod_l+0x2b0>
 800b09c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b0a0:	2600      	movs	r6, #0
 800b0a2:	e09d      	b.n	800b1e0 <_strtod_l+0x2f0>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	e7c4      	b.n	800b032 <_strtod_l+0x142>
 800b0a8:	2f08      	cmp	r7, #8
 800b0aa:	bfd8      	it	le
 800b0ac:	9907      	ldrle	r1, [sp, #28]
 800b0ae:	f100 0001 	add.w	r0, r0, #1
 800b0b2:	bfda      	itte	le
 800b0b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b0b8:	9307      	strle	r3, [sp, #28]
 800b0ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b0be:	3701      	adds	r7, #1
 800b0c0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b0c2:	e7bf      	b.n	800b044 <_strtod_l+0x154>
 800b0c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0c6:	195a      	adds	r2, r3, r5
 800b0c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0ca:	5d5a      	ldrb	r2, [r3, r5]
 800b0cc:	2f00      	cmp	r7, #0
 800b0ce:	d037      	beq.n	800b140 <_strtod_l+0x250>
 800b0d0:	9005      	str	r0, [sp, #20]
 800b0d2:	463d      	mov	r5, r7
 800b0d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b0d8:	2b09      	cmp	r3, #9
 800b0da:	d912      	bls.n	800b102 <_strtod_l+0x212>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e7c2      	b.n	800b066 <_strtod_l+0x176>
 800b0e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0e6:	785a      	ldrb	r2, [r3, #1]
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	2a30      	cmp	r2, #48	; 0x30
 800b0ec:	d0f8      	beq.n	800b0e0 <_strtod_l+0x1f0>
 800b0ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b0f2:	2b08      	cmp	r3, #8
 800b0f4:	f200 84d9 	bhi.w	800baaa <_strtod_l+0xbba>
 800b0f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0fa:	9005      	str	r0, [sp, #20]
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	9308      	str	r3, [sp, #32]
 800b100:	4605      	mov	r5, r0
 800b102:	3a30      	subs	r2, #48	; 0x30
 800b104:	f100 0301 	add.w	r3, r0, #1
 800b108:	d014      	beq.n	800b134 <_strtod_l+0x244>
 800b10a:	9905      	ldr	r1, [sp, #20]
 800b10c:	4419      	add	r1, r3
 800b10e:	9105      	str	r1, [sp, #20]
 800b110:	462b      	mov	r3, r5
 800b112:	eb00 0e05 	add.w	lr, r0, r5
 800b116:	210a      	movs	r1, #10
 800b118:	4573      	cmp	r3, lr
 800b11a:	d113      	bne.n	800b144 <_strtod_l+0x254>
 800b11c:	182b      	adds	r3, r5, r0
 800b11e:	2b08      	cmp	r3, #8
 800b120:	f105 0501 	add.w	r5, r5, #1
 800b124:	4405      	add	r5, r0
 800b126:	dc1c      	bgt.n	800b162 <_strtod_l+0x272>
 800b128:	9907      	ldr	r1, [sp, #28]
 800b12a:	230a      	movs	r3, #10
 800b12c:	fb03 2301 	mla	r3, r3, r1, r2
 800b130:	9307      	str	r3, [sp, #28]
 800b132:	2300      	movs	r3, #0
 800b134:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b136:	1c51      	adds	r1, r2, #1
 800b138:	9117      	str	r1, [sp, #92]	; 0x5c
 800b13a:	7852      	ldrb	r2, [r2, #1]
 800b13c:	4618      	mov	r0, r3
 800b13e:	e7c9      	b.n	800b0d4 <_strtod_l+0x1e4>
 800b140:	4638      	mov	r0, r7
 800b142:	e7d2      	b.n	800b0ea <_strtod_l+0x1fa>
 800b144:	2b08      	cmp	r3, #8
 800b146:	dc04      	bgt.n	800b152 <_strtod_l+0x262>
 800b148:	9e07      	ldr	r6, [sp, #28]
 800b14a:	434e      	muls	r6, r1
 800b14c:	9607      	str	r6, [sp, #28]
 800b14e:	3301      	adds	r3, #1
 800b150:	e7e2      	b.n	800b118 <_strtod_l+0x228>
 800b152:	f103 0c01 	add.w	ip, r3, #1
 800b156:	f1bc 0f10 	cmp.w	ip, #16
 800b15a:	bfd8      	it	le
 800b15c:	fb01 f909 	mulle.w	r9, r1, r9
 800b160:	e7f5      	b.n	800b14e <_strtod_l+0x25e>
 800b162:	2d10      	cmp	r5, #16
 800b164:	bfdc      	itt	le
 800b166:	230a      	movle	r3, #10
 800b168:	fb03 2909 	mlale	r9, r3, r9, r2
 800b16c:	e7e1      	b.n	800b132 <_strtod_l+0x242>
 800b16e:	2300      	movs	r3, #0
 800b170:	9305      	str	r3, [sp, #20]
 800b172:	2301      	movs	r3, #1
 800b174:	e77c      	b.n	800b070 <_strtod_l+0x180>
 800b176:	f04f 0c00 	mov.w	ip, #0
 800b17a:	f108 0202 	add.w	r2, r8, #2
 800b17e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b180:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b184:	e785      	b.n	800b092 <_strtod_l+0x1a2>
 800b186:	f04f 0c01 	mov.w	ip, #1
 800b18a:	e7f6      	b.n	800b17a <_strtod_l+0x28a>
 800b18c:	080115a8 	.word	0x080115a8
 800b190:	0801135c 	.word	0x0801135c
 800b194:	7ff00000 	.word	0x7ff00000
 800b198:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b19a:	1c51      	adds	r1, r2, #1
 800b19c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b19e:	7852      	ldrb	r2, [r2, #1]
 800b1a0:	2a30      	cmp	r2, #48	; 0x30
 800b1a2:	d0f9      	beq.n	800b198 <_strtod_l+0x2a8>
 800b1a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b1a8:	2908      	cmp	r1, #8
 800b1aa:	f63f af79 	bhi.w	800b0a0 <_strtod_l+0x1b0>
 800b1ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b1b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1b4:	9206      	str	r2, [sp, #24]
 800b1b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1b8:	1c51      	adds	r1, r2, #1
 800b1ba:	9117      	str	r1, [sp, #92]	; 0x5c
 800b1bc:	7852      	ldrb	r2, [r2, #1]
 800b1be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b1c2:	2e09      	cmp	r6, #9
 800b1c4:	d937      	bls.n	800b236 <_strtod_l+0x346>
 800b1c6:	9e06      	ldr	r6, [sp, #24]
 800b1c8:	1b89      	subs	r1, r1, r6
 800b1ca:	2908      	cmp	r1, #8
 800b1cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b1d0:	dc02      	bgt.n	800b1d8 <_strtod_l+0x2e8>
 800b1d2:	4576      	cmp	r6, lr
 800b1d4:	bfa8      	it	ge
 800b1d6:	4676      	movge	r6, lr
 800b1d8:	f1bc 0f00 	cmp.w	ip, #0
 800b1dc:	d000      	beq.n	800b1e0 <_strtod_l+0x2f0>
 800b1de:	4276      	negs	r6, r6
 800b1e0:	2d00      	cmp	r5, #0
 800b1e2:	d14d      	bne.n	800b280 <_strtod_l+0x390>
 800b1e4:	9904      	ldr	r1, [sp, #16]
 800b1e6:	4301      	orrs	r1, r0
 800b1e8:	f47f aec6 	bne.w	800af78 <_strtod_l+0x88>
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f47f aee1 	bne.w	800afb4 <_strtod_l+0xc4>
 800b1f2:	2a69      	cmp	r2, #105	; 0x69
 800b1f4:	d027      	beq.n	800b246 <_strtod_l+0x356>
 800b1f6:	dc24      	bgt.n	800b242 <_strtod_l+0x352>
 800b1f8:	2a49      	cmp	r2, #73	; 0x49
 800b1fa:	d024      	beq.n	800b246 <_strtod_l+0x356>
 800b1fc:	2a4e      	cmp	r2, #78	; 0x4e
 800b1fe:	f47f aed9 	bne.w	800afb4 <_strtod_l+0xc4>
 800b202:	499f      	ldr	r1, [pc, #636]	; (800b480 <_strtod_l+0x590>)
 800b204:	a817      	add	r0, sp, #92	; 0x5c
 800b206:	f001 fe3d 	bl	800ce84 <__match>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	f43f aed2 	beq.w	800afb4 <_strtod_l+0xc4>
 800b210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b28      	cmp	r3, #40	; 0x28
 800b216:	d12d      	bne.n	800b274 <_strtod_l+0x384>
 800b218:	499a      	ldr	r1, [pc, #616]	; (800b484 <_strtod_l+0x594>)
 800b21a:	aa1a      	add	r2, sp, #104	; 0x68
 800b21c:	a817      	add	r0, sp, #92	; 0x5c
 800b21e:	f001 fe45 	bl	800ceac <__hexnan>
 800b222:	2805      	cmp	r0, #5
 800b224:	d126      	bne.n	800b274 <_strtod_l+0x384>
 800b226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b228:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b22c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b230:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b234:	e6a0      	b.n	800af78 <_strtod_l+0x88>
 800b236:	210a      	movs	r1, #10
 800b238:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b23c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b240:	e7b9      	b.n	800b1b6 <_strtod_l+0x2c6>
 800b242:	2a6e      	cmp	r2, #110	; 0x6e
 800b244:	e7db      	b.n	800b1fe <_strtod_l+0x30e>
 800b246:	4990      	ldr	r1, [pc, #576]	; (800b488 <_strtod_l+0x598>)
 800b248:	a817      	add	r0, sp, #92	; 0x5c
 800b24a:	f001 fe1b 	bl	800ce84 <__match>
 800b24e:	2800      	cmp	r0, #0
 800b250:	f43f aeb0 	beq.w	800afb4 <_strtod_l+0xc4>
 800b254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b256:	498d      	ldr	r1, [pc, #564]	; (800b48c <_strtod_l+0x59c>)
 800b258:	3b01      	subs	r3, #1
 800b25a:	a817      	add	r0, sp, #92	; 0x5c
 800b25c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b25e:	f001 fe11 	bl	800ce84 <__match>
 800b262:	b910      	cbnz	r0, 800b26a <_strtod_l+0x37a>
 800b264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b266:	3301      	adds	r3, #1
 800b268:	9317      	str	r3, [sp, #92]	; 0x5c
 800b26a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b49c <_strtod_l+0x5ac>
 800b26e:	f04f 0a00 	mov.w	sl, #0
 800b272:	e681      	b.n	800af78 <_strtod_l+0x88>
 800b274:	4886      	ldr	r0, [pc, #536]	; (800b490 <_strtod_l+0x5a0>)
 800b276:	f002 fde7 	bl	800de48 <nan>
 800b27a:	ec5b ab10 	vmov	sl, fp, d0
 800b27e:	e67b      	b.n	800af78 <_strtod_l+0x88>
 800b280:	9b05      	ldr	r3, [sp, #20]
 800b282:	9807      	ldr	r0, [sp, #28]
 800b284:	1af3      	subs	r3, r6, r3
 800b286:	2f00      	cmp	r7, #0
 800b288:	bf08      	it	eq
 800b28a:	462f      	moveq	r7, r5
 800b28c:	2d10      	cmp	r5, #16
 800b28e:	9306      	str	r3, [sp, #24]
 800b290:	46a8      	mov	r8, r5
 800b292:	bfa8      	it	ge
 800b294:	f04f 0810 	movge.w	r8, #16
 800b298:	f7f5 f93c 	bl	8000514 <__aeabi_ui2d>
 800b29c:	2d09      	cmp	r5, #9
 800b29e:	4682      	mov	sl, r0
 800b2a0:	468b      	mov	fp, r1
 800b2a2:	dd13      	ble.n	800b2cc <_strtod_l+0x3dc>
 800b2a4:	4b7b      	ldr	r3, [pc, #492]	; (800b494 <_strtod_l+0x5a4>)
 800b2a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b2aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b2ae:	f7f5 f9ab 	bl	8000608 <__aeabi_dmul>
 800b2b2:	4682      	mov	sl, r0
 800b2b4:	4648      	mov	r0, r9
 800b2b6:	468b      	mov	fp, r1
 800b2b8:	f7f5 f92c 	bl	8000514 <__aeabi_ui2d>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	4659      	mov	r1, fp
 800b2c4:	f7f4 ffea 	bl	800029c <__adddf3>
 800b2c8:	4682      	mov	sl, r0
 800b2ca:	468b      	mov	fp, r1
 800b2cc:	2d0f      	cmp	r5, #15
 800b2ce:	dc38      	bgt.n	800b342 <_strtod_l+0x452>
 800b2d0:	9b06      	ldr	r3, [sp, #24]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f43f ae50 	beq.w	800af78 <_strtod_l+0x88>
 800b2d8:	dd24      	ble.n	800b324 <_strtod_l+0x434>
 800b2da:	2b16      	cmp	r3, #22
 800b2dc:	dc0b      	bgt.n	800b2f6 <_strtod_l+0x406>
 800b2de:	496d      	ldr	r1, [pc, #436]	; (800b494 <_strtod_l+0x5a4>)
 800b2e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e8:	4652      	mov	r2, sl
 800b2ea:	465b      	mov	r3, fp
 800b2ec:	f7f5 f98c 	bl	8000608 <__aeabi_dmul>
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	468b      	mov	fp, r1
 800b2f4:	e640      	b.n	800af78 <_strtod_l+0x88>
 800b2f6:	9a06      	ldr	r2, [sp, #24]
 800b2f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	db20      	blt.n	800b342 <_strtod_l+0x452>
 800b300:	4c64      	ldr	r4, [pc, #400]	; (800b494 <_strtod_l+0x5a4>)
 800b302:	f1c5 050f 	rsb	r5, r5, #15
 800b306:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b30a:	4652      	mov	r2, sl
 800b30c:	465b      	mov	r3, fp
 800b30e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b312:	f7f5 f979 	bl	8000608 <__aeabi_dmul>
 800b316:	9b06      	ldr	r3, [sp, #24]
 800b318:	1b5d      	subs	r5, r3, r5
 800b31a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b31e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b322:	e7e3      	b.n	800b2ec <_strtod_l+0x3fc>
 800b324:	9b06      	ldr	r3, [sp, #24]
 800b326:	3316      	adds	r3, #22
 800b328:	db0b      	blt.n	800b342 <_strtod_l+0x452>
 800b32a:	9b05      	ldr	r3, [sp, #20]
 800b32c:	1b9e      	subs	r6, r3, r6
 800b32e:	4b59      	ldr	r3, [pc, #356]	; (800b494 <_strtod_l+0x5a4>)
 800b330:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b334:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b338:	4650      	mov	r0, sl
 800b33a:	4659      	mov	r1, fp
 800b33c:	f7f5 fa8e 	bl	800085c <__aeabi_ddiv>
 800b340:	e7d6      	b.n	800b2f0 <_strtod_l+0x400>
 800b342:	9b06      	ldr	r3, [sp, #24]
 800b344:	eba5 0808 	sub.w	r8, r5, r8
 800b348:	4498      	add	r8, r3
 800b34a:	f1b8 0f00 	cmp.w	r8, #0
 800b34e:	dd74      	ble.n	800b43a <_strtod_l+0x54a>
 800b350:	f018 030f 	ands.w	r3, r8, #15
 800b354:	d00a      	beq.n	800b36c <_strtod_l+0x47c>
 800b356:	494f      	ldr	r1, [pc, #316]	; (800b494 <_strtod_l+0x5a4>)
 800b358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b35c:	4652      	mov	r2, sl
 800b35e:	465b      	mov	r3, fp
 800b360:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b364:	f7f5 f950 	bl	8000608 <__aeabi_dmul>
 800b368:	4682      	mov	sl, r0
 800b36a:	468b      	mov	fp, r1
 800b36c:	f038 080f 	bics.w	r8, r8, #15
 800b370:	d04f      	beq.n	800b412 <_strtod_l+0x522>
 800b372:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b376:	dd22      	ble.n	800b3be <_strtod_l+0x4ce>
 800b378:	2500      	movs	r5, #0
 800b37a:	462e      	mov	r6, r5
 800b37c:	9507      	str	r5, [sp, #28]
 800b37e:	9505      	str	r5, [sp, #20]
 800b380:	2322      	movs	r3, #34	; 0x22
 800b382:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b49c <_strtod_l+0x5ac>
 800b386:	6023      	str	r3, [r4, #0]
 800b388:	f04f 0a00 	mov.w	sl, #0
 800b38c:	9b07      	ldr	r3, [sp, #28]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f43f adf2 	beq.w	800af78 <_strtod_l+0x88>
 800b394:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b396:	4620      	mov	r0, r4
 800b398:	f001 fe82 	bl	800d0a0 <_Bfree>
 800b39c:	9905      	ldr	r1, [sp, #20]
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f001 fe7e 	bl	800d0a0 <_Bfree>
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f001 fe7a 	bl	800d0a0 <_Bfree>
 800b3ac:	9907      	ldr	r1, [sp, #28]
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f001 fe76 	bl	800d0a0 <_Bfree>
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f001 fe72 	bl	800d0a0 <_Bfree>
 800b3bc:	e5dc      	b.n	800af78 <_strtod_l+0x88>
 800b3be:	4b36      	ldr	r3, [pc, #216]	; (800b498 <_strtod_l+0x5a8>)
 800b3c0:	9304      	str	r3, [sp, #16]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b3c8:	4650      	mov	r0, sl
 800b3ca:	4659      	mov	r1, fp
 800b3cc:	4699      	mov	r9, r3
 800b3ce:	f1b8 0f01 	cmp.w	r8, #1
 800b3d2:	dc21      	bgt.n	800b418 <_strtod_l+0x528>
 800b3d4:	b10b      	cbz	r3, 800b3da <_strtod_l+0x4ea>
 800b3d6:	4682      	mov	sl, r0
 800b3d8:	468b      	mov	fp, r1
 800b3da:	4b2f      	ldr	r3, [pc, #188]	; (800b498 <_strtod_l+0x5a8>)
 800b3dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b3e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b3e4:	4652      	mov	r2, sl
 800b3e6:	465b      	mov	r3, fp
 800b3e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b3ec:	f7f5 f90c 	bl	8000608 <__aeabi_dmul>
 800b3f0:	4b2a      	ldr	r3, [pc, #168]	; (800b49c <_strtod_l+0x5ac>)
 800b3f2:	460a      	mov	r2, r1
 800b3f4:	400b      	ands	r3, r1
 800b3f6:	492a      	ldr	r1, [pc, #168]	; (800b4a0 <_strtod_l+0x5b0>)
 800b3f8:	428b      	cmp	r3, r1
 800b3fa:	4682      	mov	sl, r0
 800b3fc:	d8bc      	bhi.n	800b378 <_strtod_l+0x488>
 800b3fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b402:	428b      	cmp	r3, r1
 800b404:	bf86      	itte	hi
 800b406:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b4a4 <_strtod_l+0x5b4>
 800b40a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b40e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b412:	2300      	movs	r3, #0
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	e084      	b.n	800b522 <_strtod_l+0x632>
 800b418:	f018 0f01 	tst.w	r8, #1
 800b41c:	d005      	beq.n	800b42a <_strtod_l+0x53a>
 800b41e:	9b04      	ldr	r3, [sp, #16]
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f5 f8f0 	bl	8000608 <__aeabi_dmul>
 800b428:	2301      	movs	r3, #1
 800b42a:	9a04      	ldr	r2, [sp, #16]
 800b42c:	3208      	adds	r2, #8
 800b42e:	f109 0901 	add.w	r9, r9, #1
 800b432:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b436:	9204      	str	r2, [sp, #16]
 800b438:	e7c9      	b.n	800b3ce <_strtod_l+0x4de>
 800b43a:	d0ea      	beq.n	800b412 <_strtod_l+0x522>
 800b43c:	f1c8 0800 	rsb	r8, r8, #0
 800b440:	f018 020f 	ands.w	r2, r8, #15
 800b444:	d00a      	beq.n	800b45c <_strtod_l+0x56c>
 800b446:	4b13      	ldr	r3, [pc, #76]	; (800b494 <_strtod_l+0x5a4>)
 800b448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b44c:	4650      	mov	r0, sl
 800b44e:	4659      	mov	r1, fp
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	f7f5 fa02 	bl	800085c <__aeabi_ddiv>
 800b458:	4682      	mov	sl, r0
 800b45a:	468b      	mov	fp, r1
 800b45c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b460:	d0d7      	beq.n	800b412 <_strtod_l+0x522>
 800b462:	f1b8 0f1f 	cmp.w	r8, #31
 800b466:	dd1f      	ble.n	800b4a8 <_strtod_l+0x5b8>
 800b468:	2500      	movs	r5, #0
 800b46a:	462e      	mov	r6, r5
 800b46c:	9507      	str	r5, [sp, #28]
 800b46e:	9505      	str	r5, [sp, #20]
 800b470:	2322      	movs	r3, #34	; 0x22
 800b472:	f04f 0a00 	mov.w	sl, #0
 800b476:	f04f 0b00 	mov.w	fp, #0
 800b47a:	6023      	str	r3, [r4, #0]
 800b47c:	e786      	b.n	800b38c <_strtod_l+0x49c>
 800b47e:	bf00      	nop
 800b480:	0801132d 	.word	0x0801132d
 800b484:	08011370 	.word	0x08011370
 800b488:	08011325 	.word	0x08011325
 800b48c:	080114b4 	.word	0x080114b4
 800b490:	08011760 	.word	0x08011760
 800b494:	08011640 	.word	0x08011640
 800b498:	08011618 	.word	0x08011618
 800b49c:	7ff00000 	.word	0x7ff00000
 800b4a0:	7ca00000 	.word	0x7ca00000
 800b4a4:	7fefffff 	.word	0x7fefffff
 800b4a8:	f018 0310 	ands.w	r3, r8, #16
 800b4ac:	bf18      	it	ne
 800b4ae:	236a      	movne	r3, #106	; 0x6a
 800b4b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b860 <_strtod_l+0x970>
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	4650      	mov	r0, sl
 800b4b8:	4659      	mov	r1, fp
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f018 0f01 	tst.w	r8, #1
 800b4c0:	d004      	beq.n	800b4cc <_strtod_l+0x5dc>
 800b4c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b4c6:	f7f5 f89f 	bl	8000608 <__aeabi_dmul>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b4d0:	f109 0908 	add.w	r9, r9, #8
 800b4d4:	d1f2      	bne.n	800b4bc <_strtod_l+0x5cc>
 800b4d6:	b10b      	cbz	r3, 800b4dc <_strtod_l+0x5ec>
 800b4d8:	4682      	mov	sl, r0
 800b4da:	468b      	mov	fp, r1
 800b4dc:	9b04      	ldr	r3, [sp, #16]
 800b4de:	b1c3      	cbz	r3, 800b512 <_strtod_l+0x622>
 800b4e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b4e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	4659      	mov	r1, fp
 800b4ec:	dd11      	ble.n	800b512 <_strtod_l+0x622>
 800b4ee:	2b1f      	cmp	r3, #31
 800b4f0:	f340 8124 	ble.w	800b73c <_strtod_l+0x84c>
 800b4f4:	2b34      	cmp	r3, #52	; 0x34
 800b4f6:	bfde      	ittt	le
 800b4f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b4fc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b500:	fa03 f202 	lslle.w	r2, r3, r2
 800b504:	f04f 0a00 	mov.w	sl, #0
 800b508:	bfcc      	ite	gt
 800b50a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b50e:	ea02 0b01 	andle.w	fp, r2, r1
 800b512:	2200      	movs	r2, #0
 800b514:	2300      	movs	r3, #0
 800b516:	4650      	mov	r0, sl
 800b518:	4659      	mov	r1, fp
 800b51a:	f7f5 fadd 	bl	8000ad8 <__aeabi_dcmpeq>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d1a2      	bne.n	800b468 <_strtod_l+0x578>
 800b522:	9b07      	ldr	r3, [sp, #28]
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	9908      	ldr	r1, [sp, #32]
 800b528:	462b      	mov	r3, r5
 800b52a:	463a      	mov	r2, r7
 800b52c:	4620      	mov	r0, r4
 800b52e:	f001 fe1f 	bl	800d170 <__s2b>
 800b532:	9007      	str	r0, [sp, #28]
 800b534:	2800      	cmp	r0, #0
 800b536:	f43f af1f 	beq.w	800b378 <_strtod_l+0x488>
 800b53a:	9b05      	ldr	r3, [sp, #20]
 800b53c:	1b9e      	subs	r6, r3, r6
 800b53e:	9b06      	ldr	r3, [sp, #24]
 800b540:	2b00      	cmp	r3, #0
 800b542:	bfb4      	ite	lt
 800b544:	4633      	movlt	r3, r6
 800b546:	2300      	movge	r3, #0
 800b548:	930c      	str	r3, [sp, #48]	; 0x30
 800b54a:	9b06      	ldr	r3, [sp, #24]
 800b54c:	2500      	movs	r5, #0
 800b54e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b552:	9312      	str	r3, [sp, #72]	; 0x48
 800b554:	462e      	mov	r6, r5
 800b556:	9b07      	ldr	r3, [sp, #28]
 800b558:	4620      	mov	r0, r4
 800b55a:	6859      	ldr	r1, [r3, #4]
 800b55c:	f001 fd60 	bl	800d020 <_Balloc>
 800b560:	9005      	str	r0, [sp, #20]
 800b562:	2800      	cmp	r0, #0
 800b564:	f43f af0c 	beq.w	800b380 <_strtod_l+0x490>
 800b568:	9b07      	ldr	r3, [sp, #28]
 800b56a:	691a      	ldr	r2, [r3, #16]
 800b56c:	3202      	adds	r2, #2
 800b56e:	f103 010c 	add.w	r1, r3, #12
 800b572:	0092      	lsls	r2, r2, #2
 800b574:	300c      	adds	r0, #12
 800b576:	f7fe fde9 	bl	800a14c <memcpy>
 800b57a:	ec4b ab10 	vmov	d0, sl, fp
 800b57e:	aa1a      	add	r2, sp, #104	; 0x68
 800b580:	a919      	add	r1, sp, #100	; 0x64
 800b582:	4620      	mov	r0, r4
 800b584:	f002 f93a 	bl	800d7fc <__d2b>
 800b588:	ec4b ab18 	vmov	d8, sl, fp
 800b58c:	9018      	str	r0, [sp, #96]	; 0x60
 800b58e:	2800      	cmp	r0, #0
 800b590:	f43f aef6 	beq.w	800b380 <_strtod_l+0x490>
 800b594:	2101      	movs	r1, #1
 800b596:	4620      	mov	r0, r4
 800b598:	f001 fe84 	bl	800d2a4 <__i2b>
 800b59c:	4606      	mov	r6, r0
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f43f aeee 	beq.w	800b380 <_strtod_l+0x490>
 800b5a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b5a6:	9904      	ldr	r1, [sp, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	bfab      	itete	ge
 800b5ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b5ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b5b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b5b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b5b6:	bfac      	ite	ge
 800b5b8:	eb03 0902 	addge.w	r9, r3, r2
 800b5bc:	1ad7      	sublt	r7, r2, r3
 800b5be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b5c0:	eba3 0801 	sub.w	r8, r3, r1
 800b5c4:	4490      	add	r8, r2
 800b5c6:	4ba1      	ldr	r3, [pc, #644]	; (800b84c <_strtod_l+0x95c>)
 800b5c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b5cc:	4598      	cmp	r8, r3
 800b5ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b5d2:	f280 80c7 	bge.w	800b764 <_strtod_l+0x874>
 800b5d6:	eba3 0308 	sub.w	r3, r3, r8
 800b5da:	2b1f      	cmp	r3, #31
 800b5dc:	eba2 0203 	sub.w	r2, r2, r3
 800b5e0:	f04f 0101 	mov.w	r1, #1
 800b5e4:	f300 80b1 	bgt.w	800b74a <_strtod_l+0x85a>
 800b5e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ec:	930d      	str	r3, [sp, #52]	; 0x34
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9308      	str	r3, [sp, #32]
 800b5f2:	eb09 0802 	add.w	r8, r9, r2
 800b5f6:	9b04      	ldr	r3, [sp, #16]
 800b5f8:	45c1      	cmp	r9, r8
 800b5fa:	4417      	add	r7, r2
 800b5fc:	441f      	add	r7, r3
 800b5fe:	464b      	mov	r3, r9
 800b600:	bfa8      	it	ge
 800b602:	4643      	movge	r3, r8
 800b604:	42bb      	cmp	r3, r7
 800b606:	bfa8      	it	ge
 800b608:	463b      	movge	r3, r7
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	bfc2      	ittt	gt
 800b60e:	eba8 0803 	subgt.w	r8, r8, r3
 800b612:	1aff      	subgt	r7, r7, r3
 800b614:	eba9 0903 	subgt.w	r9, r9, r3
 800b618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	dd17      	ble.n	800b64e <_strtod_l+0x75e>
 800b61e:	4631      	mov	r1, r6
 800b620:	461a      	mov	r2, r3
 800b622:	4620      	mov	r0, r4
 800b624:	f001 fefe 	bl	800d424 <__pow5mult>
 800b628:	4606      	mov	r6, r0
 800b62a:	2800      	cmp	r0, #0
 800b62c:	f43f aea8 	beq.w	800b380 <_strtod_l+0x490>
 800b630:	4601      	mov	r1, r0
 800b632:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b634:	4620      	mov	r0, r4
 800b636:	f001 fe4b 	bl	800d2d0 <__multiply>
 800b63a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b63c:	2800      	cmp	r0, #0
 800b63e:	f43f ae9f 	beq.w	800b380 <_strtod_l+0x490>
 800b642:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b644:	4620      	mov	r0, r4
 800b646:	f001 fd2b 	bl	800d0a0 <_Bfree>
 800b64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b64c:	9318      	str	r3, [sp, #96]	; 0x60
 800b64e:	f1b8 0f00 	cmp.w	r8, #0
 800b652:	f300 808c 	bgt.w	800b76e <_strtod_l+0x87e>
 800b656:	9b06      	ldr	r3, [sp, #24]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	dd08      	ble.n	800b66e <_strtod_l+0x77e>
 800b65c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b65e:	9905      	ldr	r1, [sp, #20]
 800b660:	4620      	mov	r0, r4
 800b662:	f001 fedf 	bl	800d424 <__pow5mult>
 800b666:	9005      	str	r0, [sp, #20]
 800b668:	2800      	cmp	r0, #0
 800b66a:	f43f ae89 	beq.w	800b380 <_strtod_l+0x490>
 800b66e:	2f00      	cmp	r7, #0
 800b670:	dd08      	ble.n	800b684 <_strtod_l+0x794>
 800b672:	9905      	ldr	r1, [sp, #20]
 800b674:	463a      	mov	r2, r7
 800b676:	4620      	mov	r0, r4
 800b678:	f001 ff2e 	bl	800d4d8 <__lshift>
 800b67c:	9005      	str	r0, [sp, #20]
 800b67e:	2800      	cmp	r0, #0
 800b680:	f43f ae7e 	beq.w	800b380 <_strtod_l+0x490>
 800b684:	f1b9 0f00 	cmp.w	r9, #0
 800b688:	dd08      	ble.n	800b69c <_strtod_l+0x7ac>
 800b68a:	4631      	mov	r1, r6
 800b68c:	464a      	mov	r2, r9
 800b68e:	4620      	mov	r0, r4
 800b690:	f001 ff22 	bl	800d4d8 <__lshift>
 800b694:	4606      	mov	r6, r0
 800b696:	2800      	cmp	r0, #0
 800b698:	f43f ae72 	beq.w	800b380 <_strtod_l+0x490>
 800b69c:	9a05      	ldr	r2, [sp, #20]
 800b69e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f001 ffa5 	bl	800d5f0 <__mdiff>
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	f43f ae69 	beq.w	800b380 <_strtod_l+0x490>
 800b6ae:	68c3      	ldr	r3, [r0, #12]
 800b6b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	60c3      	str	r3, [r0, #12]
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	f001 ff7e 	bl	800d5b8 <__mcmp>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	da60      	bge.n	800b782 <_strtod_l+0x892>
 800b6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6c2:	ea53 030a 	orrs.w	r3, r3, sl
 800b6c6:	f040 8082 	bne.w	800b7ce <_strtod_l+0x8de>
 800b6ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d17d      	bne.n	800b7ce <_strtod_l+0x8de>
 800b6d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6d6:	0d1b      	lsrs	r3, r3, #20
 800b6d8:	051b      	lsls	r3, r3, #20
 800b6da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b6de:	d976      	bls.n	800b7ce <_strtod_l+0x8de>
 800b6e0:	696b      	ldr	r3, [r5, #20]
 800b6e2:	b913      	cbnz	r3, 800b6ea <_strtod_l+0x7fa>
 800b6e4:	692b      	ldr	r3, [r5, #16]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	dd71      	ble.n	800b7ce <_strtod_l+0x8de>
 800b6ea:	4629      	mov	r1, r5
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f001 fef2 	bl	800d4d8 <__lshift>
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	f001 ff5e 	bl	800d5b8 <__mcmp>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	dd66      	ble.n	800b7ce <_strtod_l+0x8de>
 800b700:	9904      	ldr	r1, [sp, #16]
 800b702:	4a53      	ldr	r2, [pc, #332]	; (800b850 <_strtod_l+0x960>)
 800b704:	465b      	mov	r3, fp
 800b706:	2900      	cmp	r1, #0
 800b708:	f000 8081 	beq.w	800b80e <_strtod_l+0x91e>
 800b70c:	ea02 010b 	and.w	r1, r2, fp
 800b710:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b714:	dc7b      	bgt.n	800b80e <_strtod_l+0x91e>
 800b716:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b71a:	f77f aea9 	ble.w	800b470 <_strtod_l+0x580>
 800b71e:	4b4d      	ldr	r3, [pc, #308]	; (800b854 <_strtod_l+0x964>)
 800b720:	4650      	mov	r0, sl
 800b722:	4659      	mov	r1, fp
 800b724:	2200      	movs	r2, #0
 800b726:	f7f4 ff6f 	bl	8000608 <__aeabi_dmul>
 800b72a:	460b      	mov	r3, r1
 800b72c:	4303      	orrs	r3, r0
 800b72e:	bf08      	it	eq
 800b730:	2322      	moveq	r3, #34	; 0x22
 800b732:	4682      	mov	sl, r0
 800b734:	468b      	mov	fp, r1
 800b736:	bf08      	it	eq
 800b738:	6023      	streq	r3, [r4, #0]
 800b73a:	e62b      	b.n	800b394 <_strtod_l+0x4a4>
 800b73c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b740:	fa02 f303 	lsl.w	r3, r2, r3
 800b744:	ea03 0a0a 	and.w	sl, r3, sl
 800b748:	e6e3      	b.n	800b512 <_strtod_l+0x622>
 800b74a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b74e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b752:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b756:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b75a:	fa01 f308 	lsl.w	r3, r1, r8
 800b75e:	9308      	str	r3, [sp, #32]
 800b760:	910d      	str	r1, [sp, #52]	; 0x34
 800b762:	e746      	b.n	800b5f2 <_strtod_l+0x702>
 800b764:	2300      	movs	r3, #0
 800b766:	9308      	str	r3, [sp, #32]
 800b768:	2301      	movs	r3, #1
 800b76a:	930d      	str	r3, [sp, #52]	; 0x34
 800b76c:	e741      	b.n	800b5f2 <_strtod_l+0x702>
 800b76e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b770:	4642      	mov	r2, r8
 800b772:	4620      	mov	r0, r4
 800b774:	f001 feb0 	bl	800d4d8 <__lshift>
 800b778:	9018      	str	r0, [sp, #96]	; 0x60
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f47f af6b 	bne.w	800b656 <_strtod_l+0x766>
 800b780:	e5fe      	b.n	800b380 <_strtod_l+0x490>
 800b782:	465f      	mov	r7, fp
 800b784:	d16e      	bne.n	800b864 <_strtod_l+0x974>
 800b786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b788:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b78c:	b342      	cbz	r2, 800b7e0 <_strtod_l+0x8f0>
 800b78e:	4a32      	ldr	r2, [pc, #200]	; (800b858 <_strtod_l+0x968>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d128      	bne.n	800b7e6 <_strtod_l+0x8f6>
 800b794:	9b04      	ldr	r3, [sp, #16]
 800b796:	4651      	mov	r1, sl
 800b798:	b1eb      	cbz	r3, 800b7d6 <_strtod_l+0x8e6>
 800b79a:	4b2d      	ldr	r3, [pc, #180]	; (800b850 <_strtod_l+0x960>)
 800b79c:	403b      	ands	r3, r7
 800b79e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b7a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7a6:	d819      	bhi.n	800b7dc <_strtod_l+0x8ec>
 800b7a8:	0d1b      	lsrs	r3, r3, #20
 800b7aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b2:	4299      	cmp	r1, r3
 800b7b4:	d117      	bne.n	800b7e6 <_strtod_l+0x8f6>
 800b7b6:	4b29      	ldr	r3, [pc, #164]	; (800b85c <_strtod_l+0x96c>)
 800b7b8:	429f      	cmp	r7, r3
 800b7ba:	d102      	bne.n	800b7c2 <_strtod_l+0x8d2>
 800b7bc:	3101      	adds	r1, #1
 800b7be:	f43f addf 	beq.w	800b380 <_strtod_l+0x490>
 800b7c2:	4b23      	ldr	r3, [pc, #140]	; (800b850 <_strtod_l+0x960>)
 800b7c4:	403b      	ands	r3, r7
 800b7c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b7ca:	f04f 0a00 	mov.w	sl, #0
 800b7ce:	9b04      	ldr	r3, [sp, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1a4      	bne.n	800b71e <_strtod_l+0x82e>
 800b7d4:	e5de      	b.n	800b394 <_strtod_l+0x4a4>
 800b7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7da:	e7ea      	b.n	800b7b2 <_strtod_l+0x8c2>
 800b7dc:	4613      	mov	r3, r2
 800b7de:	e7e8      	b.n	800b7b2 <_strtod_l+0x8c2>
 800b7e0:	ea53 030a 	orrs.w	r3, r3, sl
 800b7e4:	d08c      	beq.n	800b700 <_strtod_l+0x810>
 800b7e6:	9b08      	ldr	r3, [sp, #32]
 800b7e8:	b1db      	cbz	r3, 800b822 <_strtod_l+0x932>
 800b7ea:	423b      	tst	r3, r7
 800b7ec:	d0ef      	beq.n	800b7ce <_strtod_l+0x8de>
 800b7ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7f0:	9a04      	ldr	r2, [sp, #16]
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	4659      	mov	r1, fp
 800b7f6:	b1c3      	cbz	r3, 800b82a <_strtod_l+0x93a>
 800b7f8:	f7ff fb5e 	bl	800aeb8 <sulp>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	ec51 0b18 	vmov	r0, r1, d8
 800b804:	f7f4 fd4a 	bl	800029c <__adddf3>
 800b808:	4682      	mov	sl, r0
 800b80a:	468b      	mov	fp, r1
 800b80c:	e7df      	b.n	800b7ce <_strtod_l+0x8de>
 800b80e:	4013      	ands	r3, r2
 800b810:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b814:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b818:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b81c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b820:	e7d5      	b.n	800b7ce <_strtod_l+0x8de>
 800b822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b824:	ea13 0f0a 	tst.w	r3, sl
 800b828:	e7e0      	b.n	800b7ec <_strtod_l+0x8fc>
 800b82a:	f7ff fb45 	bl	800aeb8 <sulp>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	ec51 0b18 	vmov	r0, r1, d8
 800b836:	f7f4 fd2f 	bl	8000298 <__aeabi_dsub>
 800b83a:	2200      	movs	r2, #0
 800b83c:	2300      	movs	r3, #0
 800b83e:	4682      	mov	sl, r0
 800b840:	468b      	mov	fp, r1
 800b842:	f7f5 f949 	bl	8000ad8 <__aeabi_dcmpeq>
 800b846:	2800      	cmp	r0, #0
 800b848:	d0c1      	beq.n	800b7ce <_strtod_l+0x8de>
 800b84a:	e611      	b.n	800b470 <_strtod_l+0x580>
 800b84c:	fffffc02 	.word	0xfffffc02
 800b850:	7ff00000 	.word	0x7ff00000
 800b854:	39500000 	.word	0x39500000
 800b858:	000fffff 	.word	0x000fffff
 800b85c:	7fefffff 	.word	0x7fefffff
 800b860:	08011388 	.word	0x08011388
 800b864:	4631      	mov	r1, r6
 800b866:	4628      	mov	r0, r5
 800b868:	f002 f824 	bl	800d8b4 <__ratio>
 800b86c:	ec59 8b10 	vmov	r8, r9, d0
 800b870:	ee10 0a10 	vmov	r0, s0
 800b874:	2200      	movs	r2, #0
 800b876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b87a:	4649      	mov	r1, r9
 800b87c:	f7f5 f940 	bl	8000b00 <__aeabi_dcmple>
 800b880:	2800      	cmp	r0, #0
 800b882:	d07a      	beq.n	800b97a <_strtod_l+0xa8a>
 800b884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b886:	2b00      	cmp	r3, #0
 800b888:	d04a      	beq.n	800b920 <_strtod_l+0xa30>
 800b88a:	4b95      	ldr	r3, [pc, #596]	; (800bae0 <_strtod_l+0xbf0>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b892:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bae0 <_strtod_l+0xbf0>
 800b896:	f04f 0800 	mov.w	r8, #0
 800b89a:	4b92      	ldr	r3, [pc, #584]	; (800bae4 <_strtod_l+0xbf4>)
 800b89c:	403b      	ands	r3, r7
 800b89e:	930d      	str	r3, [sp, #52]	; 0x34
 800b8a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8a2:	4b91      	ldr	r3, [pc, #580]	; (800bae8 <_strtod_l+0xbf8>)
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	f040 80b0 	bne.w	800ba0a <_strtod_l+0xb1a>
 800b8aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b8b2:	ec4b ab10 	vmov	d0, sl, fp
 800b8b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b8ba:	f001 ff23 	bl	800d704 <__ulp>
 800b8be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8c2:	ec53 2b10 	vmov	r2, r3, d0
 800b8c6:	f7f4 fe9f 	bl	8000608 <__aeabi_dmul>
 800b8ca:	4652      	mov	r2, sl
 800b8cc:	465b      	mov	r3, fp
 800b8ce:	f7f4 fce5 	bl	800029c <__adddf3>
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4983      	ldr	r1, [pc, #524]	; (800bae4 <_strtod_l+0xbf4>)
 800b8d6:	4a85      	ldr	r2, [pc, #532]	; (800baec <_strtod_l+0xbfc>)
 800b8d8:	4019      	ands	r1, r3
 800b8da:	4291      	cmp	r1, r2
 800b8dc:	4682      	mov	sl, r0
 800b8de:	d960      	bls.n	800b9a2 <_strtod_l+0xab2>
 800b8e0:	ee18 3a90 	vmov	r3, s17
 800b8e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d104      	bne.n	800b8f6 <_strtod_l+0xa06>
 800b8ec:	ee18 3a10 	vmov	r3, s16
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	f43f ad45 	beq.w	800b380 <_strtod_l+0x490>
 800b8f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800baf8 <_strtod_l+0xc08>
 800b8fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b8fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b900:	4620      	mov	r0, r4
 800b902:	f001 fbcd 	bl	800d0a0 <_Bfree>
 800b906:	9905      	ldr	r1, [sp, #20]
 800b908:	4620      	mov	r0, r4
 800b90a:	f001 fbc9 	bl	800d0a0 <_Bfree>
 800b90e:	4631      	mov	r1, r6
 800b910:	4620      	mov	r0, r4
 800b912:	f001 fbc5 	bl	800d0a0 <_Bfree>
 800b916:	4629      	mov	r1, r5
 800b918:	4620      	mov	r0, r4
 800b91a:	f001 fbc1 	bl	800d0a0 <_Bfree>
 800b91e:	e61a      	b.n	800b556 <_strtod_l+0x666>
 800b920:	f1ba 0f00 	cmp.w	sl, #0
 800b924:	d11b      	bne.n	800b95e <_strtod_l+0xa6e>
 800b926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b92a:	b9f3      	cbnz	r3, 800b96a <_strtod_l+0xa7a>
 800b92c:	4b6c      	ldr	r3, [pc, #432]	; (800bae0 <_strtod_l+0xbf0>)
 800b92e:	2200      	movs	r2, #0
 800b930:	4640      	mov	r0, r8
 800b932:	4649      	mov	r1, r9
 800b934:	f7f5 f8da 	bl	8000aec <__aeabi_dcmplt>
 800b938:	b9d0      	cbnz	r0, 800b970 <_strtod_l+0xa80>
 800b93a:	4640      	mov	r0, r8
 800b93c:	4649      	mov	r1, r9
 800b93e:	4b6c      	ldr	r3, [pc, #432]	; (800baf0 <_strtod_l+0xc00>)
 800b940:	2200      	movs	r2, #0
 800b942:	f7f4 fe61 	bl	8000608 <__aeabi_dmul>
 800b946:	4680      	mov	r8, r0
 800b948:	4689      	mov	r9, r1
 800b94a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b94e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b952:	9315      	str	r3, [sp, #84]	; 0x54
 800b954:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b958:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b95c:	e79d      	b.n	800b89a <_strtod_l+0x9aa>
 800b95e:	f1ba 0f01 	cmp.w	sl, #1
 800b962:	d102      	bne.n	800b96a <_strtod_l+0xa7a>
 800b964:	2f00      	cmp	r7, #0
 800b966:	f43f ad83 	beq.w	800b470 <_strtod_l+0x580>
 800b96a:	4b62      	ldr	r3, [pc, #392]	; (800baf4 <_strtod_l+0xc04>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	e78e      	b.n	800b88e <_strtod_l+0x99e>
 800b970:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800baf0 <_strtod_l+0xc00>
 800b974:	f04f 0800 	mov.w	r8, #0
 800b978:	e7e7      	b.n	800b94a <_strtod_l+0xa5a>
 800b97a:	4b5d      	ldr	r3, [pc, #372]	; (800baf0 <_strtod_l+0xc00>)
 800b97c:	4640      	mov	r0, r8
 800b97e:	4649      	mov	r1, r9
 800b980:	2200      	movs	r2, #0
 800b982:	f7f4 fe41 	bl	8000608 <__aeabi_dmul>
 800b986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b988:	4680      	mov	r8, r0
 800b98a:	4689      	mov	r9, r1
 800b98c:	b933      	cbnz	r3, 800b99c <_strtod_l+0xaac>
 800b98e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b992:	900e      	str	r0, [sp, #56]	; 0x38
 800b994:	930f      	str	r3, [sp, #60]	; 0x3c
 800b996:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b99a:	e7dd      	b.n	800b958 <_strtod_l+0xa68>
 800b99c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b9a0:	e7f9      	b.n	800b996 <_strtod_l+0xaa6>
 800b9a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b9a6:	9b04      	ldr	r3, [sp, #16]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1a8      	bne.n	800b8fe <_strtod_l+0xa0e>
 800b9ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9b2:	0d1b      	lsrs	r3, r3, #20
 800b9b4:	051b      	lsls	r3, r3, #20
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d1a1      	bne.n	800b8fe <_strtod_l+0xa0e>
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	4649      	mov	r1, r9
 800b9be:	f7f5 f983 	bl	8000cc8 <__aeabi_d2lz>
 800b9c2:	f7f4 fdf3 	bl	80005ac <__aeabi_l2d>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4640      	mov	r0, r8
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	f7f4 fc63 	bl	8000298 <__aeabi_dsub>
 800b9d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9d8:	ea43 030a 	orr.w	r3, r3, sl
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	4680      	mov	r8, r0
 800b9e0:	4689      	mov	r9, r1
 800b9e2:	d055      	beq.n	800ba90 <_strtod_l+0xba0>
 800b9e4:	a336      	add	r3, pc, #216	; (adr r3, 800bac0 <_strtod_l+0xbd0>)
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	f7f5 f87f 	bl	8000aec <__aeabi_dcmplt>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f47f acd0 	bne.w	800b394 <_strtod_l+0x4a4>
 800b9f4:	a334      	add	r3, pc, #208	; (adr r3, 800bac8 <_strtod_l+0xbd8>)
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f5 f893 	bl	8000b28 <__aeabi_dcmpgt>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	f43f af7b 	beq.w	800b8fe <_strtod_l+0xa0e>
 800ba08:	e4c4      	b.n	800b394 <_strtod_l+0x4a4>
 800ba0a:	9b04      	ldr	r3, [sp, #16]
 800ba0c:	b333      	cbz	r3, 800ba5c <_strtod_l+0xb6c>
 800ba0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba14:	d822      	bhi.n	800ba5c <_strtod_l+0xb6c>
 800ba16:	a32e      	add	r3, pc, #184	; (adr r3, 800bad0 <_strtod_l+0xbe0>)
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4649      	mov	r1, r9
 800ba20:	f7f5 f86e 	bl	8000b00 <__aeabi_dcmple>
 800ba24:	b1a0      	cbz	r0, 800ba50 <_strtod_l+0xb60>
 800ba26:	4649      	mov	r1, r9
 800ba28:	4640      	mov	r0, r8
 800ba2a:	f7f5 f8c5 	bl	8000bb8 <__aeabi_d2uiz>
 800ba2e:	2801      	cmp	r0, #1
 800ba30:	bf38      	it	cc
 800ba32:	2001      	movcc	r0, #1
 800ba34:	f7f4 fd6e 	bl	8000514 <__aeabi_ui2d>
 800ba38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba3a:	4680      	mov	r8, r0
 800ba3c:	4689      	mov	r9, r1
 800ba3e:	bb23      	cbnz	r3, 800ba8a <_strtod_l+0xb9a>
 800ba40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba44:	9010      	str	r0, [sp, #64]	; 0x40
 800ba46:	9311      	str	r3, [sp, #68]	; 0x44
 800ba48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ba50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba58:	1a9b      	subs	r3, r3, r2
 800ba5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba60:	eeb0 0a48 	vmov.f32	s0, s16
 800ba64:	eef0 0a68 	vmov.f32	s1, s17
 800ba68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba6c:	f001 fe4a 	bl	800d704 <__ulp>
 800ba70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba74:	ec53 2b10 	vmov	r2, r3, d0
 800ba78:	f7f4 fdc6 	bl	8000608 <__aeabi_dmul>
 800ba7c:	ec53 2b18 	vmov	r2, r3, d8
 800ba80:	f7f4 fc0c 	bl	800029c <__adddf3>
 800ba84:	4682      	mov	sl, r0
 800ba86:	468b      	mov	fp, r1
 800ba88:	e78d      	b.n	800b9a6 <_strtod_l+0xab6>
 800ba8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ba8e:	e7db      	b.n	800ba48 <_strtod_l+0xb58>
 800ba90:	a311      	add	r3, pc, #68	; (adr r3, 800bad8 <_strtod_l+0xbe8>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f7f5 f829 	bl	8000aec <__aeabi_dcmplt>
 800ba9a:	e7b2      	b.n	800ba02 <_strtod_l+0xb12>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	930a      	str	r3, [sp, #40]	; 0x28
 800baa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800baa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800baa4:	6013      	str	r3, [r2, #0]
 800baa6:	f7ff ba6b 	b.w	800af80 <_strtod_l+0x90>
 800baaa:	2a65      	cmp	r2, #101	; 0x65
 800baac:	f43f ab5f 	beq.w	800b16e <_strtod_l+0x27e>
 800bab0:	2a45      	cmp	r2, #69	; 0x45
 800bab2:	f43f ab5c 	beq.w	800b16e <_strtod_l+0x27e>
 800bab6:	2301      	movs	r3, #1
 800bab8:	f7ff bb94 	b.w	800b1e4 <_strtod_l+0x2f4>
 800babc:	f3af 8000 	nop.w
 800bac0:	94a03595 	.word	0x94a03595
 800bac4:	3fdfffff 	.word	0x3fdfffff
 800bac8:	35afe535 	.word	0x35afe535
 800bacc:	3fe00000 	.word	0x3fe00000
 800bad0:	ffc00000 	.word	0xffc00000
 800bad4:	41dfffff 	.word	0x41dfffff
 800bad8:	94a03595 	.word	0x94a03595
 800badc:	3fcfffff 	.word	0x3fcfffff
 800bae0:	3ff00000 	.word	0x3ff00000
 800bae4:	7ff00000 	.word	0x7ff00000
 800bae8:	7fe00000 	.word	0x7fe00000
 800baec:	7c9fffff 	.word	0x7c9fffff
 800baf0:	3fe00000 	.word	0x3fe00000
 800baf4:	bff00000 	.word	0xbff00000
 800baf8:	7fefffff 	.word	0x7fefffff

0800bafc <_strtod_r>:
 800bafc:	4b01      	ldr	r3, [pc, #4]	; (800bb04 <_strtod_r+0x8>)
 800bafe:	f7ff b9f7 	b.w	800aef0 <_strtod_l>
 800bb02:	bf00      	nop
 800bb04:	20000090 	.word	0x20000090

0800bb08 <_strtol_l.constprop.0>:
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb0e:	d001      	beq.n	800bb14 <_strtol_l.constprop.0+0xc>
 800bb10:	2b24      	cmp	r3, #36	; 0x24
 800bb12:	d906      	bls.n	800bb22 <_strtol_l.constprop.0+0x1a>
 800bb14:	f7fe faf0 	bl	800a0f8 <__errno>
 800bb18:	2316      	movs	r3, #22
 800bb1a:	6003      	str	r3, [r0, #0]
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bc08 <_strtol_l.constprop.0+0x100>
 800bb26:	460d      	mov	r5, r1
 800bb28:	462e      	mov	r6, r5
 800bb2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bb32:	f017 0708 	ands.w	r7, r7, #8
 800bb36:	d1f7      	bne.n	800bb28 <_strtol_l.constprop.0+0x20>
 800bb38:	2c2d      	cmp	r4, #45	; 0x2d
 800bb3a:	d132      	bne.n	800bba2 <_strtol_l.constprop.0+0x9a>
 800bb3c:	782c      	ldrb	r4, [r5, #0]
 800bb3e:	2701      	movs	r7, #1
 800bb40:	1cb5      	adds	r5, r6, #2
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d05b      	beq.n	800bbfe <_strtol_l.constprop.0+0xf6>
 800bb46:	2b10      	cmp	r3, #16
 800bb48:	d109      	bne.n	800bb5e <_strtol_l.constprop.0+0x56>
 800bb4a:	2c30      	cmp	r4, #48	; 0x30
 800bb4c:	d107      	bne.n	800bb5e <_strtol_l.constprop.0+0x56>
 800bb4e:	782c      	ldrb	r4, [r5, #0]
 800bb50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bb54:	2c58      	cmp	r4, #88	; 0x58
 800bb56:	d14d      	bne.n	800bbf4 <_strtol_l.constprop.0+0xec>
 800bb58:	786c      	ldrb	r4, [r5, #1]
 800bb5a:	2310      	movs	r3, #16
 800bb5c:	3502      	adds	r5, #2
 800bb5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bb62:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bb66:	f04f 0c00 	mov.w	ip, #0
 800bb6a:	fbb8 f9f3 	udiv	r9, r8, r3
 800bb6e:	4666      	mov	r6, ip
 800bb70:	fb03 8a19 	mls	sl, r3, r9, r8
 800bb74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bb78:	f1be 0f09 	cmp.w	lr, #9
 800bb7c:	d816      	bhi.n	800bbac <_strtol_l.constprop.0+0xa4>
 800bb7e:	4674      	mov	r4, lr
 800bb80:	42a3      	cmp	r3, r4
 800bb82:	dd24      	ble.n	800bbce <_strtol_l.constprop.0+0xc6>
 800bb84:	f1bc 0f00 	cmp.w	ip, #0
 800bb88:	db1e      	blt.n	800bbc8 <_strtol_l.constprop.0+0xc0>
 800bb8a:	45b1      	cmp	r9, r6
 800bb8c:	d31c      	bcc.n	800bbc8 <_strtol_l.constprop.0+0xc0>
 800bb8e:	d101      	bne.n	800bb94 <_strtol_l.constprop.0+0x8c>
 800bb90:	45a2      	cmp	sl, r4
 800bb92:	db19      	blt.n	800bbc8 <_strtol_l.constprop.0+0xc0>
 800bb94:	fb06 4603 	mla	r6, r6, r3, r4
 800bb98:	f04f 0c01 	mov.w	ip, #1
 800bb9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bba0:	e7e8      	b.n	800bb74 <_strtol_l.constprop.0+0x6c>
 800bba2:	2c2b      	cmp	r4, #43	; 0x2b
 800bba4:	bf04      	itt	eq
 800bba6:	782c      	ldrbeq	r4, [r5, #0]
 800bba8:	1cb5      	addeq	r5, r6, #2
 800bbaa:	e7ca      	b.n	800bb42 <_strtol_l.constprop.0+0x3a>
 800bbac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bbb0:	f1be 0f19 	cmp.w	lr, #25
 800bbb4:	d801      	bhi.n	800bbba <_strtol_l.constprop.0+0xb2>
 800bbb6:	3c37      	subs	r4, #55	; 0x37
 800bbb8:	e7e2      	b.n	800bb80 <_strtol_l.constprop.0+0x78>
 800bbba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bbbe:	f1be 0f19 	cmp.w	lr, #25
 800bbc2:	d804      	bhi.n	800bbce <_strtol_l.constprop.0+0xc6>
 800bbc4:	3c57      	subs	r4, #87	; 0x57
 800bbc6:	e7db      	b.n	800bb80 <_strtol_l.constprop.0+0x78>
 800bbc8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bbcc:	e7e6      	b.n	800bb9c <_strtol_l.constprop.0+0x94>
 800bbce:	f1bc 0f00 	cmp.w	ip, #0
 800bbd2:	da05      	bge.n	800bbe0 <_strtol_l.constprop.0+0xd8>
 800bbd4:	2322      	movs	r3, #34	; 0x22
 800bbd6:	6003      	str	r3, [r0, #0]
 800bbd8:	4646      	mov	r6, r8
 800bbda:	b942      	cbnz	r2, 800bbee <_strtol_l.constprop.0+0xe6>
 800bbdc:	4630      	mov	r0, r6
 800bbde:	e79e      	b.n	800bb1e <_strtol_l.constprop.0+0x16>
 800bbe0:	b107      	cbz	r7, 800bbe4 <_strtol_l.constprop.0+0xdc>
 800bbe2:	4276      	negs	r6, r6
 800bbe4:	2a00      	cmp	r2, #0
 800bbe6:	d0f9      	beq.n	800bbdc <_strtol_l.constprop.0+0xd4>
 800bbe8:	f1bc 0f00 	cmp.w	ip, #0
 800bbec:	d000      	beq.n	800bbf0 <_strtol_l.constprop.0+0xe8>
 800bbee:	1e69      	subs	r1, r5, #1
 800bbf0:	6011      	str	r1, [r2, #0]
 800bbf2:	e7f3      	b.n	800bbdc <_strtol_l.constprop.0+0xd4>
 800bbf4:	2430      	movs	r4, #48	; 0x30
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1b1      	bne.n	800bb5e <_strtol_l.constprop.0+0x56>
 800bbfa:	2308      	movs	r3, #8
 800bbfc:	e7af      	b.n	800bb5e <_strtol_l.constprop.0+0x56>
 800bbfe:	2c30      	cmp	r4, #48	; 0x30
 800bc00:	d0a5      	beq.n	800bb4e <_strtol_l.constprop.0+0x46>
 800bc02:	230a      	movs	r3, #10
 800bc04:	e7ab      	b.n	800bb5e <_strtol_l.constprop.0+0x56>
 800bc06:	bf00      	nop
 800bc08:	080113b1 	.word	0x080113b1

0800bc0c <_strtol_r>:
 800bc0c:	f7ff bf7c 	b.w	800bb08 <_strtol_l.constprop.0>

0800bc10 <quorem>:
 800bc10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	6903      	ldr	r3, [r0, #16]
 800bc16:	690c      	ldr	r4, [r1, #16]
 800bc18:	42a3      	cmp	r3, r4
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	f2c0 8081 	blt.w	800bd22 <quorem+0x112>
 800bc20:	3c01      	subs	r4, #1
 800bc22:	f101 0814 	add.w	r8, r1, #20
 800bc26:	f100 0514 	add.w	r5, r0, #20
 800bc2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc2e:	9301      	str	r3, [sp, #4]
 800bc30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc44:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc48:	d331      	bcc.n	800bcae <quorem+0x9e>
 800bc4a:	f04f 0e00 	mov.w	lr, #0
 800bc4e:	4640      	mov	r0, r8
 800bc50:	46ac      	mov	ip, r5
 800bc52:	46f2      	mov	sl, lr
 800bc54:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc58:	b293      	uxth	r3, r2
 800bc5a:	fb06 e303 	mla	r3, r6, r3, lr
 800bc5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	ebaa 0303 	sub.w	r3, sl, r3
 800bc68:	f8dc a000 	ldr.w	sl, [ip]
 800bc6c:	0c12      	lsrs	r2, r2, #16
 800bc6e:	fa13 f38a 	uxtah	r3, r3, sl
 800bc72:	fb06 e202 	mla	r2, r6, r2, lr
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	9b00      	ldr	r3, [sp, #0]
 800bc7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc7e:	b292      	uxth	r2, r2
 800bc80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc88:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc8c:	4581      	cmp	r9, r0
 800bc8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc92:	f84c 3b04 	str.w	r3, [ip], #4
 800bc96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc9a:	d2db      	bcs.n	800bc54 <quorem+0x44>
 800bc9c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bca0:	b92b      	cbnz	r3, 800bcae <quorem+0x9e>
 800bca2:	9b01      	ldr	r3, [sp, #4]
 800bca4:	3b04      	subs	r3, #4
 800bca6:	429d      	cmp	r5, r3
 800bca8:	461a      	mov	r2, r3
 800bcaa:	d32e      	bcc.n	800bd0a <quorem+0xfa>
 800bcac:	613c      	str	r4, [r7, #16]
 800bcae:	4638      	mov	r0, r7
 800bcb0:	f001 fc82 	bl	800d5b8 <__mcmp>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	db24      	blt.n	800bd02 <quorem+0xf2>
 800bcb8:	3601      	adds	r6, #1
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f04f 0c00 	mov.w	ip, #0
 800bcc0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcc4:	f8d0 e000 	ldr.w	lr, [r0]
 800bcc8:	b293      	uxth	r3, r2
 800bcca:	ebac 0303 	sub.w	r3, ip, r3
 800bcce:	0c12      	lsrs	r2, r2, #16
 800bcd0:	fa13 f38e 	uxtah	r3, r3, lr
 800bcd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bcd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bce2:	45c1      	cmp	r9, r8
 800bce4:	f840 3b04 	str.w	r3, [r0], #4
 800bce8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bcec:	d2e8      	bcs.n	800bcc0 <quorem+0xb0>
 800bcee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcf6:	b922      	cbnz	r2, 800bd02 <quorem+0xf2>
 800bcf8:	3b04      	subs	r3, #4
 800bcfa:	429d      	cmp	r5, r3
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	d30a      	bcc.n	800bd16 <quorem+0x106>
 800bd00:	613c      	str	r4, [r7, #16]
 800bd02:	4630      	mov	r0, r6
 800bd04:	b003      	add	sp, #12
 800bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0a:	6812      	ldr	r2, [r2, #0]
 800bd0c:	3b04      	subs	r3, #4
 800bd0e:	2a00      	cmp	r2, #0
 800bd10:	d1cc      	bne.n	800bcac <quorem+0x9c>
 800bd12:	3c01      	subs	r4, #1
 800bd14:	e7c7      	b.n	800bca6 <quorem+0x96>
 800bd16:	6812      	ldr	r2, [r2, #0]
 800bd18:	3b04      	subs	r3, #4
 800bd1a:	2a00      	cmp	r2, #0
 800bd1c:	d1f0      	bne.n	800bd00 <quorem+0xf0>
 800bd1e:	3c01      	subs	r4, #1
 800bd20:	e7eb      	b.n	800bcfa <quorem+0xea>
 800bd22:	2000      	movs	r0, #0
 800bd24:	e7ee      	b.n	800bd04 <quorem+0xf4>
	...

0800bd28 <_dtoa_r>:
 800bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	ed2d 8b04 	vpush	{d8-d9}
 800bd30:	ec57 6b10 	vmov	r6, r7, d0
 800bd34:	b093      	sub	sp, #76	; 0x4c
 800bd36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd3c:	9106      	str	r1, [sp, #24]
 800bd3e:	ee10 aa10 	vmov	sl, s0
 800bd42:	4604      	mov	r4, r0
 800bd44:	9209      	str	r2, [sp, #36]	; 0x24
 800bd46:	930c      	str	r3, [sp, #48]	; 0x30
 800bd48:	46bb      	mov	fp, r7
 800bd4a:	b975      	cbnz	r5, 800bd6a <_dtoa_r+0x42>
 800bd4c:	2010      	movs	r0, #16
 800bd4e:	f001 f94d 	bl	800cfec <malloc>
 800bd52:	4602      	mov	r2, r0
 800bd54:	6260      	str	r0, [r4, #36]	; 0x24
 800bd56:	b920      	cbnz	r0, 800bd62 <_dtoa_r+0x3a>
 800bd58:	4ba7      	ldr	r3, [pc, #668]	; (800bff8 <_dtoa_r+0x2d0>)
 800bd5a:	21ea      	movs	r1, #234	; 0xea
 800bd5c:	48a7      	ldr	r0, [pc, #668]	; (800bffc <_dtoa_r+0x2d4>)
 800bd5e:	f002 f8ad 	bl	800debc <__assert_func>
 800bd62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd66:	6005      	str	r5, [r0, #0]
 800bd68:	60c5      	str	r5, [r0, #12]
 800bd6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd6c:	6819      	ldr	r1, [r3, #0]
 800bd6e:	b151      	cbz	r1, 800bd86 <_dtoa_r+0x5e>
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	604a      	str	r2, [r1, #4]
 800bd74:	2301      	movs	r3, #1
 800bd76:	4093      	lsls	r3, r2
 800bd78:	608b      	str	r3, [r1, #8]
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f001 f990 	bl	800d0a0 <_Bfree>
 800bd80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd82:	2200      	movs	r2, #0
 800bd84:	601a      	str	r2, [r3, #0]
 800bd86:	1e3b      	subs	r3, r7, #0
 800bd88:	bfaa      	itet	ge
 800bd8a:	2300      	movge	r3, #0
 800bd8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bd90:	f8c8 3000 	strge.w	r3, [r8]
 800bd94:	4b9a      	ldr	r3, [pc, #616]	; (800c000 <_dtoa_r+0x2d8>)
 800bd96:	bfbc      	itt	lt
 800bd98:	2201      	movlt	r2, #1
 800bd9a:	f8c8 2000 	strlt.w	r2, [r8]
 800bd9e:	ea33 030b 	bics.w	r3, r3, fp
 800bda2:	d11b      	bne.n	800bddc <_dtoa_r+0xb4>
 800bda4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bda6:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdaa:	6013      	str	r3, [r2, #0]
 800bdac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdb0:	4333      	orrs	r3, r6
 800bdb2:	f000 8592 	beq.w	800c8da <_dtoa_r+0xbb2>
 800bdb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdb8:	b963      	cbnz	r3, 800bdd4 <_dtoa_r+0xac>
 800bdba:	4b92      	ldr	r3, [pc, #584]	; (800c004 <_dtoa_r+0x2dc>)
 800bdbc:	e022      	b.n	800be04 <_dtoa_r+0xdc>
 800bdbe:	4b92      	ldr	r3, [pc, #584]	; (800c008 <_dtoa_r+0x2e0>)
 800bdc0:	9301      	str	r3, [sp, #4]
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	9801      	ldr	r0, [sp, #4]
 800bdca:	b013      	add	sp, #76	; 0x4c
 800bdcc:	ecbd 8b04 	vpop	{d8-d9}
 800bdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd4:	4b8b      	ldr	r3, [pc, #556]	; (800c004 <_dtoa_r+0x2dc>)
 800bdd6:	9301      	str	r3, [sp, #4]
 800bdd8:	3303      	adds	r3, #3
 800bdda:	e7f3      	b.n	800bdc4 <_dtoa_r+0x9c>
 800bddc:	2200      	movs	r2, #0
 800bdde:	2300      	movs	r3, #0
 800bde0:	4650      	mov	r0, sl
 800bde2:	4659      	mov	r1, fp
 800bde4:	f7f4 fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 800bde8:	ec4b ab19 	vmov	d9, sl, fp
 800bdec:	4680      	mov	r8, r0
 800bdee:	b158      	cbz	r0, 800be08 <_dtoa_r+0xe0>
 800bdf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	6013      	str	r3, [r2, #0]
 800bdf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 856b 	beq.w	800c8d4 <_dtoa_r+0xbac>
 800bdfe:	4883      	ldr	r0, [pc, #524]	; (800c00c <_dtoa_r+0x2e4>)
 800be00:	6018      	str	r0, [r3, #0]
 800be02:	1e43      	subs	r3, r0, #1
 800be04:	9301      	str	r3, [sp, #4]
 800be06:	e7df      	b.n	800bdc8 <_dtoa_r+0xa0>
 800be08:	ec4b ab10 	vmov	d0, sl, fp
 800be0c:	aa10      	add	r2, sp, #64	; 0x40
 800be0e:	a911      	add	r1, sp, #68	; 0x44
 800be10:	4620      	mov	r0, r4
 800be12:	f001 fcf3 	bl	800d7fc <__d2b>
 800be16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800be1a:	ee08 0a10 	vmov	s16, r0
 800be1e:	2d00      	cmp	r5, #0
 800be20:	f000 8084 	beq.w	800bf2c <_dtoa_r+0x204>
 800be24:	ee19 3a90 	vmov	r3, s19
 800be28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be30:	4656      	mov	r6, sl
 800be32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800be3e:	4b74      	ldr	r3, [pc, #464]	; (800c010 <_dtoa_r+0x2e8>)
 800be40:	2200      	movs	r2, #0
 800be42:	4630      	mov	r0, r6
 800be44:	4639      	mov	r1, r7
 800be46:	f7f4 fa27 	bl	8000298 <__aeabi_dsub>
 800be4a:	a365      	add	r3, pc, #404	; (adr r3, 800bfe0 <_dtoa_r+0x2b8>)
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	f7f4 fbda 	bl	8000608 <__aeabi_dmul>
 800be54:	a364      	add	r3, pc, #400	; (adr r3, 800bfe8 <_dtoa_r+0x2c0>)
 800be56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5a:	f7f4 fa1f 	bl	800029c <__adddf3>
 800be5e:	4606      	mov	r6, r0
 800be60:	4628      	mov	r0, r5
 800be62:	460f      	mov	r7, r1
 800be64:	f7f4 fb66 	bl	8000534 <__aeabi_i2d>
 800be68:	a361      	add	r3, pc, #388	; (adr r3, 800bff0 <_dtoa_r+0x2c8>)
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	f7f4 fbcb 	bl	8000608 <__aeabi_dmul>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4630      	mov	r0, r6
 800be78:	4639      	mov	r1, r7
 800be7a:	f7f4 fa0f 	bl	800029c <__adddf3>
 800be7e:	4606      	mov	r6, r0
 800be80:	460f      	mov	r7, r1
 800be82:	f7f4 fe71 	bl	8000b68 <__aeabi_d2iz>
 800be86:	2200      	movs	r2, #0
 800be88:	9000      	str	r0, [sp, #0]
 800be8a:	2300      	movs	r3, #0
 800be8c:	4630      	mov	r0, r6
 800be8e:	4639      	mov	r1, r7
 800be90:	f7f4 fe2c 	bl	8000aec <__aeabi_dcmplt>
 800be94:	b150      	cbz	r0, 800beac <_dtoa_r+0x184>
 800be96:	9800      	ldr	r0, [sp, #0]
 800be98:	f7f4 fb4c 	bl	8000534 <__aeabi_i2d>
 800be9c:	4632      	mov	r2, r6
 800be9e:	463b      	mov	r3, r7
 800bea0:	f7f4 fe1a 	bl	8000ad8 <__aeabi_dcmpeq>
 800bea4:	b910      	cbnz	r0, 800beac <_dtoa_r+0x184>
 800bea6:	9b00      	ldr	r3, [sp, #0]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	9b00      	ldr	r3, [sp, #0]
 800beae:	2b16      	cmp	r3, #22
 800beb0:	d85a      	bhi.n	800bf68 <_dtoa_r+0x240>
 800beb2:	9a00      	ldr	r2, [sp, #0]
 800beb4:	4b57      	ldr	r3, [pc, #348]	; (800c014 <_dtoa_r+0x2ec>)
 800beb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebe:	ec51 0b19 	vmov	r0, r1, d9
 800bec2:	f7f4 fe13 	bl	8000aec <__aeabi_dcmplt>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d050      	beq.n	800bf6c <_dtoa_r+0x244>
 800beca:	9b00      	ldr	r3, [sp, #0]
 800becc:	3b01      	subs	r3, #1
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	2300      	movs	r3, #0
 800bed2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bed6:	1b5d      	subs	r5, r3, r5
 800bed8:	1e6b      	subs	r3, r5, #1
 800beda:	9305      	str	r3, [sp, #20]
 800bedc:	bf45      	ittet	mi
 800bede:	f1c5 0301 	rsbmi	r3, r5, #1
 800bee2:	9304      	strmi	r3, [sp, #16]
 800bee4:	2300      	movpl	r3, #0
 800bee6:	2300      	movmi	r3, #0
 800bee8:	bf4c      	ite	mi
 800beea:	9305      	strmi	r3, [sp, #20]
 800beec:	9304      	strpl	r3, [sp, #16]
 800beee:	9b00      	ldr	r3, [sp, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	db3d      	blt.n	800bf70 <_dtoa_r+0x248>
 800bef4:	9b05      	ldr	r3, [sp, #20]
 800bef6:	9a00      	ldr	r2, [sp, #0]
 800bef8:	920a      	str	r2, [sp, #40]	; 0x28
 800befa:	4413      	add	r3, r2
 800befc:	9305      	str	r3, [sp, #20]
 800befe:	2300      	movs	r3, #0
 800bf00:	9307      	str	r3, [sp, #28]
 800bf02:	9b06      	ldr	r3, [sp, #24]
 800bf04:	2b09      	cmp	r3, #9
 800bf06:	f200 8089 	bhi.w	800c01c <_dtoa_r+0x2f4>
 800bf0a:	2b05      	cmp	r3, #5
 800bf0c:	bfc4      	itt	gt
 800bf0e:	3b04      	subgt	r3, #4
 800bf10:	9306      	strgt	r3, [sp, #24]
 800bf12:	9b06      	ldr	r3, [sp, #24]
 800bf14:	f1a3 0302 	sub.w	r3, r3, #2
 800bf18:	bfcc      	ite	gt
 800bf1a:	2500      	movgt	r5, #0
 800bf1c:	2501      	movle	r5, #1
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	f200 8087 	bhi.w	800c032 <_dtoa_r+0x30a>
 800bf24:	e8df f003 	tbb	[pc, r3]
 800bf28:	59383a2d 	.word	0x59383a2d
 800bf2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf30:	441d      	add	r5, r3
 800bf32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf36:	2b20      	cmp	r3, #32
 800bf38:	bfc1      	itttt	gt
 800bf3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf42:	fa0b f303 	lslgt.w	r3, fp, r3
 800bf46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf4a:	bfda      	itte	le
 800bf4c:	f1c3 0320 	rsble	r3, r3, #32
 800bf50:	fa06 f003 	lslle.w	r0, r6, r3
 800bf54:	4318      	orrgt	r0, r3
 800bf56:	f7f4 fadd 	bl	8000514 <__aeabi_ui2d>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bf62:	3d01      	subs	r5, #1
 800bf64:	930e      	str	r3, [sp, #56]	; 0x38
 800bf66:	e76a      	b.n	800be3e <_dtoa_r+0x116>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e7b2      	b.n	800bed2 <_dtoa_r+0x1aa>
 800bf6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf6e:	e7b1      	b.n	800bed4 <_dtoa_r+0x1ac>
 800bf70:	9b04      	ldr	r3, [sp, #16]
 800bf72:	9a00      	ldr	r2, [sp, #0]
 800bf74:	1a9b      	subs	r3, r3, r2
 800bf76:	9304      	str	r3, [sp, #16]
 800bf78:	4253      	negs	r3, r2
 800bf7a:	9307      	str	r3, [sp, #28]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf80:	e7bf      	b.n	800bf02 <_dtoa_r+0x1da>
 800bf82:	2300      	movs	r3, #0
 800bf84:	9308      	str	r3, [sp, #32]
 800bf86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	dc55      	bgt.n	800c038 <_dtoa_r+0x310>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf92:	461a      	mov	r2, r3
 800bf94:	9209      	str	r2, [sp, #36]	; 0x24
 800bf96:	e00c      	b.n	800bfb2 <_dtoa_r+0x28a>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e7f3      	b.n	800bf84 <_dtoa_r+0x25c>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfa0:	9308      	str	r3, [sp, #32]
 800bfa2:	9b00      	ldr	r3, [sp, #0]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	9302      	str	r3, [sp, #8]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	9303      	str	r3, [sp, #12]
 800bfae:	bfb8      	it	lt
 800bfb0:	2301      	movlt	r3, #1
 800bfb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	6042      	str	r2, [r0, #4]
 800bfb8:	2204      	movs	r2, #4
 800bfba:	f102 0614 	add.w	r6, r2, #20
 800bfbe:	429e      	cmp	r6, r3
 800bfc0:	6841      	ldr	r1, [r0, #4]
 800bfc2:	d93d      	bls.n	800c040 <_dtoa_r+0x318>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f001 f82b 	bl	800d020 <_Balloc>
 800bfca:	9001      	str	r0, [sp, #4]
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d13b      	bne.n	800c048 <_dtoa_r+0x320>
 800bfd0:	4b11      	ldr	r3, [pc, #68]	; (800c018 <_dtoa_r+0x2f0>)
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bfd8:	e6c0      	b.n	800bd5c <_dtoa_r+0x34>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e7df      	b.n	800bf9e <_dtoa_r+0x276>
 800bfde:	bf00      	nop
 800bfe0:	636f4361 	.word	0x636f4361
 800bfe4:	3fd287a7 	.word	0x3fd287a7
 800bfe8:	8b60c8b3 	.word	0x8b60c8b3
 800bfec:	3fc68a28 	.word	0x3fc68a28
 800bff0:	509f79fb 	.word	0x509f79fb
 800bff4:	3fd34413 	.word	0x3fd34413
 800bff8:	080114be 	.word	0x080114be
 800bffc:	080114d5 	.word	0x080114d5
 800c000:	7ff00000 	.word	0x7ff00000
 800c004:	080114ba 	.word	0x080114ba
 800c008:	080114b1 	.word	0x080114b1
 800c00c:	08011331 	.word	0x08011331
 800c010:	3ff80000 	.word	0x3ff80000
 800c014:	08011640 	.word	0x08011640
 800c018:	08011530 	.word	0x08011530
 800c01c:	2501      	movs	r5, #1
 800c01e:	2300      	movs	r3, #0
 800c020:	9306      	str	r3, [sp, #24]
 800c022:	9508      	str	r5, [sp, #32]
 800c024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c028:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c02c:	2200      	movs	r2, #0
 800c02e:	2312      	movs	r3, #18
 800c030:	e7b0      	b.n	800bf94 <_dtoa_r+0x26c>
 800c032:	2301      	movs	r3, #1
 800c034:	9308      	str	r3, [sp, #32]
 800c036:	e7f5      	b.n	800c024 <_dtoa_r+0x2fc>
 800c038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c03a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c03e:	e7b8      	b.n	800bfb2 <_dtoa_r+0x28a>
 800c040:	3101      	adds	r1, #1
 800c042:	6041      	str	r1, [r0, #4]
 800c044:	0052      	lsls	r2, r2, #1
 800c046:	e7b8      	b.n	800bfba <_dtoa_r+0x292>
 800c048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c04a:	9a01      	ldr	r2, [sp, #4]
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	9b03      	ldr	r3, [sp, #12]
 800c050:	2b0e      	cmp	r3, #14
 800c052:	f200 809d 	bhi.w	800c190 <_dtoa_r+0x468>
 800c056:	2d00      	cmp	r5, #0
 800c058:	f000 809a 	beq.w	800c190 <_dtoa_r+0x468>
 800c05c:	9b00      	ldr	r3, [sp, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dd32      	ble.n	800c0c8 <_dtoa_r+0x3a0>
 800c062:	4ab7      	ldr	r2, [pc, #732]	; (800c340 <_dtoa_r+0x618>)
 800c064:	f003 030f 	and.w	r3, r3, #15
 800c068:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c06c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c070:	9b00      	ldr	r3, [sp, #0]
 800c072:	05d8      	lsls	r0, r3, #23
 800c074:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c078:	d516      	bpl.n	800c0a8 <_dtoa_r+0x380>
 800c07a:	4bb2      	ldr	r3, [pc, #712]	; (800c344 <_dtoa_r+0x61c>)
 800c07c:	ec51 0b19 	vmov	r0, r1, d9
 800c080:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c084:	f7f4 fbea 	bl	800085c <__aeabi_ddiv>
 800c088:	f007 070f 	and.w	r7, r7, #15
 800c08c:	4682      	mov	sl, r0
 800c08e:	468b      	mov	fp, r1
 800c090:	2503      	movs	r5, #3
 800c092:	4eac      	ldr	r6, [pc, #688]	; (800c344 <_dtoa_r+0x61c>)
 800c094:	b957      	cbnz	r7, 800c0ac <_dtoa_r+0x384>
 800c096:	4642      	mov	r2, r8
 800c098:	464b      	mov	r3, r9
 800c09a:	4650      	mov	r0, sl
 800c09c:	4659      	mov	r1, fp
 800c09e:	f7f4 fbdd 	bl	800085c <__aeabi_ddiv>
 800c0a2:	4682      	mov	sl, r0
 800c0a4:	468b      	mov	fp, r1
 800c0a6:	e028      	b.n	800c0fa <_dtoa_r+0x3d2>
 800c0a8:	2502      	movs	r5, #2
 800c0aa:	e7f2      	b.n	800c092 <_dtoa_r+0x36a>
 800c0ac:	07f9      	lsls	r1, r7, #31
 800c0ae:	d508      	bpl.n	800c0c2 <_dtoa_r+0x39a>
 800c0b0:	4640      	mov	r0, r8
 800c0b2:	4649      	mov	r1, r9
 800c0b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0b8:	f7f4 faa6 	bl	8000608 <__aeabi_dmul>
 800c0bc:	3501      	adds	r5, #1
 800c0be:	4680      	mov	r8, r0
 800c0c0:	4689      	mov	r9, r1
 800c0c2:	107f      	asrs	r7, r7, #1
 800c0c4:	3608      	adds	r6, #8
 800c0c6:	e7e5      	b.n	800c094 <_dtoa_r+0x36c>
 800c0c8:	f000 809b 	beq.w	800c202 <_dtoa_r+0x4da>
 800c0cc:	9b00      	ldr	r3, [sp, #0]
 800c0ce:	4f9d      	ldr	r7, [pc, #628]	; (800c344 <_dtoa_r+0x61c>)
 800c0d0:	425e      	negs	r6, r3
 800c0d2:	4b9b      	ldr	r3, [pc, #620]	; (800c340 <_dtoa_r+0x618>)
 800c0d4:	f006 020f 	and.w	r2, r6, #15
 800c0d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	ec51 0b19 	vmov	r0, r1, d9
 800c0e4:	f7f4 fa90 	bl	8000608 <__aeabi_dmul>
 800c0e8:	1136      	asrs	r6, r6, #4
 800c0ea:	4682      	mov	sl, r0
 800c0ec:	468b      	mov	fp, r1
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	2502      	movs	r5, #2
 800c0f2:	2e00      	cmp	r6, #0
 800c0f4:	d17a      	bne.n	800c1ec <_dtoa_r+0x4c4>
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1d3      	bne.n	800c0a2 <_dtoa_r+0x37a>
 800c0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f000 8082 	beq.w	800c206 <_dtoa_r+0x4de>
 800c102:	4b91      	ldr	r3, [pc, #580]	; (800c348 <_dtoa_r+0x620>)
 800c104:	2200      	movs	r2, #0
 800c106:	4650      	mov	r0, sl
 800c108:	4659      	mov	r1, fp
 800c10a:	f7f4 fcef 	bl	8000aec <__aeabi_dcmplt>
 800c10e:	2800      	cmp	r0, #0
 800c110:	d079      	beq.n	800c206 <_dtoa_r+0x4de>
 800c112:	9b03      	ldr	r3, [sp, #12]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d076      	beq.n	800c206 <_dtoa_r+0x4de>
 800c118:	9b02      	ldr	r3, [sp, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	dd36      	ble.n	800c18c <_dtoa_r+0x464>
 800c11e:	9b00      	ldr	r3, [sp, #0]
 800c120:	4650      	mov	r0, sl
 800c122:	4659      	mov	r1, fp
 800c124:	1e5f      	subs	r7, r3, #1
 800c126:	2200      	movs	r2, #0
 800c128:	4b88      	ldr	r3, [pc, #544]	; (800c34c <_dtoa_r+0x624>)
 800c12a:	f7f4 fa6d 	bl	8000608 <__aeabi_dmul>
 800c12e:	9e02      	ldr	r6, [sp, #8]
 800c130:	4682      	mov	sl, r0
 800c132:	468b      	mov	fp, r1
 800c134:	3501      	adds	r5, #1
 800c136:	4628      	mov	r0, r5
 800c138:	f7f4 f9fc 	bl	8000534 <__aeabi_i2d>
 800c13c:	4652      	mov	r2, sl
 800c13e:	465b      	mov	r3, fp
 800c140:	f7f4 fa62 	bl	8000608 <__aeabi_dmul>
 800c144:	4b82      	ldr	r3, [pc, #520]	; (800c350 <_dtoa_r+0x628>)
 800c146:	2200      	movs	r2, #0
 800c148:	f7f4 f8a8 	bl	800029c <__adddf3>
 800c14c:	46d0      	mov	r8, sl
 800c14e:	46d9      	mov	r9, fp
 800c150:	4682      	mov	sl, r0
 800c152:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c156:	2e00      	cmp	r6, #0
 800c158:	d158      	bne.n	800c20c <_dtoa_r+0x4e4>
 800c15a:	4b7e      	ldr	r3, [pc, #504]	; (800c354 <_dtoa_r+0x62c>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	4640      	mov	r0, r8
 800c160:	4649      	mov	r1, r9
 800c162:	f7f4 f899 	bl	8000298 <__aeabi_dsub>
 800c166:	4652      	mov	r2, sl
 800c168:	465b      	mov	r3, fp
 800c16a:	4680      	mov	r8, r0
 800c16c:	4689      	mov	r9, r1
 800c16e:	f7f4 fcdb 	bl	8000b28 <__aeabi_dcmpgt>
 800c172:	2800      	cmp	r0, #0
 800c174:	f040 8295 	bne.w	800c6a2 <_dtoa_r+0x97a>
 800c178:	4652      	mov	r2, sl
 800c17a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c17e:	4640      	mov	r0, r8
 800c180:	4649      	mov	r1, r9
 800c182:	f7f4 fcb3 	bl	8000aec <__aeabi_dcmplt>
 800c186:	2800      	cmp	r0, #0
 800c188:	f040 8289 	bne.w	800c69e <_dtoa_r+0x976>
 800c18c:	ec5b ab19 	vmov	sl, fp, d9
 800c190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c192:	2b00      	cmp	r3, #0
 800c194:	f2c0 8148 	blt.w	800c428 <_dtoa_r+0x700>
 800c198:	9a00      	ldr	r2, [sp, #0]
 800c19a:	2a0e      	cmp	r2, #14
 800c19c:	f300 8144 	bgt.w	800c428 <_dtoa_r+0x700>
 800c1a0:	4b67      	ldr	r3, [pc, #412]	; (800c340 <_dtoa_r+0x618>)
 800c1a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f280 80d5 	bge.w	800c35c <_dtoa_r+0x634>
 800c1b2:	9b03      	ldr	r3, [sp, #12]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f300 80d1 	bgt.w	800c35c <_dtoa_r+0x634>
 800c1ba:	f040 826f 	bne.w	800c69c <_dtoa_r+0x974>
 800c1be:	4b65      	ldr	r3, [pc, #404]	; (800c354 <_dtoa_r+0x62c>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	4649      	mov	r1, r9
 800c1c6:	f7f4 fa1f 	bl	8000608 <__aeabi_dmul>
 800c1ca:	4652      	mov	r2, sl
 800c1cc:	465b      	mov	r3, fp
 800c1ce:	f7f4 fca1 	bl	8000b14 <__aeabi_dcmpge>
 800c1d2:	9e03      	ldr	r6, [sp, #12]
 800c1d4:	4637      	mov	r7, r6
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	f040 8245 	bne.w	800c666 <_dtoa_r+0x93e>
 800c1dc:	9d01      	ldr	r5, [sp, #4]
 800c1de:	2331      	movs	r3, #49	; 0x31
 800c1e0:	f805 3b01 	strb.w	r3, [r5], #1
 800c1e4:	9b00      	ldr	r3, [sp, #0]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	e240      	b.n	800c66e <_dtoa_r+0x946>
 800c1ec:	07f2      	lsls	r2, r6, #31
 800c1ee:	d505      	bpl.n	800c1fc <_dtoa_r+0x4d4>
 800c1f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1f4:	f7f4 fa08 	bl	8000608 <__aeabi_dmul>
 800c1f8:	3501      	adds	r5, #1
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	1076      	asrs	r6, r6, #1
 800c1fe:	3708      	adds	r7, #8
 800c200:	e777      	b.n	800c0f2 <_dtoa_r+0x3ca>
 800c202:	2502      	movs	r5, #2
 800c204:	e779      	b.n	800c0fa <_dtoa_r+0x3d2>
 800c206:	9f00      	ldr	r7, [sp, #0]
 800c208:	9e03      	ldr	r6, [sp, #12]
 800c20a:	e794      	b.n	800c136 <_dtoa_r+0x40e>
 800c20c:	9901      	ldr	r1, [sp, #4]
 800c20e:	4b4c      	ldr	r3, [pc, #304]	; (800c340 <_dtoa_r+0x618>)
 800c210:	4431      	add	r1, r6
 800c212:	910d      	str	r1, [sp, #52]	; 0x34
 800c214:	9908      	ldr	r1, [sp, #32]
 800c216:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c21a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c21e:	2900      	cmp	r1, #0
 800c220:	d043      	beq.n	800c2aa <_dtoa_r+0x582>
 800c222:	494d      	ldr	r1, [pc, #308]	; (800c358 <_dtoa_r+0x630>)
 800c224:	2000      	movs	r0, #0
 800c226:	f7f4 fb19 	bl	800085c <__aeabi_ddiv>
 800c22a:	4652      	mov	r2, sl
 800c22c:	465b      	mov	r3, fp
 800c22e:	f7f4 f833 	bl	8000298 <__aeabi_dsub>
 800c232:	9d01      	ldr	r5, [sp, #4]
 800c234:	4682      	mov	sl, r0
 800c236:	468b      	mov	fp, r1
 800c238:	4649      	mov	r1, r9
 800c23a:	4640      	mov	r0, r8
 800c23c:	f7f4 fc94 	bl	8000b68 <__aeabi_d2iz>
 800c240:	4606      	mov	r6, r0
 800c242:	f7f4 f977 	bl	8000534 <__aeabi_i2d>
 800c246:	4602      	mov	r2, r0
 800c248:	460b      	mov	r3, r1
 800c24a:	4640      	mov	r0, r8
 800c24c:	4649      	mov	r1, r9
 800c24e:	f7f4 f823 	bl	8000298 <__aeabi_dsub>
 800c252:	3630      	adds	r6, #48	; 0x30
 800c254:	f805 6b01 	strb.w	r6, [r5], #1
 800c258:	4652      	mov	r2, sl
 800c25a:	465b      	mov	r3, fp
 800c25c:	4680      	mov	r8, r0
 800c25e:	4689      	mov	r9, r1
 800c260:	f7f4 fc44 	bl	8000aec <__aeabi_dcmplt>
 800c264:	2800      	cmp	r0, #0
 800c266:	d163      	bne.n	800c330 <_dtoa_r+0x608>
 800c268:	4642      	mov	r2, r8
 800c26a:	464b      	mov	r3, r9
 800c26c:	4936      	ldr	r1, [pc, #216]	; (800c348 <_dtoa_r+0x620>)
 800c26e:	2000      	movs	r0, #0
 800c270:	f7f4 f812 	bl	8000298 <__aeabi_dsub>
 800c274:	4652      	mov	r2, sl
 800c276:	465b      	mov	r3, fp
 800c278:	f7f4 fc38 	bl	8000aec <__aeabi_dcmplt>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	f040 80b5 	bne.w	800c3ec <_dtoa_r+0x6c4>
 800c282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c284:	429d      	cmp	r5, r3
 800c286:	d081      	beq.n	800c18c <_dtoa_r+0x464>
 800c288:	4b30      	ldr	r3, [pc, #192]	; (800c34c <_dtoa_r+0x624>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	4650      	mov	r0, sl
 800c28e:	4659      	mov	r1, fp
 800c290:	f7f4 f9ba 	bl	8000608 <__aeabi_dmul>
 800c294:	4b2d      	ldr	r3, [pc, #180]	; (800c34c <_dtoa_r+0x624>)
 800c296:	4682      	mov	sl, r0
 800c298:	468b      	mov	fp, r1
 800c29a:	4640      	mov	r0, r8
 800c29c:	4649      	mov	r1, r9
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f7f4 f9b2 	bl	8000608 <__aeabi_dmul>
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	4689      	mov	r9, r1
 800c2a8:	e7c6      	b.n	800c238 <_dtoa_r+0x510>
 800c2aa:	4650      	mov	r0, sl
 800c2ac:	4659      	mov	r1, fp
 800c2ae:	f7f4 f9ab 	bl	8000608 <__aeabi_dmul>
 800c2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2b4:	9d01      	ldr	r5, [sp, #4]
 800c2b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2b8:	4682      	mov	sl, r0
 800c2ba:	468b      	mov	fp, r1
 800c2bc:	4649      	mov	r1, r9
 800c2be:	4640      	mov	r0, r8
 800c2c0:	f7f4 fc52 	bl	8000b68 <__aeabi_d2iz>
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	f7f4 f935 	bl	8000534 <__aeabi_i2d>
 800c2ca:	3630      	adds	r6, #48	; 0x30
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4640      	mov	r0, r8
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	f7f3 ffe0 	bl	8000298 <__aeabi_dsub>
 800c2d8:	f805 6b01 	strb.w	r6, [r5], #1
 800c2dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2de:	429d      	cmp	r5, r3
 800c2e0:	4680      	mov	r8, r0
 800c2e2:	4689      	mov	r9, r1
 800c2e4:	f04f 0200 	mov.w	r2, #0
 800c2e8:	d124      	bne.n	800c334 <_dtoa_r+0x60c>
 800c2ea:	4b1b      	ldr	r3, [pc, #108]	; (800c358 <_dtoa_r+0x630>)
 800c2ec:	4650      	mov	r0, sl
 800c2ee:	4659      	mov	r1, fp
 800c2f0:	f7f3 ffd4 	bl	800029c <__adddf3>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4640      	mov	r0, r8
 800c2fa:	4649      	mov	r1, r9
 800c2fc:	f7f4 fc14 	bl	8000b28 <__aeabi_dcmpgt>
 800c300:	2800      	cmp	r0, #0
 800c302:	d173      	bne.n	800c3ec <_dtoa_r+0x6c4>
 800c304:	4652      	mov	r2, sl
 800c306:	465b      	mov	r3, fp
 800c308:	4913      	ldr	r1, [pc, #76]	; (800c358 <_dtoa_r+0x630>)
 800c30a:	2000      	movs	r0, #0
 800c30c:	f7f3 ffc4 	bl	8000298 <__aeabi_dsub>
 800c310:	4602      	mov	r2, r0
 800c312:	460b      	mov	r3, r1
 800c314:	4640      	mov	r0, r8
 800c316:	4649      	mov	r1, r9
 800c318:	f7f4 fbe8 	bl	8000aec <__aeabi_dcmplt>
 800c31c:	2800      	cmp	r0, #0
 800c31e:	f43f af35 	beq.w	800c18c <_dtoa_r+0x464>
 800c322:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c324:	1e6b      	subs	r3, r5, #1
 800c326:	930f      	str	r3, [sp, #60]	; 0x3c
 800c328:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c32c:	2b30      	cmp	r3, #48	; 0x30
 800c32e:	d0f8      	beq.n	800c322 <_dtoa_r+0x5fa>
 800c330:	9700      	str	r7, [sp, #0]
 800c332:	e049      	b.n	800c3c8 <_dtoa_r+0x6a0>
 800c334:	4b05      	ldr	r3, [pc, #20]	; (800c34c <_dtoa_r+0x624>)
 800c336:	f7f4 f967 	bl	8000608 <__aeabi_dmul>
 800c33a:	4680      	mov	r8, r0
 800c33c:	4689      	mov	r9, r1
 800c33e:	e7bd      	b.n	800c2bc <_dtoa_r+0x594>
 800c340:	08011640 	.word	0x08011640
 800c344:	08011618 	.word	0x08011618
 800c348:	3ff00000 	.word	0x3ff00000
 800c34c:	40240000 	.word	0x40240000
 800c350:	401c0000 	.word	0x401c0000
 800c354:	40140000 	.word	0x40140000
 800c358:	3fe00000 	.word	0x3fe00000
 800c35c:	9d01      	ldr	r5, [sp, #4]
 800c35e:	4656      	mov	r6, sl
 800c360:	465f      	mov	r7, fp
 800c362:	4642      	mov	r2, r8
 800c364:	464b      	mov	r3, r9
 800c366:	4630      	mov	r0, r6
 800c368:	4639      	mov	r1, r7
 800c36a:	f7f4 fa77 	bl	800085c <__aeabi_ddiv>
 800c36e:	f7f4 fbfb 	bl	8000b68 <__aeabi_d2iz>
 800c372:	4682      	mov	sl, r0
 800c374:	f7f4 f8de 	bl	8000534 <__aeabi_i2d>
 800c378:	4642      	mov	r2, r8
 800c37a:	464b      	mov	r3, r9
 800c37c:	f7f4 f944 	bl	8000608 <__aeabi_dmul>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	4630      	mov	r0, r6
 800c386:	4639      	mov	r1, r7
 800c388:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c38c:	f7f3 ff84 	bl	8000298 <__aeabi_dsub>
 800c390:	f805 6b01 	strb.w	r6, [r5], #1
 800c394:	9e01      	ldr	r6, [sp, #4]
 800c396:	9f03      	ldr	r7, [sp, #12]
 800c398:	1bae      	subs	r6, r5, r6
 800c39a:	42b7      	cmp	r7, r6
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	d135      	bne.n	800c40e <_dtoa_r+0x6e6>
 800c3a2:	f7f3 ff7b 	bl	800029c <__adddf3>
 800c3a6:	4642      	mov	r2, r8
 800c3a8:	464b      	mov	r3, r9
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	460f      	mov	r7, r1
 800c3ae:	f7f4 fbbb 	bl	8000b28 <__aeabi_dcmpgt>
 800c3b2:	b9d0      	cbnz	r0, 800c3ea <_dtoa_r+0x6c2>
 800c3b4:	4642      	mov	r2, r8
 800c3b6:	464b      	mov	r3, r9
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	f7f4 fb8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3c0:	b110      	cbz	r0, 800c3c8 <_dtoa_r+0x6a0>
 800c3c2:	f01a 0f01 	tst.w	sl, #1
 800c3c6:	d110      	bne.n	800c3ea <_dtoa_r+0x6c2>
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	ee18 1a10 	vmov	r1, s16
 800c3ce:	f000 fe67 	bl	800d0a0 <_Bfree>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9800      	ldr	r0, [sp, #0]
 800c3d6:	702b      	strb	r3, [r5, #0]
 800c3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3da:	3001      	adds	r0, #1
 800c3dc:	6018      	str	r0, [r3, #0]
 800c3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f43f acf1 	beq.w	800bdc8 <_dtoa_r+0xa0>
 800c3e6:	601d      	str	r5, [r3, #0]
 800c3e8:	e4ee      	b.n	800bdc8 <_dtoa_r+0xa0>
 800c3ea:	9f00      	ldr	r7, [sp, #0]
 800c3ec:	462b      	mov	r3, r5
 800c3ee:	461d      	mov	r5, r3
 800c3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3f4:	2a39      	cmp	r2, #57	; 0x39
 800c3f6:	d106      	bne.n	800c406 <_dtoa_r+0x6de>
 800c3f8:	9a01      	ldr	r2, [sp, #4]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d1f7      	bne.n	800c3ee <_dtoa_r+0x6c6>
 800c3fe:	9901      	ldr	r1, [sp, #4]
 800c400:	2230      	movs	r2, #48	; 0x30
 800c402:	3701      	adds	r7, #1
 800c404:	700a      	strb	r2, [r1, #0]
 800c406:	781a      	ldrb	r2, [r3, #0]
 800c408:	3201      	adds	r2, #1
 800c40a:	701a      	strb	r2, [r3, #0]
 800c40c:	e790      	b.n	800c330 <_dtoa_r+0x608>
 800c40e:	4ba6      	ldr	r3, [pc, #664]	; (800c6a8 <_dtoa_r+0x980>)
 800c410:	2200      	movs	r2, #0
 800c412:	f7f4 f8f9 	bl	8000608 <__aeabi_dmul>
 800c416:	2200      	movs	r2, #0
 800c418:	2300      	movs	r3, #0
 800c41a:	4606      	mov	r6, r0
 800c41c:	460f      	mov	r7, r1
 800c41e:	f7f4 fb5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c422:	2800      	cmp	r0, #0
 800c424:	d09d      	beq.n	800c362 <_dtoa_r+0x63a>
 800c426:	e7cf      	b.n	800c3c8 <_dtoa_r+0x6a0>
 800c428:	9a08      	ldr	r2, [sp, #32]
 800c42a:	2a00      	cmp	r2, #0
 800c42c:	f000 80d7 	beq.w	800c5de <_dtoa_r+0x8b6>
 800c430:	9a06      	ldr	r2, [sp, #24]
 800c432:	2a01      	cmp	r2, #1
 800c434:	f300 80ba 	bgt.w	800c5ac <_dtoa_r+0x884>
 800c438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c43a:	2a00      	cmp	r2, #0
 800c43c:	f000 80b2 	beq.w	800c5a4 <_dtoa_r+0x87c>
 800c440:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c444:	9e07      	ldr	r6, [sp, #28]
 800c446:	9d04      	ldr	r5, [sp, #16]
 800c448:	9a04      	ldr	r2, [sp, #16]
 800c44a:	441a      	add	r2, r3
 800c44c:	9204      	str	r2, [sp, #16]
 800c44e:	9a05      	ldr	r2, [sp, #20]
 800c450:	2101      	movs	r1, #1
 800c452:	441a      	add	r2, r3
 800c454:	4620      	mov	r0, r4
 800c456:	9205      	str	r2, [sp, #20]
 800c458:	f000 ff24 	bl	800d2a4 <__i2b>
 800c45c:	4607      	mov	r7, r0
 800c45e:	2d00      	cmp	r5, #0
 800c460:	dd0c      	ble.n	800c47c <_dtoa_r+0x754>
 800c462:	9b05      	ldr	r3, [sp, #20]
 800c464:	2b00      	cmp	r3, #0
 800c466:	dd09      	ble.n	800c47c <_dtoa_r+0x754>
 800c468:	42ab      	cmp	r3, r5
 800c46a:	9a04      	ldr	r2, [sp, #16]
 800c46c:	bfa8      	it	ge
 800c46e:	462b      	movge	r3, r5
 800c470:	1ad2      	subs	r2, r2, r3
 800c472:	9204      	str	r2, [sp, #16]
 800c474:	9a05      	ldr	r2, [sp, #20]
 800c476:	1aed      	subs	r5, r5, r3
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	9305      	str	r3, [sp, #20]
 800c47c:	9b07      	ldr	r3, [sp, #28]
 800c47e:	b31b      	cbz	r3, 800c4c8 <_dtoa_r+0x7a0>
 800c480:	9b08      	ldr	r3, [sp, #32]
 800c482:	2b00      	cmp	r3, #0
 800c484:	f000 80af 	beq.w	800c5e6 <_dtoa_r+0x8be>
 800c488:	2e00      	cmp	r6, #0
 800c48a:	dd13      	ble.n	800c4b4 <_dtoa_r+0x78c>
 800c48c:	4639      	mov	r1, r7
 800c48e:	4632      	mov	r2, r6
 800c490:	4620      	mov	r0, r4
 800c492:	f000 ffc7 	bl	800d424 <__pow5mult>
 800c496:	ee18 2a10 	vmov	r2, s16
 800c49a:	4601      	mov	r1, r0
 800c49c:	4607      	mov	r7, r0
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f000 ff16 	bl	800d2d0 <__multiply>
 800c4a4:	ee18 1a10 	vmov	r1, s16
 800c4a8:	4680      	mov	r8, r0
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 fdf8 	bl	800d0a0 <_Bfree>
 800c4b0:	ee08 8a10 	vmov	s16, r8
 800c4b4:	9b07      	ldr	r3, [sp, #28]
 800c4b6:	1b9a      	subs	r2, r3, r6
 800c4b8:	d006      	beq.n	800c4c8 <_dtoa_r+0x7a0>
 800c4ba:	ee18 1a10 	vmov	r1, s16
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f000 ffb0 	bl	800d424 <__pow5mult>
 800c4c4:	ee08 0a10 	vmov	s16, r0
 800c4c8:	2101      	movs	r1, #1
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 feea 	bl	800d2a4 <__i2b>
 800c4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	f340 8088 	ble.w	800c5ea <_dtoa_r+0x8c2>
 800c4da:	461a      	mov	r2, r3
 800c4dc:	4601      	mov	r1, r0
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 ffa0 	bl	800d424 <__pow5mult>
 800c4e4:	9b06      	ldr	r3, [sp, #24]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	f340 8081 	ble.w	800c5f0 <_dtoa_r+0x8c8>
 800c4ee:	f04f 0800 	mov.w	r8, #0
 800c4f2:	6933      	ldr	r3, [r6, #16]
 800c4f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c4f8:	6918      	ldr	r0, [r3, #16]
 800c4fa:	f000 fe83 	bl	800d204 <__hi0bits>
 800c4fe:	f1c0 0020 	rsb	r0, r0, #32
 800c502:	9b05      	ldr	r3, [sp, #20]
 800c504:	4418      	add	r0, r3
 800c506:	f010 001f 	ands.w	r0, r0, #31
 800c50a:	f000 8092 	beq.w	800c632 <_dtoa_r+0x90a>
 800c50e:	f1c0 0320 	rsb	r3, r0, #32
 800c512:	2b04      	cmp	r3, #4
 800c514:	f340 808a 	ble.w	800c62c <_dtoa_r+0x904>
 800c518:	f1c0 001c 	rsb	r0, r0, #28
 800c51c:	9b04      	ldr	r3, [sp, #16]
 800c51e:	4403      	add	r3, r0
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	9b05      	ldr	r3, [sp, #20]
 800c524:	4403      	add	r3, r0
 800c526:	4405      	add	r5, r0
 800c528:	9305      	str	r3, [sp, #20]
 800c52a:	9b04      	ldr	r3, [sp, #16]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	dd07      	ble.n	800c540 <_dtoa_r+0x818>
 800c530:	ee18 1a10 	vmov	r1, s16
 800c534:	461a      	mov	r2, r3
 800c536:	4620      	mov	r0, r4
 800c538:	f000 ffce 	bl	800d4d8 <__lshift>
 800c53c:	ee08 0a10 	vmov	s16, r0
 800c540:	9b05      	ldr	r3, [sp, #20]
 800c542:	2b00      	cmp	r3, #0
 800c544:	dd05      	ble.n	800c552 <_dtoa_r+0x82a>
 800c546:	4631      	mov	r1, r6
 800c548:	461a      	mov	r2, r3
 800c54a:	4620      	mov	r0, r4
 800c54c:	f000 ffc4 	bl	800d4d8 <__lshift>
 800c550:	4606      	mov	r6, r0
 800c552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c554:	2b00      	cmp	r3, #0
 800c556:	d06e      	beq.n	800c636 <_dtoa_r+0x90e>
 800c558:	ee18 0a10 	vmov	r0, s16
 800c55c:	4631      	mov	r1, r6
 800c55e:	f001 f82b 	bl	800d5b8 <__mcmp>
 800c562:	2800      	cmp	r0, #0
 800c564:	da67      	bge.n	800c636 <_dtoa_r+0x90e>
 800c566:	9b00      	ldr	r3, [sp, #0]
 800c568:	3b01      	subs	r3, #1
 800c56a:	ee18 1a10 	vmov	r1, s16
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	220a      	movs	r2, #10
 800c572:	2300      	movs	r3, #0
 800c574:	4620      	mov	r0, r4
 800c576:	f000 fdb5 	bl	800d0e4 <__multadd>
 800c57a:	9b08      	ldr	r3, [sp, #32]
 800c57c:	ee08 0a10 	vmov	s16, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 81b1 	beq.w	800c8e8 <_dtoa_r+0xbc0>
 800c586:	2300      	movs	r3, #0
 800c588:	4639      	mov	r1, r7
 800c58a:	220a      	movs	r2, #10
 800c58c:	4620      	mov	r0, r4
 800c58e:	f000 fda9 	bl	800d0e4 <__multadd>
 800c592:	9b02      	ldr	r3, [sp, #8]
 800c594:	2b00      	cmp	r3, #0
 800c596:	4607      	mov	r7, r0
 800c598:	f300 808e 	bgt.w	800c6b8 <_dtoa_r+0x990>
 800c59c:	9b06      	ldr	r3, [sp, #24]
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	dc51      	bgt.n	800c646 <_dtoa_r+0x91e>
 800c5a2:	e089      	b.n	800c6b8 <_dtoa_r+0x990>
 800c5a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c5aa:	e74b      	b.n	800c444 <_dtoa_r+0x71c>
 800c5ac:	9b03      	ldr	r3, [sp, #12]
 800c5ae:	1e5e      	subs	r6, r3, #1
 800c5b0:	9b07      	ldr	r3, [sp, #28]
 800c5b2:	42b3      	cmp	r3, r6
 800c5b4:	bfbf      	itttt	lt
 800c5b6:	9b07      	ldrlt	r3, [sp, #28]
 800c5b8:	9607      	strlt	r6, [sp, #28]
 800c5ba:	1af2      	sublt	r2, r6, r3
 800c5bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c5be:	bfb6      	itet	lt
 800c5c0:	189b      	addlt	r3, r3, r2
 800c5c2:	1b9e      	subge	r6, r3, r6
 800c5c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c5c6:	9b03      	ldr	r3, [sp, #12]
 800c5c8:	bfb8      	it	lt
 800c5ca:	2600      	movlt	r6, #0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	bfb7      	itett	lt
 800c5d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c5d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c5d8:	1a9d      	sublt	r5, r3, r2
 800c5da:	2300      	movlt	r3, #0
 800c5dc:	e734      	b.n	800c448 <_dtoa_r+0x720>
 800c5de:	9e07      	ldr	r6, [sp, #28]
 800c5e0:	9d04      	ldr	r5, [sp, #16]
 800c5e2:	9f08      	ldr	r7, [sp, #32]
 800c5e4:	e73b      	b.n	800c45e <_dtoa_r+0x736>
 800c5e6:	9a07      	ldr	r2, [sp, #28]
 800c5e8:	e767      	b.n	800c4ba <_dtoa_r+0x792>
 800c5ea:	9b06      	ldr	r3, [sp, #24]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	dc18      	bgt.n	800c622 <_dtoa_r+0x8fa>
 800c5f0:	f1ba 0f00 	cmp.w	sl, #0
 800c5f4:	d115      	bne.n	800c622 <_dtoa_r+0x8fa>
 800c5f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5fa:	b993      	cbnz	r3, 800c622 <_dtoa_r+0x8fa>
 800c5fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c600:	0d1b      	lsrs	r3, r3, #20
 800c602:	051b      	lsls	r3, r3, #20
 800c604:	b183      	cbz	r3, 800c628 <_dtoa_r+0x900>
 800c606:	9b04      	ldr	r3, [sp, #16]
 800c608:	3301      	adds	r3, #1
 800c60a:	9304      	str	r3, [sp, #16]
 800c60c:	9b05      	ldr	r3, [sp, #20]
 800c60e:	3301      	adds	r3, #1
 800c610:	9305      	str	r3, [sp, #20]
 800c612:	f04f 0801 	mov.w	r8, #1
 800c616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f47f af6a 	bne.w	800c4f2 <_dtoa_r+0x7ca>
 800c61e:	2001      	movs	r0, #1
 800c620:	e76f      	b.n	800c502 <_dtoa_r+0x7da>
 800c622:	f04f 0800 	mov.w	r8, #0
 800c626:	e7f6      	b.n	800c616 <_dtoa_r+0x8ee>
 800c628:	4698      	mov	r8, r3
 800c62a:	e7f4      	b.n	800c616 <_dtoa_r+0x8ee>
 800c62c:	f43f af7d 	beq.w	800c52a <_dtoa_r+0x802>
 800c630:	4618      	mov	r0, r3
 800c632:	301c      	adds	r0, #28
 800c634:	e772      	b.n	800c51c <_dtoa_r+0x7f4>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	dc37      	bgt.n	800c6ac <_dtoa_r+0x984>
 800c63c:	9b06      	ldr	r3, [sp, #24]
 800c63e:	2b02      	cmp	r3, #2
 800c640:	dd34      	ble.n	800c6ac <_dtoa_r+0x984>
 800c642:	9b03      	ldr	r3, [sp, #12]
 800c644:	9302      	str	r3, [sp, #8]
 800c646:	9b02      	ldr	r3, [sp, #8]
 800c648:	b96b      	cbnz	r3, 800c666 <_dtoa_r+0x93e>
 800c64a:	4631      	mov	r1, r6
 800c64c:	2205      	movs	r2, #5
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 fd48 	bl	800d0e4 <__multadd>
 800c654:	4601      	mov	r1, r0
 800c656:	4606      	mov	r6, r0
 800c658:	ee18 0a10 	vmov	r0, s16
 800c65c:	f000 ffac 	bl	800d5b8 <__mcmp>
 800c660:	2800      	cmp	r0, #0
 800c662:	f73f adbb 	bgt.w	800c1dc <_dtoa_r+0x4b4>
 800c666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c668:	9d01      	ldr	r5, [sp, #4]
 800c66a:	43db      	mvns	r3, r3
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	f04f 0800 	mov.w	r8, #0
 800c672:	4631      	mov	r1, r6
 800c674:	4620      	mov	r0, r4
 800c676:	f000 fd13 	bl	800d0a0 <_Bfree>
 800c67a:	2f00      	cmp	r7, #0
 800c67c:	f43f aea4 	beq.w	800c3c8 <_dtoa_r+0x6a0>
 800c680:	f1b8 0f00 	cmp.w	r8, #0
 800c684:	d005      	beq.n	800c692 <_dtoa_r+0x96a>
 800c686:	45b8      	cmp	r8, r7
 800c688:	d003      	beq.n	800c692 <_dtoa_r+0x96a>
 800c68a:	4641      	mov	r1, r8
 800c68c:	4620      	mov	r0, r4
 800c68e:	f000 fd07 	bl	800d0a0 <_Bfree>
 800c692:	4639      	mov	r1, r7
 800c694:	4620      	mov	r0, r4
 800c696:	f000 fd03 	bl	800d0a0 <_Bfree>
 800c69a:	e695      	b.n	800c3c8 <_dtoa_r+0x6a0>
 800c69c:	2600      	movs	r6, #0
 800c69e:	4637      	mov	r7, r6
 800c6a0:	e7e1      	b.n	800c666 <_dtoa_r+0x93e>
 800c6a2:	9700      	str	r7, [sp, #0]
 800c6a4:	4637      	mov	r7, r6
 800c6a6:	e599      	b.n	800c1dc <_dtoa_r+0x4b4>
 800c6a8:	40240000 	.word	0x40240000
 800c6ac:	9b08      	ldr	r3, [sp, #32]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 80ca 	beq.w	800c848 <_dtoa_r+0xb20>
 800c6b4:	9b03      	ldr	r3, [sp, #12]
 800c6b6:	9302      	str	r3, [sp, #8]
 800c6b8:	2d00      	cmp	r5, #0
 800c6ba:	dd05      	ble.n	800c6c8 <_dtoa_r+0x9a0>
 800c6bc:	4639      	mov	r1, r7
 800c6be:	462a      	mov	r2, r5
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f000 ff09 	bl	800d4d8 <__lshift>
 800c6c6:	4607      	mov	r7, r0
 800c6c8:	f1b8 0f00 	cmp.w	r8, #0
 800c6cc:	d05b      	beq.n	800c786 <_dtoa_r+0xa5e>
 800c6ce:	6879      	ldr	r1, [r7, #4]
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 fca5 	bl	800d020 <_Balloc>
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	b928      	cbnz	r0, 800c6e6 <_dtoa_r+0x9be>
 800c6da:	4b87      	ldr	r3, [pc, #540]	; (800c8f8 <_dtoa_r+0xbd0>)
 800c6dc:	4602      	mov	r2, r0
 800c6de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c6e2:	f7ff bb3b 	b.w	800bd5c <_dtoa_r+0x34>
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	3202      	adds	r2, #2
 800c6ea:	0092      	lsls	r2, r2, #2
 800c6ec:	f107 010c 	add.w	r1, r7, #12
 800c6f0:	300c      	adds	r0, #12
 800c6f2:	f7fd fd2b 	bl	800a14c <memcpy>
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 feec 	bl	800d4d8 <__lshift>
 800c700:	9b01      	ldr	r3, [sp, #4]
 800c702:	f103 0901 	add.w	r9, r3, #1
 800c706:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c70a:	4413      	add	r3, r2
 800c70c:	9305      	str	r3, [sp, #20]
 800c70e:	f00a 0301 	and.w	r3, sl, #1
 800c712:	46b8      	mov	r8, r7
 800c714:	9304      	str	r3, [sp, #16]
 800c716:	4607      	mov	r7, r0
 800c718:	4631      	mov	r1, r6
 800c71a:	ee18 0a10 	vmov	r0, s16
 800c71e:	f7ff fa77 	bl	800bc10 <quorem>
 800c722:	4641      	mov	r1, r8
 800c724:	9002      	str	r0, [sp, #8]
 800c726:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c72a:	ee18 0a10 	vmov	r0, s16
 800c72e:	f000 ff43 	bl	800d5b8 <__mcmp>
 800c732:	463a      	mov	r2, r7
 800c734:	9003      	str	r0, [sp, #12]
 800c736:	4631      	mov	r1, r6
 800c738:	4620      	mov	r0, r4
 800c73a:	f000 ff59 	bl	800d5f0 <__mdiff>
 800c73e:	68c2      	ldr	r2, [r0, #12]
 800c740:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c744:	4605      	mov	r5, r0
 800c746:	bb02      	cbnz	r2, 800c78a <_dtoa_r+0xa62>
 800c748:	4601      	mov	r1, r0
 800c74a:	ee18 0a10 	vmov	r0, s16
 800c74e:	f000 ff33 	bl	800d5b8 <__mcmp>
 800c752:	4602      	mov	r2, r0
 800c754:	4629      	mov	r1, r5
 800c756:	4620      	mov	r0, r4
 800c758:	9207      	str	r2, [sp, #28]
 800c75a:	f000 fca1 	bl	800d0a0 <_Bfree>
 800c75e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c762:	ea43 0102 	orr.w	r1, r3, r2
 800c766:	9b04      	ldr	r3, [sp, #16]
 800c768:	430b      	orrs	r3, r1
 800c76a:	464d      	mov	r5, r9
 800c76c:	d10f      	bne.n	800c78e <_dtoa_r+0xa66>
 800c76e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c772:	d02a      	beq.n	800c7ca <_dtoa_r+0xaa2>
 800c774:	9b03      	ldr	r3, [sp, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	dd02      	ble.n	800c780 <_dtoa_r+0xa58>
 800c77a:	9b02      	ldr	r3, [sp, #8]
 800c77c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c780:	f88b a000 	strb.w	sl, [fp]
 800c784:	e775      	b.n	800c672 <_dtoa_r+0x94a>
 800c786:	4638      	mov	r0, r7
 800c788:	e7ba      	b.n	800c700 <_dtoa_r+0x9d8>
 800c78a:	2201      	movs	r2, #1
 800c78c:	e7e2      	b.n	800c754 <_dtoa_r+0xa2c>
 800c78e:	9b03      	ldr	r3, [sp, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	db04      	blt.n	800c79e <_dtoa_r+0xa76>
 800c794:	9906      	ldr	r1, [sp, #24]
 800c796:	430b      	orrs	r3, r1
 800c798:	9904      	ldr	r1, [sp, #16]
 800c79a:	430b      	orrs	r3, r1
 800c79c:	d122      	bne.n	800c7e4 <_dtoa_r+0xabc>
 800c79e:	2a00      	cmp	r2, #0
 800c7a0:	ddee      	ble.n	800c780 <_dtoa_r+0xa58>
 800c7a2:	ee18 1a10 	vmov	r1, s16
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f000 fe95 	bl	800d4d8 <__lshift>
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	ee08 0a10 	vmov	s16, r0
 800c7b4:	f000 ff00 	bl	800d5b8 <__mcmp>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	dc03      	bgt.n	800c7c4 <_dtoa_r+0xa9c>
 800c7bc:	d1e0      	bne.n	800c780 <_dtoa_r+0xa58>
 800c7be:	f01a 0f01 	tst.w	sl, #1
 800c7c2:	d0dd      	beq.n	800c780 <_dtoa_r+0xa58>
 800c7c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7c8:	d1d7      	bne.n	800c77a <_dtoa_r+0xa52>
 800c7ca:	2339      	movs	r3, #57	; 0x39
 800c7cc:	f88b 3000 	strb.w	r3, [fp]
 800c7d0:	462b      	mov	r3, r5
 800c7d2:	461d      	mov	r5, r3
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c7da:	2a39      	cmp	r2, #57	; 0x39
 800c7dc:	d071      	beq.n	800c8c2 <_dtoa_r+0xb9a>
 800c7de:	3201      	adds	r2, #1
 800c7e0:	701a      	strb	r2, [r3, #0]
 800c7e2:	e746      	b.n	800c672 <_dtoa_r+0x94a>
 800c7e4:	2a00      	cmp	r2, #0
 800c7e6:	dd07      	ble.n	800c7f8 <_dtoa_r+0xad0>
 800c7e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7ec:	d0ed      	beq.n	800c7ca <_dtoa_r+0xaa2>
 800c7ee:	f10a 0301 	add.w	r3, sl, #1
 800c7f2:	f88b 3000 	strb.w	r3, [fp]
 800c7f6:	e73c      	b.n	800c672 <_dtoa_r+0x94a>
 800c7f8:	9b05      	ldr	r3, [sp, #20]
 800c7fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c7fe:	4599      	cmp	r9, r3
 800c800:	d047      	beq.n	800c892 <_dtoa_r+0xb6a>
 800c802:	ee18 1a10 	vmov	r1, s16
 800c806:	2300      	movs	r3, #0
 800c808:	220a      	movs	r2, #10
 800c80a:	4620      	mov	r0, r4
 800c80c:	f000 fc6a 	bl	800d0e4 <__multadd>
 800c810:	45b8      	cmp	r8, r7
 800c812:	ee08 0a10 	vmov	s16, r0
 800c816:	f04f 0300 	mov.w	r3, #0
 800c81a:	f04f 020a 	mov.w	r2, #10
 800c81e:	4641      	mov	r1, r8
 800c820:	4620      	mov	r0, r4
 800c822:	d106      	bne.n	800c832 <_dtoa_r+0xb0a>
 800c824:	f000 fc5e 	bl	800d0e4 <__multadd>
 800c828:	4680      	mov	r8, r0
 800c82a:	4607      	mov	r7, r0
 800c82c:	f109 0901 	add.w	r9, r9, #1
 800c830:	e772      	b.n	800c718 <_dtoa_r+0x9f0>
 800c832:	f000 fc57 	bl	800d0e4 <__multadd>
 800c836:	4639      	mov	r1, r7
 800c838:	4680      	mov	r8, r0
 800c83a:	2300      	movs	r3, #0
 800c83c:	220a      	movs	r2, #10
 800c83e:	4620      	mov	r0, r4
 800c840:	f000 fc50 	bl	800d0e4 <__multadd>
 800c844:	4607      	mov	r7, r0
 800c846:	e7f1      	b.n	800c82c <_dtoa_r+0xb04>
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	9302      	str	r3, [sp, #8]
 800c84c:	9d01      	ldr	r5, [sp, #4]
 800c84e:	ee18 0a10 	vmov	r0, s16
 800c852:	4631      	mov	r1, r6
 800c854:	f7ff f9dc 	bl	800bc10 <quorem>
 800c858:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c85c:	9b01      	ldr	r3, [sp, #4]
 800c85e:	f805 ab01 	strb.w	sl, [r5], #1
 800c862:	1aea      	subs	r2, r5, r3
 800c864:	9b02      	ldr	r3, [sp, #8]
 800c866:	4293      	cmp	r3, r2
 800c868:	dd09      	ble.n	800c87e <_dtoa_r+0xb56>
 800c86a:	ee18 1a10 	vmov	r1, s16
 800c86e:	2300      	movs	r3, #0
 800c870:	220a      	movs	r2, #10
 800c872:	4620      	mov	r0, r4
 800c874:	f000 fc36 	bl	800d0e4 <__multadd>
 800c878:	ee08 0a10 	vmov	s16, r0
 800c87c:	e7e7      	b.n	800c84e <_dtoa_r+0xb26>
 800c87e:	9b02      	ldr	r3, [sp, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	bfc8      	it	gt
 800c884:	461d      	movgt	r5, r3
 800c886:	9b01      	ldr	r3, [sp, #4]
 800c888:	bfd8      	it	le
 800c88a:	2501      	movle	r5, #1
 800c88c:	441d      	add	r5, r3
 800c88e:	f04f 0800 	mov.w	r8, #0
 800c892:	ee18 1a10 	vmov	r1, s16
 800c896:	2201      	movs	r2, #1
 800c898:	4620      	mov	r0, r4
 800c89a:	f000 fe1d 	bl	800d4d8 <__lshift>
 800c89e:	4631      	mov	r1, r6
 800c8a0:	ee08 0a10 	vmov	s16, r0
 800c8a4:	f000 fe88 	bl	800d5b8 <__mcmp>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	dc91      	bgt.n	800c7d0 <_dtoa_r+0xaa8>
 800c8ac:	d102      	bne.n	800c8b4 <_dtoa_r+0xb8c>
 800c8ae:	f01a 0f01 	tst.w	sl, #1
 800c8b2:	d18d      	bne.n	800c7d0 <_dtoa_r+0xaa8>
 800c8b4:	462b      	mov	r3, r5
 800c8b6:	461d      	mov	r5, r3
 800c8b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8bc:	2a30      	cmp	r2, #48	; 0x30
 800c8be:	d0fa      	beq.n	800c8b6 <_dtoa_r+0xb8e>
 800c8c0:	e6d7      	b.n	800c672 <_dtoa_r+0x94a>
 800c8c2:	9a01      	ldr	r2, [sp, #4]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d184      	bne.n	800c7d2 <_dtoa_r+0xaaa>
 800c8c8:	9b00      	ldr	r3, [sp, #0]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	2331      	movs	r3, #49	; 0x31
 800c8d0:	7013      	strb	r3, [r2, #0]
 800c8d2:	e6ce      	b.n	800c672 <_dtoa_r+0x94a>
 800c8d4:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <_dtoa_r+0xbd4>)
 800c8d6:	f7ff ba95 	b.w	800be04 <_dtoa_r+0xdc>
 800c8da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f47f aa6e 	bne.w	800bdbe <_dtoa_r+0x96>
 800c8e2:	4b07      	ldr	r3, [pc, #28]	; (800c900 <_dtoa_r+0xbd8>)
 800c8e4:	f7ff ba8e 	b.w	800be04 <_dtoa_r+0xdc>
 800c8e8:	9b02      	ldr	r3, [sp, #8]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	dcae      	bgt.n	800c84c <_dtoa_r+0xb24>
 800c8ee:	9b06      	ldr	r3, [sp, #24]
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	f73f aea8 	bgt.w	800c646 <_dtoa_r+0x91e>
 800c8f6:	e7a9      	b.n	800c84c <_dtoa_r+0xb24>
 800c8f8:	08011530 	.word	0x08011530
 800c8fc:	08011330 	.word	0x08011330
 800c900:	080114b1 	.word	0x080114b1

0800c904 <rshift>:
 800c904:	6903      	ldr	r3, [r0, #16]
 800c906:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c90a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c90e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c912:	f100 0414 	add.w	r4, r0, #20
 800c916:	dd45      	ble.n	800c9a4 <rshift+0xa0>
 800c918:	f011 011f 	ands.w	r1, r1, #31
 800c91c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c920:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c924:	d10c      	bne.n	800c940 <rshift+0x3c>
 800c926:	f100 0710 	add.w	r7, r0, #16
 800c92a:	4629      	mov	r1, r5
 800c92c:	42b1      	cmp	r1, r6
 800c92e:	d334      	bcc.n	800c99a <rshift+0x96>
 800c930:	1a9b      	subs	r3, r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	1eea      	subs	r2, r5, #3
 800c936:	4296      	cmp	r6, r2
 800c938:	bf38      	it	cc
 800c93a:	2300      	movcc	r3, #0
 800c93c:	4423      	add	r3, r4
 800c93e:	e015      	b.n	800c96c <rshift+0x68>
 800c940:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c944:	f1c1 0820 	rsb	r8, r1, #32
 800c948:	40cf      	lsrs	r7, r1
 800c94a:	f105 0e04 	add.w	lr, r5, #4
 800c94e:	46a1      	mov	r9, r4
 800c950:	4576      	cmp	r6, lr
 800c952:	46f4      	mov	ip, lr
 800c954:	d815      	bhi.n	800c982 <rshift+0x7e>
 800c956:	1a9a      	subs	r2, r3, r2
 800c958:	0092      	lsls	r2, r2, #2
 800c95a:	3a04      	subs	r2, #4
 800c95c:	3501      	adds	r5, #1
 800c95e:	42ae      	cmp	r6, r5
 800c960:	bf38      	it	cc
 800c962:	2200      	movcc	r2, #0
 800c964:	18a3      	adds	r3, r4, r2
 800c966:	50a7      	str	r7, [r4, r2]
 800c968:	b107      	cbz	r7, 800c96c <rshift+0x68>
 800c96a:	3304      	adds	r3, #4
 800c96c:	1b1a      	subs	r2, r3, r4
 800c96e:	42a3      	cmp	r3, r4
 800c970:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c974:	bf08      	it	eq
 800c976:	2300      	moveq	r3, #0
 800c978:	6102      	str	r2, [r0, #16]
 800c97a:	bf08      	it	eq
 800c97c:	6143      	streq	r3, [r0, #20]
 800c97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c982:	f8dc c000 	ldr.w	ip, [ip]
 800c986:	fa0c fc08 	lsl.w	ip, ip, r8
 800c98a:	ea4c 0707 	orr.w	r7, ip, r7
 800c98e:	f849 7b04 	str.w	r7, [r9], #4
 800c992:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c996:	40cf      	lsrs	r7, r1
 800c998:	e7da      	b.n	800c950 <rshift+0x4c>
 800c99a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c99e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c9a2:	e7c3      	b.n	800c92c <rshift+0x28>
 800c9a4:	4623      	mov	r3, r4
 800c9a6:	e7e1      	b.n	800c96c <rshift+0x68>

0800c9a8 <__hexdig_fun>:
 800c9a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c9ac:	2b09      	cmp	r3, #9
 800c9ae:	d802      	bhi.n	800c9b6 <__hexdig_fun+0xe>
 800c9b0:	3820      	subs	r0, #32
 800c9b2:	b2c0      	uxtb	r0, r0
 800c9b4:	4770      	bx	lr
 800c9b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c9ba:	2b05      	cmp	r3, #5
 800c9bc:	d801      	bhi.n	800c9c2 <__hexdig_fun+0x1a>
 800c9be:	3847      	subs	r0, #71	; 0x47
 800c9c0:	e7f7      	b.n	800c9b2 <__hexdig_fun+0xa>
 800c9c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c9c6:	2b05      	cmp	r3, #5
 800c9c8:	d801      	bhi.n	800c9ce <__hexdig_fun+0x26>
 800c9ca:	3827      	subs	r0, #39	; 0x27
 800c9cc:	e7f1      	b.n	800c9b2 <__hexdig_fun+0xa>
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	4770      	bx	lr
	...

0800c9d4 <__gethex>:
 800c9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d8:	ed2d 8b02 	vpush	{d8}
 800c9dc:	b089      	sub	sp, #36	; 0x24
 800c9de:	ee08 0a10 	vmov	s16, r0
 800c9e2:	9304      	str	r3, [sp, #16]
 800c9e4:	4bb4      	ldr	r3, [pc, #720]	; (800ccb8 <__gethex+0x2e4>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	9301      	str	r3, [sp, #4]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	468b      	mov	fp, r1
 800c9ee:	4690      	mov	r8, r2
 800c9f0:	f7f3 fbf6 	bl	80001e0 <strlen>
 800c9f4:	9b01      	ldr	r3, [sp, #4]
 800c9f6:	f8db 2000 	ldr.w	r2, [fp]
 800c9fa:	4403      	add	r3, r0
 800c9fc:	4682      	mov	sl, r0
 800c9fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ca02:	9305      	str	r3, [sp, #20]
 800ca04:	1c93      	adds	r3, r2, #2
 800ca06:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ca0a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ca0e:	32fe      	adds	r2, #254	; 0xfe
 800ca10:	18d1      	adds	r1, r2, r3
 800ca12:	461f      	mov	r7, r3
 800ca14:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca18:	9100      	str	r1, [sp, #0]
 800ca1a:	2830      	cmp	r0, #48	; 0x30
 800ca1c:	d0f8      	beq.n	800ca10 <__gethex+0x3c>
 800ca1e:	f7ff ffc3 	bl	800c9a8 <__hexdig_fun>
 800ca22:	4604      	mov	r4, r0
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d13a      	bne.n	800ca9e <__gethex+0xca>
 800ca28:	9901      	ldr	r1, [sp, #4]
 800ca2a:	4652      	mov	r2, sl
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f001 fa23 	bl	800de78 <strncmp>
 800ca32:	4605      	mov	r5, r0
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d168      	bne.n	800cb0a <__gethex+0x136>
 800ca38:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ca3c:	eb07 060a 	add.w	r6, r7, sl
 800ca40:	f7ff ffb2 	bl	800c9a8 <__hexdig_fun>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d062      	beq.n	800cb0e <__gethex+0x13a>
 800ca48:	4633      	mov	r3, r6
 800ca4a:	7818      	ldrb	r0, [r3, #0]
 800ca4c:	2830      	cmp	r0, #48	; 0x30
 800ca4e:	461f      	mov	r7, r3
 800ca50:	f103 0301 	add.w	r3, r3, #1
 800ca54:	d0f9      	beq.n	800ca4a <__gethex+0x76>
 800ca56:	f7ff ffa7 	bl	800c9a8 <__hexdig_fun>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	fab0 f480 	clz	r4, r0
 800ca60:	0964      	lsrs	r4, r4, #5
 800ca62:	4635      	mov	r5, r6
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	463a      	mov	r2, r7
 800ca68:	4616      	mov	r6, r2
 800ca6a:	3201      	adds	r2, #1
 800ca6c:	7830      	ldrb	r0, [r6, #0]
 800ca6e:	f7ff ff9b 	bl	800c9a8 <__hexdig_fun>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d1f8      	bne.n	800ca68 <__gethex+0x94>
 800ca76:	9901      	ldr	r1, [sp, #4]
 800ca78:	4652      	mov	r2, sl
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f001 f9fc 	bl	800de78 <strncmp>
 800ca80:	b980      	cbnz	r0, 800caa4 <__gethex+0xd0>
 800ca82:	b94d      	cbnz	r5, 800ca98 <__gethex+0xc4>
 800ca84:	eb06 050a 	add.w	r5, r6, sl
 800ca88:	462a      	mov	r2, r5
 800ca8a:	4616      	mov	r6, r2
 800ca8c:	3201      	adds	r2, #1
 800ca8e:	7830      	ldrb	r0, [r6, #0]
 800ca90:	f7ff ff8a 	bl	800c9a8 <__hexdig_fun>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d1f8      	bne.n	800ca8a <__gethex+0xb6>
 800ca98:	1bad      	subs	r5, r5, r6
 800ca9a:	00ad      	lsls	r5, r5, #2
 800ca9c:	e004      	b.n	800caa8 <__gethex+0xd4>
 800ca9e:	2400      	movs	r4, #0
 800caa0:	4625      	mov	r5, r4
 800caa2:	e7e0      	b.n	800ca66 <__gethex+0x92>
 800caa4:	2d00      	cmp	r5, #0
 800caa6:	d1f7      	bne.n	800ca98 <__gethex+0xc4>
 800caa8:	7833      	ldrb	r3, [r6, #0]
 800caaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800caae:	2b50      	cmp	r3, #80	; 0x50
 800cab0:	d13b      	bne.n	800cb2a <__gethex+0x156>
 800cab2:	7873      	ldrb	r3, [r6, #1]
 800cab4:	2b2b      	cmp	r3, #43	; 0x2b
 800cab6:	d02c      	beq.n	800cb12 <__gethex+0x13e>
 800cab8:	2b2d      	cmp	r3, #45	; 0x2d
 800caba:	d02e      	beq.n	800cb1a <__gethex+0x146>
 800cabc:	1c71      	adds	r1, r6, #1
 800cabe:	f04f 0900 	mov.w	r9, #0
 800cac2:	7808      	ldrb	r0, [r1, #0]
 800cac4:	f7ff ff70 	bl	800c9a8 <__hexdig_fun>
 800cac8:	1e43      	subs	r3, r0, #1
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	2b18      	cmp	r3, #24
 800cace:	d82c      	bhi.n	800cb2a <__gethex+0x156>
 800cad0:	f1a0 0210 	sub.w	r2, r0, #16
 800cad4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cad8:	f7ff ff66 	bl	800c9a8 <__hexdig_fun>
 800cadc:	1e43      	subs	r3, r0, #1
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	2b18      	cmp	r3, #24
 800cae2:	d91d      	bls.n	800cb20 <__gethex+0x14c>
 800cae4:	f1b9 0f00 	cmp.w	r9, #0
 800cae8:	d000      	beq.n	800caec <__gethex+0x118>
 800caea:	4252      	negs	r2, r2
 800caec:	4415      	add	r5, r2
 800caee:	f8cb 1000 	str.w	r1, [fp]
 800caf2:	b1e4      	cbz	r4, 800cb2e <__gethex+0x15a>
 800caf4:	9b00      	ldr	r3, [sp, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	bf14      	ite	ne
 800cafa:	2700      	movne	r7, #0
 800cafc:	2706      	moveq	r7, #6
 800cafe:	4638      	mov	r0, r7
 800cb00:	b009      	add	sp, #36	; 0x24
 800cb02:	ecbd 8b02 	vpop	{d8}
 800cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0a:	463e      	mov	r6, r7
 800cb0c:	4625      	mov	r5, r4
 800cb0e:	2401      	movs	r4, #1
 800cb10:	e7ca      	b.n	800caa8 <__gethex+0xd4>
 800cb12:	f04f 0900 	mov.w	r9, #0
 800cb16:	1cb1      	adds	r1, r6, #2
 800cb18:	e7d3      	b.n	800cac2 <__gethex+0xee>
 800cb1a:	f04f 0901 	mov.w	r9, #1
 800cb1e:	e7fa      	b.n	800cb16 <__gethex+0x142>
 800cb20:	230a      	movs	r3, #10
 800cb22:	fb03 0202 	mla	r2, r3, r2, r0
 800cb26:	3a10      	subs	r2, #16
 800cb28:	e7d4      	b.n	800cad4 <__gethex+0x100>
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	e7df      	b.n	800caee <__gethex+0x11a>
 800cb2e:	1bf3      	subs	r3, r6, r7
 800cb30:	3b01      	subs	r3, #1
 800cb32:	4621      	mov	r1, r4
 800cb34:	2b07      	cmp	r3, #7
 800cb36:	dc0b      	bgt.n	800cb50 <__gethex+0x17c>
 800cb38:	ee18 0a10 	vmov	r0, s16
 800cb3c:	f000 fa70 	bl	800d020 <_Balloc>
 800cb40:	4604      	mov	r4, r0
 800cb42:	b940      	cbnz	r0, 800cb56 <__gethex+0x182>
 800cb44:	4b5d      	ldr	r3, [pc, #372]	; (800ccbc <__gethex+0x2e8>)
 800cb46:	4602      	mov	r2, r0
 800cb48:	21de      	movs	r1, #222	; 0xde
 800cb4a:	485d      	ldr	r0, [pc, #372]	; (800ccc0 <__gethex+0x2ec>)
 800cb4c:	f001 f9b6 	bl	800debc <__assert_func>
 800cb50:	3101      	adds	r1, #1
 800cb52:	105b      	asrs	r3, r3, #1
 800cb54:	e7ee      	b.n	800cb34 <__gethex+0x160>
 800cb56:	f100 0914 	add.w	r9, r0, #20
 800cb5a:	f04f 0b00 	mov.w	fp, #0
 800cb5e:	f1ca 0301 	rsb	r3, sl, #1
 800cb62:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb66:	f8cd b000 	str.w	fp, [sp]
 800cb6a:	9306      	str	r3, [sp, #24]
 800cb6c:	42b7      	cmp	r7, r6
 800cb6e:	d340      	bcc.n	800cbf2 <__gethex+0x21e>
 800cb70:	9802      	ldr	r0, [sp, #8]
 800cb72:	9b00      	ldr	r3, [sp, #0]
 800cb74:	f840 3b04 	str.w	r3, [r0], #4
 800cb78:	eba0 0009 	sub.w	r0, r0, r9
 800cb7c:	1080      	asrs	r0, r0, #2
 800cb7e:	0146      	lsls	r6, r0, #5
 800cb80:	6120      	str	r0, [r4, #16]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f000 fb3e 	bl	800d204 <__hi0bits>
 800cb88:	1a30      	subs	r0, r6, r0
 800cb8a:	f8d8 6000 	ldr.w	r6, [r8]
 800cb8e:	42b0      	cmp	r0, r6
 800cb90:	dd63      	ble.n	800cc5a <__gethex+0x286>
 800cb92:	1b87      	subs	r7, r0, r6
 800cb94:	4639      	mov	r1, r7
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 fee2 	bl	800d960 <__any_on>
 800cb9c:	4682      	mov	sl, r0
 800cb9e:	b1a8      	cbz	r0, 800cbcc <__gethex+0x1f8>
 800cba0:	1e7b      	subs	r3, r7, #1
 800cba2:	1159      	asrs	r1, r3, #5
 800cba4:	f003 021f 	and.w	r2, r3, #31
 800cba8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cbac:	f04f 0a01 	mov.w	sl, #1
 800cbb0:	fa0a f202 	lsl.w	r2, sl, r2
 800cbb4:	420a      	tst	r2, r1
 800cbb6:	d009      	beq.n	800cbcc <__gethex+0x1f8>
 800cbb8:	4553      	cmp	r3, sl
 800cbba:	dd05      	ble.n	800cbc8 <__gethex+0x1f4>
 800cbbc:	1eb9      	subs	r1, r7, #2
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 fece 	bl	800d960 <__any_on>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d145      	bne.n	800cc54 <__gethex+0x280>
 800cbc8:	f04f 0a02 	mov.w	sl, #2
 800cbcc:	4639      	mov	r1, r7
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f7ff fe98 	bl	800c904 <rshift>
 800cbd4:	443d      	add	r5, r7
 800cbd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbda:	42ab      	cmp	r3, r5
 800cbdc:	da4c      	bge.n	800cc78 <__gethex+0x2a4>
 800cbde:	ee18 0a10 	vmov	r0, s16
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	f000 fa5c 	bl	800d0a0 <_Bfree>
 800cbe8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbea:	2300      	movs	r3, #0
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	27a3      	movs	r7, #163	; 0xa3
 800cbf0:	e785      	b.n	800cafe <__gethex+0x12a>
 800cbf2:	1e73      	subs	r3, r6, #1
 800cbf4:	9a05      	ldr	r2, [sp, #20]
 800cbf6:	9303      	str	r3, [sp, #12]
 800cbf8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d019      	beq.n	800cc34 <__gethex+0x260>
 800cc00:	f1bb 0f20 	cmp.w	fp, #32
 800cc04:	d107      	bne.n	800cc16 <__gethex+0x242>
 800cc06:	9b02      	ldr	r3, [sp, #8]
 800cc08:	9a00      	ldr	r2, [sp, #0]
 800cc0a:	f843 2b04 	str.w	r2, [r3], #4
 800cc0e:	9302      	str	r3, [sp, #8]
 800cc10:	2300      	movs	r3, #0
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	469b      	mov	fp, r3
 800cc16:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cc1a:	f7ff fec5 	bl	800c9a8 <__hexdig_fun>
 800cc1e:	9b00      	ldr	r3, [sp, #0]
 800cc20:	f000 000f 	and.w	r0, r0, #15
 800cc24:	fa00 f00b 	lsl.w	r0, r0, fp
 800cc28:	4303      	orrs	r3, r0
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	f10b 0b04 	add.w	fp, fp, #4
 800cc30:	9b03      	ldr	r3, [sp, #12]
 800cc32:	e00d      	b.n	800cc50 <__gethex+0x27c>
 800cc34:	9b03      	ldr	r3, [sp, #12]
 800cc36:	9a06      	ldr	r2, [sp, #24]
 800cc38:	4413      	add	r3, r2
 800cc3a:	42bb      	cmp	r3, r7
 800cc3c:	d3e0      	bcc.n	800cc00 <__gethex+0x22c>
 800cc3e:	4618      	mov	r0, r3
 800cc40:	9901      	ldr	r1, [sp, #4]
 800cc42:	9307      	str	r3, [sp, #28]
 800cc44:	4652      	mov	r2, sl
 800cc46:	f001 f917 	bl	800de78 <strncmp>
 800cc4a:	9b07      	ldr	r3, [sp, #28]
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	d1d7      	bne.n	800cc00 <__gethex+0x22c>
 800cc50:	461e      	mov	r6, r3
 800cc52:	e78b      	b.n	800cb6c <__gethex+0x198>
 800cc54:	f04f 0a03 	mov.w	sl, #3
 800cc58:	e7b8      	b.n	800cbcc <__gethex+0x1f8>
 800cc5a:	da0a      	bge.n	800cc72 <__gethex+0x29e>
 800cc5c:	1a37      	subs	r7, r6, r0
 800cc5e:	4621      	mov	r1, r4
 800cc60:	ee18 0a10 	vmov	r0, s16
 800cc64:	463a      	mov	r2, r7
 800cc66:	f000 fc37 	bl	800d4d8 <__lshift>
 800cc6a:	1bed      	subs	r5, r5, r7
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	f100 0914 	add.w	r9, r0, #20
 800cc72:	f04f 0a00 	mov.w	sl, #0
 800cc76:	e7ae      	b.n	800cbd6 <__gethex+0x202>
 800cc78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cc7c:	42a8      	cmp	r0, r5
 800cc7e:	dd72      	ble.n	800cd66 <__gethex+0x392>
 800cc80:	1b45      	subs	r5, r0, r5
 800cc82:	42ae      	cmp	r6, r5
 800cc84:	dc36      	bgt.n	800ccf4 <__gethex+0x320>
 800cc86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d02a      	beq.n	800cce4 <__gethex+0x310>
 800cc8e:	2b03      	cmp	r3, #3
 800cc90:	d02c      	beq.n	800ccec <__gethex+0x318>
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d11c      	bne.n	800ccd0 <__gethex+0x2fc>
 800cc96:	42ae      	cmp	r6, r5
 800cc98:	d11a      	bne.n	800ccd0 <__gethex+0x2fc>
 800cc9a:	2e01      	cmp	r6, #1
 800cc9c:	d112      	bne.n	800ccc4 <__gethex+0x2f0>
 800cc9e:	9a04      	ldr	r2, [sp, #16]
 800cca0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cca4:	6013      	str	r3, [r2, #0]
 800cca6:	2301      	movs	r3, #1
 800cca8:	6123      	str	r3, [r4, #16]
 800ccaa:	f8c9 3000 	str.w	r3, [r9]
 800ccae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccb0:	2762      	movs	r7, #98	; 0x62
 800ccb2:	601c      	str	r4, [r3, #0]
 800ccb4:	e723      	b.n	800cafe <__gethex+0x12a>
 800ccb6:	bf00      	nop
 800ccb8:	080115a8 	.word	0x080115a8
 800ccbc:	08011530 	.word	0x08011530
 800ccc0:	08011541 	.word	0x08011541
 800ccc4:	1e71      	subs	r1, r6, #1
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f000 fe4a 	bl	800d960 <__any_on>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	d1e6      	bne.n	800cc9e <__gethex+0x2ca>
 800ccd0:	ee18 0a10 	vmov	r0, s16
 800ccd4:	4621      	mov	r1, r4
 800ccd6:	f000 f9e3 	bl	800d0a0 <_Bfree>
 800ccda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ccdc:	2300      	movs	r3, #0
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	2750      	movs	r7, #80	; 0x50
 800cce2:	e70c      	b.n	800cafe <__gethex+0x12a>
 800cce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d1f2      	bne.n	800ccd0 <__gethex+0x2fc>
 800ccea:	e7d8      	b.n	800cc9e <__gethex+0x2ca>
 800ccec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d1d5      	bne.n	800cc9e <__gethex+0x2ca>
 800ccf2:	e7ed      	b.n	800ccd0 <__gethex+0x2fc>
 800ccf4:	1e6f      	subs	r7, r5, #1
 800ccf6:	f1ba 0f00 	cmp.w	sl, #0
 800ccfa:	d131      	bne.n	800cd60 <__gethex+0x38c>
 800ccfc:	b127      	cbz	r7, 800cd08 <__gethex+0x334>
 800ccfe:	4639      	mov	r1, r7
 800cd00:	4620      	mov	r0, r4
 800cd02:	f000 fe2d 	bl	800d960 <__any_on>
 800cd06:	4682      	mov	sl, r0
 800cd08:	117b      	asrs	r3, r7, #5
 800cd0a:	2101      	movs	r1, #1
 800cd0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cd10:	f007 071f 	and.w	r7, r7, #31
 800cd14:	fa01 f707 	lsl.w	r7, r1, r7
 800cd18:	421f      	tst	r7, r3
 800cd1a:	4629      	mov	r1, r5
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	bf18      	it	ne
 800cd20:	f04a 0a02 	orrne.w	sl, sl, #2
 800cd24:	1b76      	subs	r6, r6, r5
 800cd26:	f7ff fded 	bl	800c904 <rshift>
 800cd2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd2e:	2702      	movs	r7, #2
 800cd30:	f1ba 0f00 	cmp.w	sl, #0
 800cd34:	d048      	beq.n	800cdc8 <__gethex+0x3f4>
 800cd36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d015      	beq.n	800cd6a <__gethex+0x396>
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	d017      	beq.n	800cd72 <__gethex+0x39e>
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d109      	bne.n	800cd5a <__gethex+0x386>
 800cd46:	f01a 0f02 	tst.w	sl, #2
 800cd4a:	d006      	beq.n	800cd5a <__gethex+0x386>
 800cd4c:	f8d9 0000 	ldr.w	r0, [r9]
 800cd50:	ea4a 0a00 	orr.w	sl, sl, r0
 800cd54:	f01a 0f01 	tst.w	sl, #1
 800cd58:	d10e      	bne.n	800cd78 <__gethex+0x3a4>
 800cd5a:	f047 0710 	orr.w	r7, r7, #16
 800cd5e:	e033      	b.n	800cdc8 <__gethex+0x3f4>
 800cd60:	f04f 0a01 	mov.w	sl, #1
 800cd64:	e7d0      	b.n	800cd08 <__gethex+0x334>
 800cd66:	2701      	movs	r7, #1
 800cd68:	e7e2      	b.n	800cd30 <__gethex+0x35c>
 800cd6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd6c:	f1c3 0301 	rsb	r3, r3, #1
 800cd70:	9315      	str	r3, [sp, #84]	; 0x54
 800cd72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d0f0      	beq.n	800cd5a <__gethex+0x386>
 800cd78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd7c:	f104 0314 	add.w	r3, r4, #20
 800cd80:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cd84:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cd88:	f04f 0c00 	mov.w	ip, #0
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd92:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800cd96:	d01c      	beq.n	800cdd2 <__gethex+0x3fe>
 800cd98:	3201      	adds	r2, #1
 800cd9a:	6002      	str	r2, [r0, #0]
 800cd9c:	2f02      	cmp	r7, #2
 800cd9e:	f104 0314 	add.w	r3, r4, #20
 800cda2:	d13f      	bne.n	800ce24 <__gethex+0x450>
 800cda4:	f8d8 2000 	ldr.w	r2, [r8]
 800cda8:	3a01      	subs	r2, #1
 800cdaa:	42b2      	cmp	r2, r6
 800cdac:	d10a      	bne.n	800cdc4 <__gethex+0x3f0>
 800cdae:	1171      	asrs	r1, r6, #5
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cdb6:	f006 061f 	and.w	r6, r6, #31
 800cdba:	fa02 f606 	lsl.w	r6, r2, r6
 800cdbe:	421e      	tst	r6, r3
 800cdc0:	bf18      	it	ne
 800cdc2:	4617      	movne	r7, r2
 800cdc4:	f047 0720 	orr.w	r7, r7, #32
 800cdc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cdca:	601c      	str	r4, [r3, #0]
 800cdcc:	9b04      	ldr	r3, [sp, #16]
 800cdce:	601d      	str	r5, [r3, #0]
 800cdd0:	e695      	b.n	800cafe <__gethex+0x12a>
 800cdd2:	4299      	cmp	r1, r3
 800cdd4:	f843 cc04 	str.w	ip, [r3, #-4]
 800cdd8:	d8d8      	bhi.n	800cd8c <__gethex+0x3b8>
 800cdda:	68a3      	ldr	r3, [r4, #8]
 800cddc:	459b      	cmp	fp, r3
 800cdde:	db19      	blt.n	800ce14 <__gethex+0x440>
 800cde0:	6861      	ldr	r1, [r4, #4]
 800cde2:	ee18 0a10 	vmov	r0, s16
 800cde6:	3101      	adds	r1, #1
 800cde8:	f000 f91a 	bl	800d020 <_Balloc>
 800cdec:	4681      	mov	r9, r0
 800cdee:	b918      	cbnz	r0, 800cdf8 <__gethex+0x424>
 800cdf0:	4b1a      	ldr	r3, [pc, #104]	; (800ce5c <__gethex+0x488>)
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	2184      	movs	r1, #132	; 0x84
 800cdf6:	e6a8      	b.n	800cb4a <__gethex+0x176>
 800cdf8:	6922      	ldr	r2, [r4, #16]
 800cdfa:	3202      	adds	r2, #2
 800cdfc:	f104 010c 	add.w	r1, r4, #12
 800ce00:	0092      	lsls	r2, r2, #2
 800ce02:	300c      	adds	r0, #12
 800ce04:	f7fd f9a2 	bl	800a14c <memcpy>
 800ce08:	4621      	mov	r1, r4
 800ce0a:	ee18 0a10 	vmov	r0, s16
 800ce0e:	f000 f947 	bl	800d0a0 <_Bfree>
 800ce12:	464c      	mov	r4, r9
 800ce14:	6923      	ldr	r3, [r4, #16]
 800ce16:	1c5a      	adds	r2, r3, #1
 800ce18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce1c:	6122      	str	r2, [r4, #16]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	615a      	str	r2, [r3, #20]
 800ce22:	e7bb      	b.n	800cd9c <__gethex+0x3c8>
 800ce24:	6922      	ldr	r2, [r4, #16]
 800ce26:	455a      	cmp	r2, fp
 800ce28:	dd0b      	ble.n	800ce42 <__gethex+0x46e>
 800ce2a:	2101      	movs	r1, #1
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f7ff fd69 	bl	800c904 <rshift>
 800ce32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce36:	3501      	adds	r5, #1
 800ce38:	42ab      	cmp	r3, r5
 800ce3a:	f6ff aed0 	blt.w	800cbde <__gethex+0x20a>
 800ce3e:	2701      	movs	r7, #1
 800ce40:	e7c0      	b.n	800cdc4 <__gethex+0x3f0>
 800ce42:	f016 061f 	ands.w	r6, r6, #31
 800ce46:	d0fa      	beq.n	800ce3e <__gethex+0x46a>
 800ce48:	4453      	add	r3, sl
 800ce4a:	f1c6 0620 	rsb	r6, r6, #32
 800ce4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ce52:	f000 f9d7 	bl	800d204 <__hi0bits>
 800ce56:	42b0      	cmp	r0, r6
 800ce58:	dbe7      	blt.n	800ce2a <__gethex+0x456>
 800ce5a:	e7f0      	b.n	800ce3e <__gethex+0x46a>
 800ce5c:	08011530 	.word	0x08011530

0800ce60 <L_shift>:
 800ce60:	f1c2 0208 	rsb	r2, r2, #8
 800ce64:	0092      	lsls	r2, r2, #2
 800ce66:	b570      	push	{r4, r5, r6, lr}
 800ce68:	f1c2 0620 	rsb	r6, r2, #32
 800ce6c:	6843      	ldr	r3, [r0, #4]
 800ce6e:	6804      	ldr	r4, [r0, #0]
 800ce70:	fa03 f506 	lsl.w	r5, r3, r6
 800ce74:	432c      	orrs	r4, r5
 800ce76:	40d3      	lsrs	r3, r2
 800ce78:	6004      	str	r4, [r0, #0]
 800ce7a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce7e:	4288      	cmp	r0, r1
 800ce80:	d3f4      	bcc.n	800ce6c <L_shift+0xc>
 800ce82:	bd70      	pop	{r4, r5, r6, pc}

0800ce84 <__match>:
 800ce84:	b530      	push	{r4, r5, lr}
 800ce86:	6803      	ldr	r3, [r0, #0]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce8e:	b914      	cbnz	r4, 800ce96 <__match+0x12>
 800ce90:	6003      	str	r3, [r0, #0]
 800ce92:	2001      	movs	r0, #1
 800ce94:	bd30      	pop	{r4, r5, pc}
 800ce96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce9e:	2d19      	cmp	r5, #25
 800cea0:	bf98      	it	ls
 800cea2:	3220      	addls	r2, #32
 800cea4:	42a2      	cmp	r2, r4
 800cea6:	d0f0      	beq.n	800ce8a <__match+0x6>
 800cea8:	2000      	movs	r0, #0
 800ceaa:	e7f3      	b.n	800ce94 <__match+0x10>

0800ceac <__hexnan>:
 800ceac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb0:	680b      	ldr	r3, [r1, #0]
 800ceb2:	115e      	asrs	r6, r3, #5
 800ceb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ceb8:	f013 031f 	ands.w	r3, r3, #31
 800cebc:	b087      	sub	sp, #28
 800cebe:	bf18      	it	ne
 800cec0:	3604      	addne	r6, #4
 800cec2:	2500      	movs	r5, #0
 800cec4:	1f37      	subs	r7, r6, #4
 800cec6:	4690      	mov	r8, r2
 800cec8:	6802      	ldr	r2, [r0, #0]
 800ceca:	9301      	str	r3, [sp, #4]
 800cecc:	4682      	mov	sl, r0
 800cece:	f846 5c04 	str.w	r5, [r6, #-4]
 800ced2:	46b9      	mov	r9, r7
 800ced4:	463c      	mov	r4, r7
 800ced6:	9502      	str	r5, [sp, #8]
 800ced8:	46ab      	mov	fp, r5
 800ceda:	7851      	ldrb	r1, [r2, #1]
 800cedc:	1c53      	adds	r3, r2, #1
 800cede:	9303      	str	r3, [sp, #12]
 800cee0:	b341      	cbz	r1, 800cf34 <__hexnan+0x88>
 800cee2:	4608      	mov	r0, r1
 800cee4:	9205      	str	r2, [sp, #20]
 800cee6:	9104      	str	r1, [sp, #16]
 800cee8:	f7ff fd5e 	bl	800c9a8 <__hexdig_fun>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d14f      	bne.n	800cf90 <__hexnan+0xe4>
 800cef0:	9904      	ldr	r1, [sp, #16]
 800cef2:	9a05      	ldr	r2, [sp, #20]
 800cef4:	2920      	cmp	r1, #32
 800cef6:	d818      	bhi.n	800cf2a <__hexnan+0x7e>
 800cef8:	9b02      	ldr	r3, [sp, #8]
 800cefa:	459b      	cmp	fp, r3
 800cefc:	dd13      	ble.n	800cf26 <__hexnan+0x7a>
 800cefe:	454c      	cmp	r4, r9
 800cf00:	d206      	bcs.n	800cf10 <__hexnan+0x64>
 800cf02:	2d07      	cmp	r5, #7
 800cf04:	dc04      	bgt.n	800cf10 <__hexnan+0x64>
 800cf06:	462a      	mov	r2, r5
 800cf08:	4649      	mov	r1, r9
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f7ff ffa8 	bl	800ce60 <L_shift>
 800cf10:	4544      	cmp	r4, r8
 800cf12:	d950      	bls.n	800cfb6 <__hexnan+0x10a>
 800cf14:	2300      	movs	r3, #0
 800cf16:	f1a4 0904 	sub.w	r9, r4, #4
 800cf1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf1e:	f8cd b008 	str.w	fp, [sp, #8]
 800cf22:	464c      	mov	r4, r9
 800cf24:	461d      	mov	r5, r3
 800cf26:	9a03      	ldr	r2, [sp, #12]
 800cf28:	e7d7      	b.n	800ceda <__hexnan+0x2e>
 800cf2a:	2929      	cmp	r1, #41	; 0x29
 800cf2c:	d156      	bne.n	800cfdc <__hexnan+0x130>
 800cf2e:	3202      	adds	r2, #2
 800cf30:	f8ca 2000 	str.w	r2, [sl]
 800cf34:	f1bb 0f00 	cmp.w	fp, #0
 800cf38:	d050      	beq.n	800cfdc <__hexnan+0x130>
 800cf3a:	454c      	cmp	r4, r9
 800cf3c:	d206      	bcs.n	800cf4c <__hexnan+0xa0>
 800cf3e:	2d07      	cmp	r5, #7
 800cf40:	dc04      	bgt.n	800cf4c <__hexnan+0xa0>
 800cf42:	462a      	mov	r2, r5
 800cf44:	4649      	mov	r1, r9
 800cf46:	4620      	mov	r0, r4
 800cf48:	f7ff ff8a 	bl	800ce60 <L_shift>
 800cf4c:	4544      	cmp	r4, r8
 800cf4e:	d934      	bls.n	800cfba <__hexnan+0x10e>
 800cf50:	f1a8 0204 	sub.w	r2, r8, #4
 800cf54:	4623      	mov	r3, r4
 800cf56:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf5a:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf5e:	429f      	cmp	r7, r3
 800cf60:	d2f9      	bcs.n	800cf56 <__hexnan+0xaa>
 800cf62:	1b3b      	subs	r3, r7, r4
 800cf64:	f023 0303 	bic.w	r3, r3, #3
 800cf68:	3304      	adds	r3, #4
 800cf6a:	3401      	adds	r4, #1
 800cf6c:	3e03      	subs	r6, #3
 800cf6e:	42b4      	cmp	r4, r6
 800cf70:	bf88      	it	hi
 800cf72:	2304      	movhi	r3, #4
 800cf74:	4443      	add	r3, r8
 800cf76:	2200      	movs	r2, #0
 800cf78:	f843 2b04 	str.w	r2, [r3], #4
 800cf7c:	429f      	cmp	r7, r3
 800cf7e:	d2fb      	bcs.n	800cf78 <__hexnan+0xcc>
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	b91b      	cbnz	r3, 800cf8c <__hexnan+0xe0>
 800cf84:	4547      	cmp	r7, r8
 800cf86:	d127      	bne.n	800cfd8 <__hexnan+0x12c>
 800cf88:	2301      	movs	r3, #1
 800cf8a:	603b      	str	r3, [r7, #0]
 800cf8c:	2005      	movs	r0, #5
 800cf8e:	e026      	b.n	800cfde <__hexnan+0x132>
 800cf90:	3501      	adds	r5, #1
 800cf92:	2d08      	cmp	r5, #8
 800cf94:	f10b 0b01 	add.w	fp, fp, #1
 800cf98:	dd06      	ble.n	800cfa8 <__hexnan+0xfc>
 800cf9a:	4544      	cmp	r4, r8
 800cf9c:	d9c3      	bls.n	800cf26 <__hexnan+0x7a>
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfa4:	2501      	movs	r5, #1
 800cfa6:	3c04      	subs	r4, #4
 800cfa8:	6822      	ldr	r2, [r4, #0]
 800cfaa:	f000 000f 	and.w	r0, r0, #15
 800cfae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cfb2:	6022      	str	r2, [r4, #0]
 800cfb4:	e7b7      	b.n	800cf26 <__hexnan+0x7a>
 800cfb6:	2508      	movs	r5, #8
 800cfb8:	e7b5      	b.n	800cf26 <__hexnan+0x7a>
 800cfba:	9b01      	ldr	r3, [sp, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0df      	beq.n	800cf80 <__hexnan+0xd4>
 800cfc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfc4:	f1c3 0320 	rsb	r3, r3, #32
 800cfc8:	fa22 f303 	lsr.w	r3, r2, r3
 800cfcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cfd0:	401a      	ands	r2, r3
 800cfd2:	f846 2c04 	str.w	r2, [r6, #-4]
 800cfd6:	e7d3      	b.n	800cf80 <__hexnan+0xd4>
 800cfd8:	3f04      	subs	r7, #4
 800cfda:	e7d1      	b.n	800cf80 <__hexnan+0xd4>
 800cfdc:	2004      	movs	r0, #4
 800cfde:	b007      	add	sp, #28
 800cfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfe4 <_localeconv_r>:
 800cfe4:	4800      	ldr	r0, [pc, #0]	; (800cfe8 <_localeconv_r+0x4>)
 800cfe6:	4770      	bx	lr
 800cfe8:	20000180 	.word	0x20000180

0800cfec <malloc>:
 800cfec:	4b02      	ldr	r3, [pc, #8]	; (800cff8 <malloc+0xc>)
 800cfee:	4601      	mov	r1, r0
 800cff0:	6818      	ldr	r0, [r3, #0]
 800cff2:	f000 bd59 	b.w	800daa8 <_malloc_r>
 800cff6:	bf00      	nop
 800cff8:	20000028 	.word	0x20000028

0800cffc <__ascii_mbtowc>:
 800cffc:	b082      	sub	sp, #8
 800cffe:	b901      	cbnz	r1, 800d002 <__ascii_mbtowc+0x6>
 800d000:	a901      	add	r1, sp, #4
 800d002:	b142      	cbz	r2, 800d016 <__ascii_mbtowc+0x1a>
 800d004:	b14b      	cbz	r3, 800d01a <__ascii_mbtowc+0x1e>
 800d006:	7813      	ldrb	r3, [r2, #0]
 800d008:	600b      	str	r3, [r1, #0]
 800d00a:	7812      	ldrb	r2, [r2, #0]
 800d00c:	1e10      	subs	r0, r2, #0
 800d00e:	bf18      	it	ne
 800d010:	2001      	movne	r0, #1
 800d012:	b002      	add	sp, #8
 800d014:	4770      	bx	lr
 800d016:	4610      	mov	r0, r2
 800d018:	e7fb      	b.n	800d012 <__ascii_mbtowc+0x16>
 800d01a:	f06f 0001 	mvn.w	r0, #1
 800d01e:	e7f8      	b.n	800d012 <__ascii_mbtowc+0x16>

0800d020 <_Balloc>:
 800d020:	b570      	push	{r4, r5, r6, lr}
 800d022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d024:	4604      	mov	r4, r0
 800d026:	460d      	mov	r5, r1
 800d028:	b976      	cbnz	r6, 800d048 <_Balloc+0x28>
 800d02a:	2010      	movs	r0, #16
 800d02c:	f7ff ffde 	bl	800cfec <malloc>
 800d030:	4602      	mov	r2, r0
 800d032:	6260      	str	r0, [r4, #36]	; 0x24
 800d034:	b920      	cbnz	r0, 800d040 <_Balloc+0x20>
 800d036:	4b18      	ldr	r3, [pc, #96]	; (800d098 <_Balloc+0x78>)
 800d038:	4818      	ldr	r0, [pc, #96]	; (800d09c <_Balloc+0x7c>)
 800d03a:	2166      	movs	r1, #102	; 0x66
 800d03c:	f000 ff3e 	bl	800debc <__assert_func>
 800d040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d044:	6006      	str	r6, [r0, #0]
 800d046:	60c6      	str	r6, [r0, #12]
 800d048:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d04a:	68f3      	ldr	r3, [r6, #12]
 800d04c:	b183      	cbz	r3, 800d070 <_Balloc+0x50>
 800d04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d056:	b9b8      	cbnz	r0, 800d088 <_Balloc+0x68>
 800d058:	2101      	movs	r1, #1
 800d05a:	fa01 f605 	lsl.w	r6, r1, r5
 800d05e:	1d72      	adds	r2, r6, #5
 800d060:	0092      	lsls	r2, r2, #2
 800d062:	4620      	mov	r0, r4
 800d064:	f000 fc9d 	bl	800d9a2 <_calloc_r>
 800d068:	b160      	cbz	r0, 800d084 <_Balloc+0x64>
 800d06a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d06e:	e00e      	b.n	800d08e <_Balloc+0x6e>
 800d070:	2221      	movs	r2, #33	; 0x21
 800d072:	2104      	movs	r1, #4
 800d074:	4620      	mov	r0, r4
 800d076:	f000 fc94 	bl	800d9a2 <_calloc_r>
 800d07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d07c:	60f0      	str	r0, [r6, #12]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1e4      	bne.n	800d04e <_Balloc+0x2e>
 800d084:	2000      	movs	r0, #0
 800d086:	bd70      	pop	{r4, r5, r6, pc}
 800d088:	6802      	ldr	r2, [r0, #0]
 800d08a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d08e:	2300      	movs	r3, #0
 800d090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d094:	e7f7      	b.n	800d086 <_Balloc+0x66>
 800d096:	bf00      	nop
 800d098:	080114be 	.word	0x080114be
 800d09c:	080115bc 	.word	0x080115bc

0800d0a0 <_Bfree>:
 800d0a0:	b570      	push	{r4, r5, r6, lr}
 800d0a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0a4:	4605      	mov	r5, r0
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	b976      	cbnz	r6, 800d0c8 <_Bfree+0x28>
 800d0aa:	2010      	movs	r0, #16
 800d0ac:	f7ff ff9e 	bl	800cfec <malloc>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	6268      	str	r0, [r5, #36]	; 0x24
 800d0b4:	b920      	cbnz	r0, 800d0c0 <_Bfree+0x20>
 800d0b6:	4b09      	ldr	r3, [pc, #36]	; (800d0dc <_Bfree+0x3c>)
 800d0b8:	4809      	ldr	r0, [pc, #36]	; (800d0e0 <_Bfree+0x40>)
 800d0ba:	218a      	movs	r1, #138	; 0x8a
 800d0bc:	f000 fefe 	bl	800debc <__assert_func>
 800d0c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0c4:	6006      	str	r6, [r0, #0]
 800d0c6:	60c6      	str	r6, [r0, #12]
 800d0c8:	b13c      	cbz	r4, 800d0da <_Bfree+0x3a>
 800d0ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0cc:	6862      	ldr	r2, [r4, #4]
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0d4:	6021      	str	r1, [r4, #0]
 800d0d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0da:	bd70      	pop	{r4, r5, r6, pc}
 800d0dc:	080114be 	.word	0x080114be
 800d0e0:	080115bc 	.word	0x080115bc

0800d0e4 <__multadd>:
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	690d      	ldr	r5, [r1, #16]
 800d0ea:	4607      	mov	r7, r0
 800d0ec:	460c      	mov	r4, r1
 800d0ee:	461e      	mov	r6, r3
 800d0f0:	f101 0c14 	add.w	ip, r1, #20
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	f8dc 3000 	ldr.w	r3, [ip]
 800d0fa:	b299      	uxth	r1, r3
 800d0fc:	fb02 6101 	mla	r1, r2, r1, r6
 800d100:	0c1e      	lsrs	r6, r3, #16
 800d102:	0c0b      	lsrs	r3, r1, #16
 800d104:	fb02 3306 	mla	r3, r2, r6, r3
 800d108:	b289      	uxth	r1, r1
 800d10a:	3001      	adds	r0, #1
 800d10c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d110:	4285      	cmp	r5, r0
 800d112:	f84c 1b04 	str.w	r1, [ip], #4
 800d116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d11a:	dcec      	bgt.n	800d0f6 <__multadd+0x12>
 800d11c:	b30e      	cbz	r6, 800d162 <__multadd+0x7e>
 800d11e:	68a3      	ldr	r3, [r4, #8]
 800d120:	42ab      	cmp	r3, r5
 800d122:	dc19      	bgt.n	800d158 <__multadd+0x74>
 800d124:	6861      	ldr	r1, [r4, #4]
 800d126:	4638      	mov	r0, r7
 800d128:	3101      	adds	r1, #1
 800d12a:	f7ff ff79 	bl	800d020 <_Balloc>
 800d12e:	4680      	mov	r8, r0
 800d130:	b928      	cbnz	r0, 800d13e <__multadd+0x5a>
 800d132:	4602      	mov	r2, r0
 800d134:	4b0c      	ldr	r3, [pc, #48]	; (800d168 <__multadd+0x84>)
 800d136:	480d      	ldr	r0, [pc, #52]	; (800d16c <__multadd+0x88>)
 800d138:	21b5      	movs	r1, #181	; 0xb5
 800d13a:	f000 febf 	bl	800debc <__assert_func>
 800d13e:	6922      	ldr	r2, [r4, #16]
 800d140:	3202      	adds	r2, #2
 800d142:	f104 010c 	add.w	r1, r4, #12
 800d146:	0092      	lsls	r2, r2, #2
 800d148:	300c      	adds	r0, #12
 800d14a:	f7fc ffff 	bl	800a14c <memcpy>
 800d14e:	4621      	mov	r1, r4
 800d150:	4638      	mov	r0, r7
 800d152:	f7ff ffa5 	bl	800d0a0 <_Bfree>
 800d156:	4644      	mov	r4, r8
 800d158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d15c:	3501      	adds	r5, #1
 800d15e:	615e      	str	r6, [r3, #20]
 800d160:	6125      	str	r5, [r4, #16]
 800d162:	4620      	mov	r0, r4
 800d164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d168:	08011530 	.word	0x08011530
 800d16c:	080115bc 	.word	0x080115bc

0800d170 <__s2b>:
 800d170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d174:	460c      	mov	r4, r1
 800d176:	4615      	mov	r5, r2
 800d178:	461f      	mov	r7, r3
 800d17a:	2209      	movs	r2, #9
 800d17c:	3308      	adds	r3, #8
 800d17e:	4606      	mov	r6, r0
 800d180:	fb93 f3f2 	sdiv	r3, r3, r2
 800d184:	2100      	movs	r1, #0
 800d186:	2201      	movs	r2, #1
 800d188:	429a      	cmp	r2, r3
 800d18a:	db09      	blt.n	800d1a0 <__s2b+0x30>
 800d18c:	4630      	mov	r0, r6
 800d18e:	f7ff ff47 	bl	800d020 <_Balloc>
 800d192:	b940      	cbnz	r0, 800d1a6 <__s2b+0x36>
 800d194:	4602      	mov	r2, r0
 800d196:	4b19      	ldr	r3, [pc, #100]	; (800d1fc <__s2b+0x8c>)
 800d198:	4819      	ldr	r0, [pc, #100]	; (800d200 <__s2b+0x90>)
 800d19a:	21ce      	movs	r1, #206	; 0xce
 800d19c:	f000 fe8e 	bl	800debc <__assert_func>
 800d1a0:	0052      	lsls	r2, r2, #1
 800d1a2:	3101      	adds	r1, #1
 800d1a4:	e7f0      	b.n	800d188 <__s2b+0x18>
 800d1a6:	9b08      	ldr	r3, [sp, #32]
 800d1a8:	6143      	str	r3, [r0, #20]
 800d1aa:	2d09      	cmp	r5, #9
 800d1ac:	f04f 0301 	mov.w	r3, #1
 800d1b0:	6103      	str	r3, [r0, #16]
 800d1b2:	dd16      	ble.n	800d1e2 <__s2b+0x72>
 800d1b4:	f104 0909 	add.w	r9, r4, #9
 800d1b8:	46c8      	mov	r8, r9
 800d1ba:	442c      	add	r4, r5
 800d1bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d1c0:	4601      	mov	r1, r0
 800d1c2:	3b30      	subs	r3, #48	; 0x30
 800d1c4:	220a      	movs	r2, #10
 800d1c6:	4630      	mov	r0, r6
 800d1c8:	f7ff ff8c 	bl	800d0e4 <__multadd>
 800d1cc:	45a0      	cmp	r8, r4
 800d1ce:	d1f5      	bne.n	800d1bc <__s2b+0x4c>
 800d1d0:	f1a5 0408 	sub.w	r4, r5, #8
 800d1d4:	444c      	add	r4, r9
 800d1d6:	1b2d      	subs	r5, r5, r4
 800d1d8:	1963      	adds	r3, r4, r5
 800d1da:	42bb      	cmp	r3, r7
 800d1dc:	db04      	blt.n	800d1e8 <__s2b+0x78>
 800d1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1e2:	340a      	adds	r4, #10
 800d1e4:	2509      	movs	r5, #9
 800d1e6:	e7f6      	b.n	800d1d6 <__s2b+0x66>
 800d1e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d1ec:	4601      	mov	r1, r0
 800d1ee:	3b30      	subs	r3, #48	; 0x30
 800d1f0:	220a      	movs	r2, #10
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f7ff ff76 	bl	800d0e4 <__multadd>
 800d1f8:	e7ee      	b.n	800d1d8 <__s2b+0x68>
 800d1fa:	bf00      	nop
 800d1fc:	08011530 	.word	0x08011530
 800d200:	080115bc 	.word	0x080115bc

0800d204 <__hi0bits>:
 800d204:	0c03      	lsrs	r3, r0, #16
 800d206:	041b      	lsls	r3, r3, #16
 800d208:	b9d3      	cbnz	r3, 800d240 <__hi0bits+0x3c>
 800d20a:	0400      	lsls	r0, r0, #16
 800d20c:	2310      	movs	r3, #16
 800d20e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d212:	bf04      	itt	eq
 800d214:	0200      	lsleq	r0, r0, #8
 800d216:	3308      	addeq	r3, #8
 800d218:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d21c:	bf04      	itt	eq
 800d21e:	0100      	lsleq	r0, r0, #4
 800d220:	3304      	addeq	r3, #4
 800d222:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d226:	bf04      	itt	eq
 800d228:	0080      	lsleq	r0, r0, #2
 800d22a:	3302      	addeq	r3, #2
 800d22c:	2800      	cmp	r0, #0
 800d22e:	db05      	blt.n	800d23c <__hi0bits+0x38>
 800d230:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d234:	f103 0301 	add.w	r3, r3, #1
 800d238:	bf08      	it	eq
 800d23a:	2320      	moveq	r3, #32
 800d23c:	4618      	mov	r0, r3
 800d23e:	4770      	bx	lr
 800d240:	2300      	movs	r3, #0
 800d242:	e7e4      	b.n	800d20e <__hi0bits+0xa>

0800d244 <__lo0bits>:
 800d244:	6803      	ldr	r3, [r0, #0]
 800d246:	f013 0207 	ands.w	r2, r3, #7
 800d24a:	4601      	mov	r1, r0
 800d24c:	d00b      	beq.n	800d266 <__lo0bits+0x22>
 800d24e:	07da      	lsls	r2, r3, #31
 800d250:	d423      	bmi.n	800d29a <__lo0bits+0x56>
 800d252:	0798      	lsls	r0, r3, #30
 800d254:	bf49      	itett	mi
 800d256:	085b      	lsrmi	r3, r3, #1
 800d258:	089b      	lsrpl	r3, r3, #2
 800d25a:	2001      	movmi	r0, #1
 800d25c:	600b      	strmi	r3, [r1, #0]
 800d25e:	bf5c      	itt	pl
 800d260:	600b      	strpl	r3, [r1, #0]
 800d262:	2002      	movpl	r0, #2
 800d264:	4770      	bx	lr
 800d266:	b298      	uxth	r0, r3
 800d268:	b9a8      	cbnz	r0, 800d296 <__lo0bits+0x52>
 800d26a:	0c1b      	lsrs	r3, r3, #16
 800d26c:	2010      	movs	r0, #16
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	b90a      	cbnz	r2, 800d276 <__lo0bits+0x32>
 800d272:	3008      	adds	r0, #8
 800d274:	0a1b      	lsrs	r3, r3, #8
 800d276:	071a      	lsls	r2, r3, #28
 800d278:	bf04      	itt	eq
 800d27a:	091b      	lsreq	r3, r3, #4
 800d27c:	3004      	addeq	r0, #4
 800d27e:	079a      	lsls	r2, r3, #30
 800d280:	bf04      	itt	eq
 800d282:	089b      	lsreq	r3, r3, #2
 800d284:	3002      	addeq	r0, #2
 800d286:	07da      	lsls	r2, r3, #31
 800d288:	d403      	bmi.n	800d292 <__lo0bits+0x4e>
 800d28a:	085b      	lsrs	r3, r3, #1
 800d28c:	f100 0001 	add.w	r0, r0, #1
 800d290:	d005      	beq.n	800d29e <__lo0bits+0x5a>
 800d292:	600b      	str	r3, [r1, #0]
 800d294:	4770      	bx	lr
 800d296:	4610      	mov	r0, r2
 800d298:	e7e9      	b.n	800d26e <__lo0bits+0x2a>
 800d29a:	2000      	movs	r0, #0
 800d29c:	4770      	bx	lr
 800d29e:	2020      	movs	r0, #32
 800d2a0:	4770      	bx	lr
	...

0800d2a4 <__i2b>:
 800d2a4:	b510      	push	{r4, lr}
 800d2a6:	460c      	mov	r4, r1
 800d2a8:	2101      	movs	r1, #1
 800d2aa:	f7ff feb9 	bl	800d020 <_Balloc>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	b928      	cbnz	r0, 800d2be <__i2b+0x1a>
 800d2b2:	4b05      	ldr	r3, [pc, #20]	; (800d2c8 <__i2b+0x24>)
 800d2b4:	4805      	ldr	r0, [pc, #20]	; (800d2cc <__i2b+0x28>)
 800d2b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d2ba:	f000 fdff 	bl	800debc <__assert_func>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	6144      	str	r4, [r0, #20]
 800d2c2:	6103      	str	r3, [r0, #16]
 800d2c4:	bd10      	pop	{r4, pc}
 800d2c6:	bf00      	nop
 800d2c8:	08011530 	.word	0x08011530
 800d2cc:	080115bc 	.word	0x080115bc

0800d2d0 <__multiply>:
 800d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d4:	4691      	mov	r9, r2
 800d2d6:	690a      	ldr	r2, [r1, #16]
 800d2d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	bfb8      	it	lt
 800d2e0:	460b      	movlt	r3, r1
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	bfbc      	itt	lt
 800d2e6:	464c      	movlt	r4, r9
 800d2e8:	4699      	movlt	r9, r3
 800d2ea:	6927      	ldr	r7, [r4, #16]
 800d2ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d2f0:	68a3      	ldr	r3, [r4, #8]
 800d2f2:	6861      	ldr	r1, [r4, #4]
 800d2f4:	eb07 060a 	add.w	r6, r7, sl
 800d2f8:	42b3      	cmp	r3, r6
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	bfb8      	it	lt
 800d2fe:	3101      	addlt	r1, #1
 800d300:	f7ff fe8e 	bl	800d020 <_Balloc>
 800d304:	b930      	cbnz	r0, 800d314 <__multiply+0x44>
 800d306:	4602      	mov	r2, r0
 800d308:	4b44      	ldr	r3, [pc, #272]	; (800d41c <__multiply+0x14c>)
 800d30a:	4845      	ldr	r0, [pc, #276]	; (800d420 <__multiply+0x150>)
 800d30c:	f240 115d 	movw	r1, #349	; 0x15d
 800d310:	f000 fdd4 	bl	800debc <__assert_func>
 800d314:	f100 0514 	add.w	r5, r0, #20
 800d318:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d31c:	462b      	mov	r3, r5
 800d31e:	2200      	movs	r2, #0
 800d320:	4543      	cmp	r3, r8
 800d322:	d321      	bcc.n	800d368 <__multiply+0x98>
 800d324:	f104 0314 	add.w	r3, r4, #20
 800d328:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d32c:	f109 0314 	add.w	r3, r9, #20
 800d330:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d334:	9202      	str	r2, [sp, #8]
 800d336:	1b3a      	subs	r2, r7, r4
 800d338:	3a15      	subs	r2, #21
 800d33a:	f022 0203 	bic.w	r2, r2, #3
 800d33e:	3204      	adds	r2, #4
 800d340:	f104 0115 	add.w	r1, r4, #21
 800d344:	428f      	cmp	r7, r1
 800d346:	bf38      	it	cc
 800d348:	2204      	movcc	r2, #4
 800d34a:	9201      	str	r2, [sp, #4]
 800d34c:	9a02      	ldr	r2, [sp, #8]
 800d34e:	9303      	str	r3, [sp, #12]
 800d350:	429a      	cmp	r2, r3
 800d352:	d80c      	bhi.n	800d36e <__multiply+0x9e>
 800d354:	2e00      	cmp	r6, #0
 800d356:	dd03      	ble.n	800d360 <__multiply+0x90>
 800d358:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d05a      	beq.n	800d416 <__multiply+0x146>
 800d360:	6106      	str	r6, [r0, #16]
 800d362:	b005      	add	sp, #20
 800d364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d368:	f843 2b04 	str.w	r2, [r3], #4
 800d36c:	e7d8      	b.n	800d320 <__multiply+0x50>
 800d36e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d372:	f1ba 0f00 	cmp.w	sl, #0
 800d376:	d024      	beq.n	800d3c2 <__multiply+0xf2>
 800d378:	f104 0e14 	add.w	lr, r4, #20
 800d37c:	46a9      	mov	r9, r5
 800d37e:	f04f 0c00 	mov.w	ip, #0
 800d382:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d386:	f8d9 1000 	ldr.w	r1, [r9]
 800d38a:	fa1f fb82 	uxth.w	fp, r2
 800d38e:	b289      	uxth	r1, r1
 800d390:	fb0a 110b 	mla	r1, sl, fp, r1
 800d394:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d398:	f8d9 2000 	ldr.w	r2, [r9]
 800d39c:	4461      	add	r1, ip
 800d39e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d3a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d3aa:	b289      	uxth	r1, r1
 800d3ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3b0:	4577      	cmp	r7, lr
 800d3b2:	f849 1b04 	str.w	r1, [r9], #4
 800d3b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3ba:	d8e2      	bhi.n	800d382 <__multiply+0xb2>
 800d3bc:	9a01      	ldr	r2, [sp, #4]
 800d3be:	f845 c002 	str.w	ip, [r5, r2]
 800d3c2:	9a03      	ldr	r2, [sp, #12]
 800d3c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	f1b9 0f00 	cmp.w	r9, #0
 800d3ce:	d020      	beq.n	800d412 <__multiply+0x142>
 800d3d0:	6829      	ldr	r1, [r5, #0]
 800d3d2:	f104 0c14 	add.w	ip, r4, #20
 800d3d6:	46ae      	mov	lr, r5
 800d3d8:	f04f 0a00 	mov.w	sl, #0
 800d3dc:	f8bc b000 	ldrh.w	fp, [ip]
 800d3e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d3e4:	fb09 220b 	mla	r2, r9, fp, r2
 800d3e8:	4492      	add	sl, r2
 800d3ea:	b289      	uxth	r1, r1
 800d3ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d3f0:	f84e 1b04 	str.w	r1, [lr], #4
 800d3f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d3f8:	f8be 1000 	ldrh.w	r1, [lr]
 800d3fc:	0c12      	lsrs	r2, r2, #16
 800d3fe:	fb09 1102 	mla	r1, r9, r2, r1
 800d402:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d406:	4567      	cmp	r7, ip
 800d408:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d40c:	d8e6      	bhi.n	800d3dc <__multiply+0x10c>
 800d40e:	9a01      	ldr	r2, [sp, #4]
 800d410:	50a9      	str	r1, [r5, r2]
 800d412:	3504      	adds	r5, #4
 800d414:	e79a      	b.n	800d34c <__multiply+0x7c>
 800d416:	3e01      	subs	r6, #1
 800d418:	e79c      	b.n	800d354 <__multiply+0x84>
 800d41a:	bf00      	nop
 800d41c:	08011530 	.word	0x08011530
 800d420:	080115bc 	.word	0x080115bc

0800d424 <__pow5mult>:
 800d424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d428:	4615      	mov	r5, r2
 800d42a:	f012 0203 	ands.w	r2, r2, #3
 800d42e:	4606      	mov	r6, r0
 800d430:	460f      	mov	r7, r1
 800d432:	d007      	beq.n	800d444 <__pow5mult+0x20>
 800d434:	4c25      	ldr	r4, [pc, #148]	; (800d4cc <__pow5mult+0xa8>)
 800d436:	3a01      	subs	r2, #1
 800d438:	2300      	movs	r3, #0
 800d43a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d43e:	f7ff fe51 	bl	800d0e4 <__multadd>
 800d442:	4607      	mov	r7, r0
 800d444:	10ad      	asrs	r5, r5, #2
 800d446:	d03d      	beq.n	800d4c4 <__pow5mult+0xa0>
 800d448:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d44a:	b97c      	cbnz	r4, 800d46c <__pow5mult+0x48>
 800d44c:	2010      	movs	r0, #16
 800d44e:	f7ff fdcd 	bl	800cfec <malloc>
 800d452:	4602      	mov	r2, r0
 800d454:	6270      	str	r0, [r6, #36]	; 0x24
 800d456:	b928      	cbnz	r0, 800d464 <__pow5mult+0x40>
 800d458:	4b1d      	ldr	r3, [pc, #116]	; (800d4d0 <__pow5mult+0xac>)
 800d45a:	481e      	ldr	r0, [pc, #120]	; (800d4d4 <__pow5mult+0xb0>)
 800d45c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d460:	f000 fd2c 	bl	800debc <__assert_func>
 800d464:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d468:	6004      	str	r4, [r0, #0]
 800d46a:	60c4      	str	r4, [r0, #12]
 800d46c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d470:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d474:	b94c      	cbnz	r4, 800d48a <__pow5mult+0x66>
 800d476:	f240 2171 	movw	r1, #625	; 0x271
 800d47a:	4630      	mov	r0, r6
 800d47c:	f7ff ff12 	bl	800d2a4 <__i2b>
 800d480:	2300      	movs	r3, #0
 800d482:	f8c8 0008 	str.w	r0, [r8, #8]
 800d486:	4604      	mov	r4, r0
 800d488:	6003      	str	r3, [r0, #0]
 800d48a:	f04f 0900 	mov.w	r9, #0
 800d48e:	07eb      	lsls	r3, r5, #31
 800d490:	d50a      	bpl.n	800d4a8 <__pow5mult+0x84>
 800d492:	4639      	mov	r1, r7
 800d494:	4622      	mov	r2, r4
 800d496:	4630      	mov	r0, r6
 800d498:	f7ff ff1a 	bl	800d2d0 <__multiply>
 800d49c:	4639      	mov	r1, r7
 800d49e:	4680      	mov	r8, r0
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f7ff fdfd 	bl	800d0a0 <_Bfree>
 800d4a6:	4647      	mov	r7, r8
 800d4a8:	106d      	asrs	r5, r5, #1
 800d4aa:	d00b      	beq.n	800d4c4 <__pow5mult+0xa0>
 800d4ac:	6820      	ldr	r0, [r4, #0]
 800d4ae:	b938      	cbnz	r0, 800d4c0 <__pow5mult+0x9c>
 800d4b0:	4622      	mov	r2, r4
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f7ff ff0b 	bl	800d2d0 <__multiply>
 800d4ba:	6020      	str	r0, [r4, #0]
 800d4bc:	f8c0 9000 	str.w	r9, [r0]
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	e7e4      	b.n	800d48e <__pow5mult+0x6a>
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ca:	bf00      	nop
 800d4cc:	08011708 	.word	0x08011708
 800d4d0:	080114be 	.word	0x080114be
 800d4d4:	080115bc 	.word	0x080115bc

0800d4d8 <__lshift>:
 800d4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4dc:	460c      	mov	r4, r1
 800d4de:	6849      	ldr	r1, [r1, #4]
 800d4e0:	6923      	ldr	r3, [r4, #16]
 800d4e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4e6:	68a3      	ldr	r3, [r4, #8]
 800d4e8:	4607      	mov	r7, r0
 800d4ea:	4691      	mov	r9, r2
 800d4ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4f0:	f108 0601 	add.w	r6, r8, #1
 800d4f4:	42b3      	cmp	r3, r6
 800d4f6:	db0b      	blt.n	800d510 <__lshift+0x38>
 800d4f8:	4638      	mov	r0, r7
 800d4fa:	f7ff fd91 	bl	800d020 <_Balloc>
 800d4fe:	4605      	mov	r5, r0
 800d500:	b948      	cbnz	r0, 800d516 <__lshift+0x3e>
 800d502:	4602      	mov	r2, r0
 800d504:	4b2a      	ldr	r3, [pc, #168]	; (800d5b0 <__lshift+0xd8>)
 800d506:	482b      	ldr	r0, [pc, #172]	; (800d5b4 <__lshift+0xdc>)
 800d508:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d50c:	f000 fcd6 	bl	800debc <__assert_func>
 800d510:	3101      	adds	r1, #1
 800d512:	005b      	lsls	r3, r3, #1
 800d514:	e7ee      	b.n	800d4f4 <__lshift+0x1c>
 800d516:	2300      	movs	r3, #0
 800d518:	f100 0114 	add.w	r1, r0, #20
 800d51c:	f100 0210 	add.w	r2, r0, #16
 800d520:	4618      	mov	r0, r3
 800d522:	4553      	cmp	r3, sl
 800d524:	db37      	blt.n	800d596 <__lshift+0xbe>
 800d526:	6920      	ldr	r0, [r4, #16]
 800d528:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d52c:	f104 0314 	add.w	r3, r4, #20
 800d530:	f019 091f 	ands.w	r9, r9, #31
 800d534:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d538:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d53c:	d02f      	beq.n	800d59e <__lshift+0xc6>
 800d53e:	f1c9 0e20 	rsb	lr, r9, #32
 800d542:	468a      	mov	sl, r1
 800d544:	f04f 0c00 	mov.w	ip, #0
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	fa02 f209 	lsl.w	r2, r2, r9
 800d54e:	ea42 020c 	orr.w	r2, r2, ip
 800d552:	f84a 2b04 	str.w	r2, [sl], #4
 800d556:	f853 2b04 	ldr.w	r2, [r3], #4
 800d55a:	4298      	cmp	r0, r3
 800d55c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d560:	d8f2      	bhi.n	800d548 <__lshift+0x70>
 800d562:	1b03      	subs	r3, r0, r4
 800d564:	3b15      	subs	r3, #21
 800d566:	f023 0303 	bic.w	r3, r3, #3
 800d56a:	3304      	adds	r3, #4
 800d56c:	f104 0215 	add.w	r2, r4, #21
 800d570:	4290      	cmp	r0, r2
 800d572:	bf38      	it	cc
 800d574:	2304      	movcc	r3, #4
 800d576:	f841 c003 	str.w	ip, [r1, r3]
 800d57a:	f1bc 0f00 	cmp.w	ip, #0
 800d57e:	d001      	beq.n	800d584 <__lshift+0xac>
 800d580:	f108 0602 	add.w	r6, r8, #2
 800d584:	3e01      	subs	r6, #1
 800d586:	4638      	mov	r0, r7
 800d588:	612e      	str	r6, [r5, #16]
 800d58a:	4621      	mov	r1, r4
 800d58c:	f7ff fd88 	bl	800d0a0 <_Bfree>
 800d590:	4628      	mov	r0, r5
 800d592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d596:	f842 0f04 	str.w	r0, [r2, #4]!
 800d59a:	3301      	adds	r3, #1
 800d59c:	e7c1      	b.n	800d522 <__lshift+0x4a>
 800d59e:	3904      	subs	r1, #4
 800d5a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5a8:	4298      	cmp	r0, r3
 800d5aa:	d8f9      	bhi.n	800d5a0 <__lshift+0xc8>
 800d5ac:	e7ea      	b.n	800d584 <__lshift+0xac>
 800d5ae:	bf00      	nop
 800d5b0:	08011530 	.word	0x08011530
 800d5b4:	080115bc 	.word	0x080115bc

0800d5b8 <__mcmp>:
 800d5b8:	b530      	push	{r4, r5, lr}
 800d5ba:	6902      	ldr	r2, [r0, #16]
 800d5bc:	690c      	ldr	r4, [r1, #16]
 800d5be:	1b12      	subs	r2, r2, r4
 800d5c0:	d10e      	bne.n	800d5e0 <__mcmp+0x28>
 800d5c2:	f100 0314 	add.w	r3, r0, #20
 800d5c6:	3114      	adds	r1, #20
 800d5c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d5cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d5d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d5d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d5d8:	42a5      	cmp	r5, r4
 800d5da:	d003      	beq.n	800d5e4 <__mcmp+0x2c>
 800d5dc:	d305      	bcc.n	800d5ea <__mcmp+0x32>
 800d5de:	2201      	movs	r2, #1
 800d5e0:	4610      	mov	r0, r2
 800d5e2:	bd30      	pop	{r4, r5, pc}
 800d5e4:	4283      	cmp	r3, r0
 800d5e6:	d3f3      	bcc.n	800d5d0 <__mcmp+0x18>
 800d5e8:	e7fa      	b.n	800d5e0 <__mcmp+0x28>
 800d5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5ee:	e7f7      	b.n	800d5e0 <__mcmp+0x28>

0800d5f0 <__mdiff>:
 800d5f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	4690      	mov	r8, r2
 800d5fe:	f7ff ffdb 	bl	800d5b8 <__mcmp>
 800d602:	1e05      	subs	r5, r0, #0
 800d604:	d110      	bne.n	800d628 <__mdiff+0x38>
 800d606:	4629      	mov	r1, r5
 800d608:	4630      	mov	r0, r6
 800d60a:	f7ff fd09 	bl	800d020 <_Balloc>
 800d60e:	b930      	cbnz	r0, 800d61e <__mdiff+0x2e>
 800d610:	4b3a      	ldr	r3, [pc, #232]	; (800d6fc <__mdiff+0x10c>)
 800d612:	4602      	mov	r2, r0
 800d614:	f240 2132 	movw	r1, #562	; 0x232
 800d618:	4839      	ldr	r0, [pc, #228]	; (800d700 <__mdiff+0x110>)
 800d61a:	f000 fc4f 	bl	800debc <__assert_func>
 800d61e:	2301      	movs	r3, #1
 800d620:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d628:	bfa4      	itt	ge
 800d62a:	4643      	movge	r3, r8
 800d62c:	46a0      	movge	r8, r4
 800d62e:	4630      	mov	r0, r6
 800d630:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d634:	bfa6      	itte	ge
 800d636:	461c      	movge	r4, r3
 800d638:	2500      	movge	r5, #0
 800d63a:	2501      	movlt	r5, #1
 800d63c:	f7ff fcf0 	bl	800d020 <_Balloc>
 800d640:	b920      	cbnz	r0, 800d64c <__mdiff+0x5c>
 800d642:	4b2e      	ldr	r3, [pc, #184]	; (800d6fc <__mdiff+0x10c>)
 800d644:	4602      	mov	r2, r0
 800d646:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d64a:	e7e5      	b.n	800d618 <__mdiff+0x28>
 800d64c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d650:	6926      	ldr	r6, [r4, #16]
 800d652:	60c5      	str	r5, [r0, #12]
 800d654:	f104 0914 	add.w	r9, r4, #20
 800d658:	f108 0514 	add.w	r5, r8, #20
 800d65c:	f100 0e14 	add.w	lr, r0, #20
 800d660:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d664:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d668:	f108 0210 	add.w	r2, r8, #16
 800d66c:	46f2      	mov	sl, lr
 800d66e:	2100      	movs	r1, #0
 800d670:	f859 3b04 	ldr.w	r3, [r9], #4
 800d674:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d678:	fa1f f883 	uxth.w	r8, r3
 800d67c:	fa11 f18b 	uxtah	r1, r1, fp
 800d680:	0c1b      	lsrs	r3, r3, #16
 800d682:	eba1 0808 	sub.w	r8, r1, r8
 800d686:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d68a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d68e:	fa1f f888 	uxth.w	r8, r8
 800d692:	1419      	asrs	r1, r3, #16
 800d694:	454e      	cmp	r6, r9
 800d696:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d69a:	f84a 3b04 	str.w	r3, [sl], #4
 800d69e:	d8e7      	bhi.n	800d670 <__mdiff+0x80>
 800d6a0:	1b33      	subs	r3, r6, r4
 800d6a2:	3b15      	subs	r3, #21
 800d6a4:	f023 0303 	bic.w	r3, r3, #3
 800d6a8:	3304      	adds	r3, #4
 800d6aa:	3415      	adds	r4, #21
 800d6ac:	42a6      	cmp	r6, r4
 800d6ae:	bf38      	it	cc
 800d6b0:	2304      	movcc	r3, #4
 800d6b2:	441d      	add	r5, r3
 800d6b4:	4473      	add	r3, lr
 800d6b6:	469e      	mov	lr, r3
 800d6b8:	462e      	mov	r6, r5
 800d6ba:	4566      	cmp	r6, ip
 800d6bc:	d30e      	bcc.n	800d6dc <__mdiff+0xec>
 800d6be:	f10c 0203 	add.w	r2, ip, #3
 800d6c2:	1b52      	subs	r2, r2, r5
 800d6c4:	f022 0203 	bic.w	r2, r2, #3
 800d6c8:	3d03      	subs	r5, #3
 800d6ca:	45ac      	cmp	ip, r5
 800d6cc:	bf38      	it	cc
 800d6ce:	2200      	movcc	r2, #0
 800d6d0:	441a      	add	r2, r3
 800d6d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d6d6:	b17b      	cbz	r3, 800d6f8 <__mdiff+0x108>
 800d6d8:	6107      	str	r7, [r0, #16]
 800d6da:	e7a3      	b.n	800d624 <__mdiff+0x34>
 800d6dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d6e0:	fa11 f288 	uxtah	r2, r1, r8
 800d6e4:	1414      	asrs	r4, r2, #16
 800d6e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d6ea:	b292      	uxth	r2, r2
 800d6ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d6f0:	f84e 2b04 	str.w	r2, [lr], #4
 800d6f4:	1421      	asrs	r1, r4, #16
 800d6f6:	e7e0      	b.n	800d6ba <__mdiff+0xca>
 800d6f8:	3f01      	subs	r7, #1
 800d6fa:	e7ea      	b.n	800d6d2 <__mdiff+0xe2>
 800d6fc:	08011530 	.word	0x08011530
 800d700:	080115bc 	.word	0x080115bc

0800d704 <__ulp>:
 800d704:	b082      	sub	sp, #8
 800d706:	ed8d 0b00 	vstr	d0, [sp]
 800d70a:	9b01      	ldr	r3, [sp, #4]
 800d70c:	4912      	ldr	r1, [pc, #72]	; (800d758 <__ulp+0x54>)
 800d70e:	4019      	ands	r1, r3
 800d710:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d714:	2900      	cmp	r1, #0
 800d716:	dd05      	ble.n	800d724 <__ulp+0x20>
 800d718:	2200      	movs	r2, #0
 800d71a:	460b      	mov	r3, r1
 800d71c:	ec43 2b10 	vmov	d0, r2, r3
 800d720:	b002      	add	sp, #8
 800d722:	4770      	bx	lr
 800d724:	4249      	negs	r1, r1
 800d726:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d72a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d72e:	f04f 0200 	mov.w	r2, #0
 800d732:	f04f 0300 	mov.w	r3, #0
 800d736:	da04      	bge.n	800d742 <__ulp+0x3e>
 800d738:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d73c:	fa41 f300 	asr.w	r3, r1, r0
 800d740:	e7ec      	b.n	800d71c <__ulp+0x18>
 800d742:	f1a0 0114 	sub.w	r1, r0, #20
 800d746:	291e      	cmp	r1, #30
 800d748:	bfda      	itte	le
 800d74a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d74e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d752:	2101      	movgt	r1, #1
 800d754:	460a      	mov	r2, r1
 800d756:	e7e1      	b.n	800d71c <__ulp+0x18>
 800d758:	7ff00000 	.word	0x7ff00000

0800d75c <__b2d>:
 800d75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75e:	6905      	ldr	r5, [r0, #16]
 800d760:	f100 0714 	add.w	r7, r0, #20
 800d764:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d768:	1f2e      	subs	r6, r5, #4
 800d76a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d76e:	4620      	mov	r0, r4
 800d770:	f7ff fd48 	bl	800d204 <__hi0bits>
 800d774:	f1c0 0320 	rsb	r3, r0, #32
 800d778:	280a      	cmp	r0, #10
 800d77a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d7f8 <__b2d+0x9c>
 800d77e:	600b      	str	r3, [r1, #0]
 800d780:	dc14      	bgt.n	800d7ac <__b2d+0x50>
 800d782:	f1c0 0e0b 	rsb	lr, r0, #11
 800d786:	fa24 f10e 	lsr.w	r1, r4, lr
 800d78a:	42b7      	cmp	r7, r6
 800d78c:	ea41 030c 	orr.w	r3, r1, ip
 800d790:	bf34      	ite	cc
 800d792:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d796:	2100      	movcs	r1, #0
 800d798:	3015      	adds	r0, #21
 800d79a:	fa04 f000 	lsl.w	r0, r4, r0
 800d79e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d7a2:	ea40 0201 	orr.w	r2, r0, r1
 800d7a6:	ec43 2b10 	vmov	d0, r2, r3
 800d7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7ac:	42b7      	cmp	r7, r6
 800d7ae:	bf3a      	itte	cc
 800d7b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d7b4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d7b8:	2100      	movcs	r1, #0
 800d7ba:	380b      	subs	r0, #11
 800d7bc:	d017      	beq.n	800d7ee <__b2d+0x92>
 800d7be:	f1c0 0c20 	rsb	ip, r0, #32
 800d7c2:	fa04 f500 	lsl.w	r5, r4, r0
 800d7c6:	42be      	cmp	r6, r7
 800d7c8:	fa21 f40c 	lsr.w	r4, r1, ip
 800d7cc:	ea45 0504 	orr.w	r5, r5, r4
 800d7d0:	bf8c      	ite	hi
 800d7d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d7d6:	2400      	movls	r4, #0
 800d7d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d7dc:	fa01 f000 	lsl.w	r0, r1, r0
 800d7e0:	fa24 f40c 	lsr.w	r4, r4, ip
 800d7e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d7e8:	ea40 0204 	orr.w	r2, r0, r4
 800d7ec:	e7db      	b.n	800d7a6 <__b2d+0x4a>
 800d7ee:	ea44 030c 	orr.w	r3, r4, ip
 800d7f2:	460a      	mov	r2, r1
 800d7f4:	e7d7      	b.n	800d7a6 <__b2d+0x4a>
 800d7f6:	bf00      	nop
 800d7f8:	3ff00000 	.word	0x3ff00000

0800d7fc <__d2b>:
 800d7fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d800:	4689      	mov	r9, r1
 800d802:	2101      	movs	r1, #1
 800d804:	ec57 6b10 	vmov	r6, r7, d0
 800d808:	4690      	mov	r8, r2
 800d80a:	f7ff fc09 	bl	800d020 <_Balloc>
 800d80e:	4604      	mov	r4, r0
 800d810:	b930      	cbnz	r0, 800d820 <__d2b+0x24>
 800d812:	4602      	mov	r2, r0
 800d814:	4b25      	ldr	r3, [pc, #148]	; (800d8ac <__d2b+0xb0>)
 800d816:	4826      	ldr	r0, [pc, #152]	; (800d8b0 <__d2b+0xb4>)
 800d818:	f240 310a 	movw	r1, #778	; 0x30a
 800d81c:	f000 fb4e 	bl	800debc <__assert_func>
 800d820:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d824:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d828:	bb35      	cbnz	r5, 800d878 <__d2b+0x7c>
 800d82a:	2e00      	cmp	r6, #0
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	d028      	beq.n	800d882 <__d2b+0x86>
 800d830:	4668      	mov	r0, sp
 800d832:	9600      	str	r6, [sp, #0]
 800d834:	f7ff fd06 	bl	800d244 <__lo0bits>
 800d838:	9900      	ldr	r1, [sp, #0]
 800d83a:	b300      	cbz	r0, 800d87e <__d2b+0x82>
 800d83c:	9a01      	ldr	r2, [sp, #4]
 800d83e:	f1c0 0320 	rsb	r3, r0, #32
 800d842:	fa02 f303 	lsl.w	r3, r2, r3
 800d846:	430b      	orrs	r3, r1
 800d848:	40c2      	lsrs	r2, r0
 800d84a:	6163      	str	r3, [r4, #20]
 800d84c:	9201      	str	r2, [sp, #4]
 800d84e:	9b01      	ldr	r3, [sp, #4]
 800d850:	61a3      	str	r3, [r4, #24]
 800d852:	2b00      	cmp	r3, #0
 800d854:	bf14      	ite	ne
 800d856:	2202      	movne	r2, #2
 800d858:	2201      	moveq	r2, #1
 800d85a:	6122      	str	r2, [r4, #16]
 800d85c:	b1d5      	cbz	r5, 800d894 <__d2b+0x98>
 800d85e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d862:	4405      	add	r5, r0
 800d864:	f8c9 5000 	str.w	r5, [r9]
 800d868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d86c:	f8c8 0000 	str.w	r0, [r8]
 800d870:	4620      	mov	r0, r4
 800d872:	b003      	add	sp, #12
 800d874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d87c:	e7d5      	b.n	800d82a <__d2b+0x2e>
 800d87e:	6161      	str	r1, [r4, #20]
 800d880:	e7e5      	b.n	800d84e <__d2b+0x52>
 800d882:	a801      	add	r0, sp, #4
 800d884:	f7ff fcde 	bl	800d244 <__lo0bits>
 800d888:	9b01      	ldr	r3, [sp, #4]
 800d88a:	6163      	str	r3, [r4, #20]
 800d88c:	2201      	movs	r2, #1
 800d88e:	6122      	str	r2, [r4, #16]
 800d890:	3020      	adds	r0, #32
 800d892:	e7e3      	b.n	800d85c <__d2b+0x60>
 800d894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d89c:	f8c9 0000 	str.w	r0, [r9]
 800d8a0:	6918      	ldr	r0, [r3, #16]
 800d8a2:	f7ff fcaf 	bl	800d204 <__hi0bits>
 800d8a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d8aa:	e7df      	b.n	800d86c <__d2b+0x70>
 800d8ac:	08011530 	.word	0x08011530
 800d8b0:	080115bc 	.word	0x080115bc

0800d8b4 <__ratio>:
 800d8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b8:	4688      	mov	r8, r1
 800d8ba:	4669      	mov	r1, sp
 800d8bc:	4681      	mov	r9, r0
 800d8be:	f7ff ff4d 	bl	800d75c <__b2d>
 800d8c2:	a901      	add	r1, sp, #4
 800d8c4:	4640      	mov	r0, r8
 800d8c6:	ec55 4b10 	vmov	r4, r5, d0
 800d8ca:	f7ff ff47 	bl	800d75c <__b2d>
 800d8ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d8d6:	eba3 0c02 	sub.w	ip, r3, r2
 800d8da:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d8de:	1a9b      	subs	r3, r3, r2
 800d8e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d8e4:	ec51 0b10 	vmov	r0, r1, d0
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	bfd6      	itet	le
 800d8ec:	460a      	movle	r2, r1
 800d8ee:	462a      	movgt	r2, r5
 800d8f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d8f4:	468b      	mov	fp, r1
 800d8f6:	462f      	mov	r7, r5
 800d8f8:	bfd4      	ite	le
 800d8fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d8fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d902:	4620      	mov	r0, r4
 800d904:	ee10 2a10 	vmov	r2, s0
 800d908:	465b      	mov	r3, fp
 800d90a:	4639      	mov	r1, r7
 800d90c:	f7f2 ffa6 	bl	800085c <__aeabi_ddiv>
 800d910:	ec41 0b10 	vmov	d0, r0, r1
 800d914:	b003      	add	sp, #12
 800d916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d91a <__copybits>:
 800d91a:	3901      	subs	r1, #1
 800d91c:	b570      	push	{r4, r5, r6, lr}
 800d91e:	1149      	asrs	r1, r1, #5
 800d920:	6914      	ldr	r4, [r2, #16]
 800d922:	3101      	adds	r1, #1
 800d924:	f102 0314 	add.w	r3, r2, #20
 800d928:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d92c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d930:	1f05      	subs	r5, r0, #4
 800d932:	42a3      	cmp	r3, r4
 800d934:	d30c      	bcc.n	800d950 <__copybits+0x36>
 800d936:	1aa3      	subs	r3, r4, r2
 800d938:	3b11      	subs	r3, #17
 800d93a:	f023 0303 	bic.w	r3, r3, #3
 800d93e:	3211      	adds	r2, #17
 800d940:	42a2      	cmp	r2, r4
 800d942:	bf88      	it	hi
 800d944:	2300      	movhi	r3, #0
 800d946:	4418      	add	r0, r3
 800d948:	2300      	movs	r3, #0
 800d94a:	4288      	cmp	r0, r1
 800d94c:	d305      	bcc.n	800d95a <__copybits+0x40>
 800d94e:	bd70      	pop	{r4, r5, r6, pc}
 800d950:	f853 6b04 	ldr.w	r6, [r3], #4
 800d954:	f845 6f04 	str.w	r6, [r5, #4]!
 800d958:	e7eb      	b.n	800d932 <__copybits+0x18>
 800d95a:	f840 3b04 	str.w	r3, [r0], #4
 800d95e:	e7f4      	b.n	800d94a <__copybits+0x30>

0800d960 <__any_on>:
 800d960:	f100 0214 	add.w	r2, r0, #20
 800d964:	6900      	ldr	r0, [r0, #16]
 800d966:	114b      	asrs	r3, r1, #5
 800d968:	4298      	cmp	r0, r3
 800d96a:	b510      	push	{r4, lr}
 800d96c:	db11      	blt.n	800d992 <__any_on+0x32>
 800d96e:	dd0a      	ble.n	800d986 <__any_on+0x26>
 800d970:	f011 011f 	ands.w	r1, r1, #31
 800d974:	d007      	beq.n	800d986 <__any_on+0x26>
 800d976:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d97a:	fa24 f001 	lsr.w	r0, r4, r1
 800d97e:	fa00 f101 	lsl.w	r1, r0, r1
 800d982:	428c      	cmp	r4, r1
 800d984:	d10b      	bne.n	800d99e <__any_on+0x3e>
 800d986:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d803      	bhi.n	800d996 <__any_on+0x36>
 800d98e:	2000      	movs	r0, #0
 800d990:	bd10      	pop	{r4, pc}
 800d992:	4603      	mov	r3, r0
 800d994:	e7f7      	b.n	800d986 <__any_on+0x26>
 800d996:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d99a:	2900      	cmp	r1, #0
 800d99c:	d0f5      	beq.n	800d98a <__any_on+0x2a>
 800d99e:	2001      	movs	r0, #1
 800d9a0:	e7f6      	b.n	800d990 <__any_on+0x30>

0800d9a2 <_calloc_r>:
 800d9a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9a4:	fba1 2402 	umull	r2, r4, r1, r2
 800d9a8:	b94c      	cbnz	r4, 800d9be <_calloc_r+0x1c>
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	9201      	str	r2, [sp, #4]
 800d9ae:	f000 f87b 	bl	800daa8 <_malloc_r>
 800d9b2:	9a01      	ldr	r2, [sp, #4]
 800d9b4:	4605      	mov	r5, r0
 800d9b6:	b930      	cbnz	r0, 800d9c6 <_calloc_r+0x24>
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	b003      	add	sp, #12
 800d9bc:	bd30      	pop	{r4, r5, pc}
 800d9be:	220c      	movs	r2, #12
 800d9c0:	6002      	str	r2, [r0, #0]
 800d9c2:	2500      	movs	r5, #0
 800d9c4:	e7f8      	b.n	800d9b8 <_calloc_r+0x16>
 800d9c6:	4621      	mov	r1, r4
 800d9c8:	f7fc fbce 	bl	800a168 <memset>
 800d9cc:	e7f4      	b.n	800d9b8 <_calloc_r+0x16>
	...

0800d9d0 <_free_r>:
 800d9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9d2:	2900      	cmp	r1, #0
 800d9d4:	d044      	beq.n	800da60 <_free_r+0x90>
 800d9d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9da:	9001      	str	r0, [sp, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f1a1 0404 	sub.w	r4, r1, #4
 800d9e2:	bfb8      	it	lt
 800d9e4:	18e4      	addlt	r4, r4, r3
 800d9e6:	f000 fab3 	bl	800df50 <__malloc_lock>
 800d9ea:	4a1e      	ldr	r2, [pc, #120]	; (800da64 <_free_r+0x94>)
 800d9ec:	9801      	ldr	r0, [sp, #4]
 800d9ee:	6813      	ldr	r3, [r2, #0]
 800d9f0:	b933      	cbnz	r3, 800da00 <_free_r+0x30>
 800d9f2:	6063      	str	r3, [r4, #4]
 800d9f4:	6014      	str	r4, [r2, #0]
 800d9f6:	b003      	add	sp, #12
 800d9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9fc:	f000 baae 	b.w	800df5c <__malloc_unlock>
 800da00:	42a3      	cmp	r3, r4
 800da02:	d908      	bls.n	800da16 <_free_r+0x46>
 800da04:	6825      	ldr	r5, [r4, #0]
 800da06:	1961      	adds	r1, r4, r5
 800da08:	428b      	cmp	r3, r1
 800da0a:	bf01      	itttt	eq
 800da0c:	6819      	ldreq	r1, [r3, #0]
 800da0e:	685b      	ldreq	r3, [r3, #4]
 800da10:	1949      	addeq	r1, r1, r5
 800da12:	6021      	streq	r1, [r4, #0]
 800da14:	e7ed      	b.n	800d9f2 <_free_r+0x22>
 800da16:	461a      	mov	r2, r3
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	b10b      	cbz	r3, 800da20 <_free_r+0x50>
 800da1c:	42a3      	cmp	r3, r4
 800da1e:	d9fa      	bls.n	800da16 <_free_r+0x46>
 800da20:	6811      	ldr	r1, [r2, #0]
 800da22:	1855      	adds	r5, r2, r1
 800da24:	42a5      	cmp	r5, r4
 800da26:	d10b      	bne.n	800da40 <_free_r+0x70>
 800da28:	6824      	ldr	r4, [r4, #0]
 800da2a:	4421      	add	r1, r4
 800da2c:	1854      	adds	r4, r2, r1
 800da2e:	42a3      	cmp	r3, r4
 800da30:	6011      	str	r1, [r2, #0]
 800da32:	d1e0      	bne.n	800d9f6 <_free_r+0x26>
 800da34:	681c      	ldr	r4, [r3, #0]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	6053      	str	r3, [r2, #4]
 800da3a:	4421      	add	r1, r4
 800da3c:	6011      	str	r1, [r2, #0]
 800da3e:	e7da      	b.n	800d9f6 <_free_r+0x26>
 800da40:	d902      	bls.n	800da48 <_free_r+0x78>
 800da42:	230c      	movs	r3, #12
 800da44:	6003      	str	r3, [r0, #0]
 800da46:	e7d6      	b.n	800d9f6 <_free_r+0x26>
 800da48:	6825      	ldr	r5, [r4, #0]
 800da4a:	1961      	adds	r1, r4, r5
 800da4c:	428b      	cmp	r3, r1
 800da4e:	bf04      	itt	eq
 800da50:	6819      	ldreq	r1, [r3, #0]
 800da52:	685b      	ldreq	r3, [r3, #4]
 800da54:	6063      	str	r3, [r4, #4]
 800da56:	bf04      	itt	eq
 800da58:	1949      	addeq	r1, r1, r5
 800da5a:	6021      	streq	r1, [r4, #0]
 800da5c:	6054      	str	r4, [r2, #4]
 800da5e:	e7ca      	b.n	800d9f6 <_free_r+0x26>
 800da60:	b003      	add	sp, #12
 800da62:	bd30      	pop	{r4, r5, pc}
 800da64:	20005144 	.word	0x20005144

0800da68 <sbrk_aligned>:
 800da68:	b570      	push	{r4, r5, r6, lr}
 800da6a:	4e0e      	ldr	r6, [pc, #56]	; (800daa4 <sbrk_aligned+0x3c>)
 800da6c:	460c      	mov	r4, r1
 800da6e:	6831      	ldr	r1, [r6, #0]
 800da70:	4605      	mov	r5, r0
 800da72:	b911      	cbnz	r1, 800da7a <sbrk_aligned+0x12>
 800da74:	f000 f9f0 	bl	800de58 <_sbrk_r>
 800da78:	6030      	str	r0, [r6, #0]
 800da7a:	4621      	mov	r1, r4
 800da7c:	4628      	mov	r0, r5
 800da7e:	f000 f9eb 	bl	800de58 <_sbrk_r>
 800da82:	1c43      	adds	r3, r0, #1
 800da84:	d00a      	beq.n	800da9c <sbrk_aligned+0x34>
 800da86:	1cc4      	adds	r4, r0, #3
 800da88:	f024 0403 	bic.w	r4, r4, #3
 800da8c:	42a0      	cmp	r0, r4
 800da8e:	d007      	beq.n	800daa0 <sbrk_aligned+0x38>
 800da90:	1a21      	subs	r1, r4, r0
 800da92:	4628      	mov	r0, r5
 800da94:	f000 f9e0 	bl	800de58 <_sbrk_r>
 800da98:	3001      	adds	r0, #1
 800da9a:	d101      	bne.n	800daa0 <sbrk_aligned+0x38>
 800da9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800daa0:	4620      	mov	r0, r4
 800daa2:	bd70      	pop	{r4, r5, r6, pc}
 800daa4:	20005148 	.word	0x20005148

0800daa8 <_malloc_r>:
 800daa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daac:	1ccd      	adds	r5, r1, #3
 800daae:	f025 0503 	bic.w	r5, r5, #3
 800dab2:	3508      	adds	r5, #8
 800dab4:	2d0c      	cmp	r5, #12
 800dab6:	bf38      	it	cc
 800dab8:	250c      	movcc	r5, #12
 800daba:	2d00      	cmp	r5, #0
 800dabc:	4607      	mov	r7, r0
 800dabe:	db01      	blt.n	800dac4 <_malloc_r+0x1c>
 800dac0:	42a9      	cmp	r1, r5
 800dac2:	d905      	bls.n	800dad0 <_malloc_r+0x28>
 800dac4:	230c      	movs	r3, #12
 800dac6:	603b      	str	r3, [r7, #0]
 800dac8:	2600      	movs	r6, #0
 800daca:	4630      	mov	r0, r6
 800dacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad0:	4e2e      	ldr	r6, [pc, #184]	; (800db8c <_malloc_r+0xe4>)
 800dad2:	f000 fa3d 	bl	800df50 <__malloc_lock>
 800dad6:	6833      	ldr	r3, [r6, #0]
 800dad8:	461c      	mov	r4, r3
 800dada:	bb34      	cbnz	r4, 800db2a <_malloc_r+0x82>
 800dadc:	4629      	mov	r1, r5
 800dade:	4638      	mov	r0, r7
 800dae0:	f7ff ffc2 	bl	800da68 <sbrk_aligned>
 800dae4:	1c43      	adds	r3, r0, #1
 800dae6:	4604      	mov	r4, r0
 800dae8:	d14d      	bne.n	800db86 <_malloc_r+0xde>
 800daea:	6834      	ldr	r4, [r6, #0]
 800daec:	4626      	mov	r6, r4
 800daee:	2e00      	cmp	r6, #0
 800daf0:	d140      	bne.n	800db74 <_malloc_r+0xcc>
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	4631      	mov	r1, r6
 800daf6:	4638      	mov	r0, r7
 800daf8:	eb04 0803 	add.w	r8, r4, r3
 800dafc:	f000 f9ac 	bl	800de58 <_sbrk_r>
 800db00:	4580      	cmp	r8, r0
 800db02:	d13a      	bne.n	800db7a <_malloc_r+0xd2>
 800db04:	6821      	ldr	r1, [r4, #0]
 800db06:	3503      	adds	r5, #3
 800db08:	1a6d      	subs	r5, r5, r1
 800db0a:	f025 0503 	bic.w	r5, r5, #3
 800db0e:	3508      	adds	r5, #8
 800db10:	2d0c      	cmp	r5, #12
 800db12:	bf38      	it	cc
 800db14:	250c      	movcc	r5, #12
 800db16:	4629      	mov	r1, r5
 800db18:	4638      	mov	r0, r7
 800db1a:	f7ff ffa5 	bl	800da68 <sbrk_aligned>
 800db1e:	3001      	adds	r0, #1
 800db20:	d02b      	beq.n	800db7a <_malloc_r+0xd2>
 800db22:	6823      	ldr	r3, [r4, #0]
 800db24:	442b      	add	r3, r5
 800db26:	6023      	str	r3, [r4, #0]
 800db28:	e00e      	b.n	800db48 <_malloc_r+0xa0>
 800db2a:	6822      	ldr	r2, [r4, #0]
 800db2c:	1b52      	subs	r2, r2, r5
 800db2e:	d41e      	bmi.n	800db6e <_malloc_r+0xc6>
 800db30:	2a0b      	cmp	r2, #11
 800db32:	d916      	bls.n	800db62 <_malloc_r+0xba>
 800db34:	1961      	adds	r1, r4, r5
 800db36:	42a3      	cmp	r3, r4
 800db38:	6025      	str	r5, [r4, #0]
 800db3a:	bf18      	it	ne
 800db3c:	6059      	strne	r1, [r3, #4]
 800db3e:	6863      	ldr	r3, [r4, #4]
 800db40:	bf08      	it	eq
 800db42:	6031      	streq	r1, [r6, #0]
 800db44:	5162      	str	r2, [r4, r5]
 800db46:	604b      	str	r3, [r1, #4]
 800db48:	4638      	mov	r0, r7
 800db4a:	f104 060b 	add.w	r6, r4, #11
 800db4e:	f000 fa05 	bl	800df5c <__malloc_unlock>
 800db52:	f026 0607 	bic.w	r6, r6, #7
 800db56:	1d23      	adds	r3, r4, #4
 800db58:	1af2      	subs	r2, r6, r3
 800db5a:	d0b6      	beq.n	800daca <_malloc_r+0x22>
 800db5c:	1b9b      	subs	r3, r3, r6
 800db5e:	50a3      	str	r3, [r4, r2]
 800db60:	e7b3      	b.n	800daca <_malloc_r+0x22>
 800db62:	6862      	ldr	r2, [r4, #4]
 800db64:	42a3      	cmp	r3, r4
 800db66:	bf0c      	ite	eq
 800db68:	6032      	streq	r2, [r6, #0]
 800db6a:	605a      	strne	r2, [r3, #4]
 800db6c:	e7ec      	b.n	800db48 <_malloc_r+0xa0>
 800db6e:	4623      	mov	r3, r4
 800db70:	6864      	ldr	r4, [r4, #4]
 800db72:	e7b2      	b.n	800dada <_malloc_r+0x32>
 800db74:	4634      	mov	r4, r6
 800db76:	6876      	ldr	r6, [r6, #4]
 800db78:	e7b9      	b.n	800daee <_malloc_r+0x46>
 800db7a:	230c      	movs	r3, #12
 800db7c:	603b      	str	r3, [r7, #0]
 800db7e:	4638      	mov	r0, r7
 800db80:	f000 f9ec 	bl	800df5c <__malloc_unlock>
 800db84:	e7a1      	b.n	800daca <_malloc_r+0x22>
 800db86:	6025      	str	r5, [r4, #0]
 800db88:	e7de      	b.n	800db48 <_malloc_r+0xa0>
 800db8a:	bf00      	nop
 800db8c:	20005144 	.word	0x20005144

0800db90 <__ssputs_r>:
 800db90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db94:	688e      	ldr	r6, [r1, #8]
 800db96:	429e      	cmp	r6, r3
 800db98:	4682      	mov	sl, r0
 800db9a:	460c      	mov	r4, r1
 800db9c:	4690      	mov	r8, r2
 800db9e:	461f      	mov	r7, r3
 800dba0:	d838      	bhi.n	800dc14 <__ssputs_r+0x84>
 800dba2:	898a      	ldrh	r2, [r1, #12]
 800dba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dba8:	d032      	beq.n	800dc10 <__ssputs_r+0x80>
 800dbaa:	6825      	ldr	r5, [r4, #0]
 800dbac:	6909      	ldr	r1, [r1, #16]
 800dbae:	eba5 0901 	sub.w	r9, r5, r1
 800dbb2:	6965      	ldr	r5, [r4, #20]
 800dbb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	444b      	add	r3, r9
 800dbc0:	106d      	asrs	r5, r5, #1
 800dbc2:	429d      	cmp	r5, r3
 800dbc4:	bf38      	it	cc
 800dbc6:	461d      	movcc	r5, r3
 800dbc8:	0553      	lsls	r3, r2, #21
 800dbca:	d531      	bpl.n	800dc30 <__ssputs_r+0xa0>
 800dbcc:	4629      	mov	r1, r5
 800dbce:	f7ff ff6b 	bl	800daa8 <_malloc_r>
 800dbd2:	4606      	mov	r6, r0
 800dbd4:	b950      	cbnz	r0, 800dbec <__ssputs_r+0x5c>
 800dbd6:	230c      	movs	r3, #12
 800dbd8:	f8ca 3000 	str.w	r3, [sl]
 800dbdc:	89a3      	ldrh	r3, [r4, #12]
 800dbde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbe2:	81a3      	strh	r3, [r4, #12]
 800dbe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbec:	6921      	ldr	r1, [r4, #16]
 800dbee:	464a      	mov	r2, r9
 800dbf0:	f7fc faac 	bl	800a14c <memcpy>
 800dbf4:	89a3      	ldrh	r3, [r4, #12]
 800dbf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbfe:	81a3      	strh	r3, [r4, #12]
 800dc00:	6126      	str	r6, [r4, #16]
 800dc02:	6165      	str	r5, [r4, #20]
 800dc04:	444e      	add	r6, r9
 800dc06:	eba5 0509 	sub.w	r5, r5, r9
 800dc0a:	6026      	str	r6, [r4, #0]
 800dc0c:	60a5      	str	r5, [r4, #8]
 800dc0e:	463e      	mov	r6, r7
 800dc10:	42be      	cmp	r6, r7
 800dc12:	d900      	bls.n	800dc16 <__ssputs_r+0x86>
 800dc14:	463e      	mov	r6, r7
 800dc16:	6820      	ldr	r0, [r4, #0]
 800dc18:	4632      	mov	r2, r6
 800dc1a:	4641      	mov	r1, r8
 800dc1c:	f000 f97e 	bl	800df1c <memmove>
 800dc20:	68a3      	ldr	r3, [r4, #8]
 800dc22:	1b9b      	subs	r3, r3, r6
 800dc24:	60a3      	str	r3, [r4, #8]
 800dc26:	6823      	ldr	r3, [r4, #0]
 800dc28:	4433      	add	r3, r6
 800dc2a:	6023      	str	r3, [r4, #0]
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	e7db      	b.n	800dbe8 <__ssputs_r+0x58>
 800dc30:	462a      	mov	r2, r5
 800dc32:	f000 f999 	bl	800df68 <_realloc_r>
 800dc36:	4606      	mov	r6, r0
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d1e1      	bne.n	800dc00 <__ssputs_r+0x70>
 800dc3c:	6921      	ldr	r1, [r4, #16]
 800dc3e:	4650      	mov	r0, sl
 800dc40:	f7ff fec6 	bl	800d9d0 <_free_r>
 800dc44:	e7c7      	b.n	800dbd6 <__ssputs_r+0x46>
	...

0800dc48 <_svfiprintf_r>:
 800dc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4c:	4698      	mov	r8, r3
 800dc4e:	898b      	ldrh	r3, [r1, #12]
 800dc50:	061b      	lsls	r3, r3, #24
 800dc52:	b09d      	sub	sp, #116	; 0x74
 800dc54:	4607      	mov	r7, r0
 800dc56:	460d      	mov	r5, r1
 800dc58:	4614      	mov	r4, r2
 800dc5a:	d50e      	bpl.n	800dc7a <_svfiprintf_r+0x32>
 800dc5c:	690b      	ldr	r3, [r1, #16]
 800dc5e:	b963      	cbnz	r3, 800dc7a <_svfiprintf_r+0x32>
 800dc60:	2140      	movs	r1, #64	; 0x40
 800dc62:	f7ff ff21 	bl	800daa8 <_malloc_r>
 800dc66:	6028      	str	r0, [r5, #0]
 800dc68:	6128      	str	r0, [r5, #16]
 800dc6a:	b920      	cbnz	r0, 800dc76 <_svfiprintf_r+0x2e>
 800dc6c:	230c      	movs	r3, #12
 800dc6e:	603b      	str	r3, [r7, #0]
 800dc70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc74:	e0d1      	b.n	800de1a <_svfiprintf_r+0x1d2>
 800dc76:	2340      	movs	r3, #64	; 0x40
 800dc78:	616b      	str	r3, [r5, #20]
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc7e:	2320      	movs	r3, #32
 800dc80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc84:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc88:	2330      	movs	r3, #48	; 0x30
 800dc8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800de34 <_svfiprintf_r+0x1ec>
 800dc8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc92:	f04f 0901 	mov.w	r9, #1
 800dc96:	4623      	mov	r3, r4
 800dc98:	469a      	mov	sl, r3
 800dc9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc9e:	b10a      	cbz	r2, 800dca4 <_svfiprintf_r+0x5c>
 800dca0:	2a25      	cmp	r2, #37	; 0x25
 800dca2:	d1f9      	bne.n	800dc98 <_svfiprintf_r+0x50>
 800dca4:	ebba 0b04 	subs.w	fp, sl, r4
 800dca8:	d00b      	beq.n	800dcc2 <_svfiprintf_r+0x7a>
 800dcaa:	465b      	mov	r3, fp
 800dcac:	4622      	mov	r2, r4
 800dcae:	4629      	mov	r1, r5
 800dcb0:	4638      	mov	r0, r7
 800dcb2:	f7ff ff6d 	bl	800db90 <__ssputs_r>
 800dcb6:	3001      	adds	r0, #1
 800dcb8:	f000 80aa 	beq.w	800de10 <_svfiprintf_r+0x1c8>
 800dcbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcbe:	445a      	add	r2, fp
 800dcc0:	9209      	str	r2, [sp, #36]	; 0x24
 800dcc2:	f89a 3000 	ldrb.w	r3, [sl]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	f000 80a2 	beq.w	800de10 <_svfiprintf_r+0x1c8>
 800dccc:	2300      	movs	r3, #0
 800dcce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcd6:	f10a 0a01 	add.w	sl, sl, #1
 800dcda:	9304      	str	r3, [sp, #16]
 800dcdc:	9307      	str	r3, [sp, #28]
 800dcde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dce2:	931a      	str	r3, [sp, #104]	; 0x68
 800dce4:	4654      	mov	r4, sl
 800dce6:	2205      	movs	r2, #5
 800dce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcec:	4851      	ldr	r0, [pc, #324]	; (800de34 <_svfiprintf_r+0x1ec>)
 800dcee:	f7f2 fa7f 	bl	80001f0 <memchr>
 800dcf2:	9a04      	ldr	r2, [sp, #16]
 800dcf4:	b9d8      	cbnz	r0, 800dd2e <_svfiprintf_r+0xe6>
 800dcf6:	06d0      	lsls	r0, r2, #27
 800dcf8:	bf44      	itt	mi
 800dcfa:	2320      	movmi	r3, #32
 800dcfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd00:	0711      	lsls	r1, r2, #28
 800dd02:	bf44      	itt	mi
 800dd04:	232b      	movmi	r3, #43	; 0x2b
 800dd06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd0a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd0e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd10:	d015      	beq.n	800dd3e <_svfiprintf_r+0xf6>
 800dd12:	9a07      	ldr	r2, [sp, #28]
 800dd14:	4654      	mov	r4, sl
 800dd16:	2000      	movs	r0, #0
 800dd18:	f04f 0c0a 	mov.w	ip, #10
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd22:	3b30      	subs	r3, #48	; 0x30
 800dd24:	2b09      	cmp	r3, #9
 800dd26:	d94e      	bls.n	800ddc6 <_svfiprintf_r+0x17e>
 800dd28:	b1b0      	cbz	r0, 800dd58 <_svfiprintf_r+0x110>
 800dd2a:	9207      	str	r2, [sp, #28]
 800dd2c:	e014      	b.n	800dd58 <_svfiprintf_r+0x110>
 800dd2e:	eba0 0308 	sub.w	r3, r0, r8
 800dd32:	fa09 f303 	lsl.w	r3, r9, r3
 800dd36:	4313      	orrs	r3, r2
 800dd38:	9304      	str	r3, [sp, #16]
 800dd3a:	46a2      	mov	sl, r4
 800dd3c:	e7d2      	b.n	800dce4 <_svfiprintf_r+0x9c>
 800dd3e:	9b03      	ldr	r3, [sp, #12]
 800dd40:	1d19      	adds	r1, r3, #4
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	9103      	str	r1, [sp, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	bfbb      	ittet	lt
 800dd4a:	425b      	neglt	r3, r3
 800dd4c:	f042 0202 	orrlt.w	r2, r2, #2
 800dd50:	9307      	strge	r3, [sp, #28]
 800dd52:	9307      	strlt	r3, [sp, #28]
 800dd54:	bfb8      	it	lt
 800dd56:	9204      	strlt	r2, [sp, #16]
 800dd58:	7823      	ldrb	r3, [r4, #0]
 800dd5a:	2b2e      	cmp	r3, #46	; 0x2e
 800dd5c:	d10c      	bne.n	800dd78 <_svfiprintf_r+0x130>
 800dd5e:	7863      	ldrb	r3, [r4, #1]
 800dd60:	2b2a      	cmp	r3, #42	; 0x2a
 800dd62:	d135      	bne.n	800ddd0 <_svfiprintf_r+0x188>
 800dd64:	9b03      	ldr	r3, [sp, #12]
 800dd66:	1d1a      	adds	r2, r3, #4
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	9203      	str	r2, [sp, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	bfb8      	it	lt
 800dd70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dd74:	3402      	adds	r4, #2
 800dd76:	9305      	str	r3, [sp, #20]
 800dd78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800de44 <_svfiprintf_r+0x1fc>
 800dd7c:	7821      	ldrb	r1, [r4, #0]
 800dd7e:	2203      	movs	r2, #3
 800dd80:	4650      	mov	r0, sl
 800dd82:	f7f2 fa35 	bl	80001f0 <memchr>
 800dd86:	b140      	cbz	r0, 800dd9a <_svfiprintf_r+0x152>
 800dd88:	2340      	movs	r3, #64	; 0x40
 800dd8a:	eba0 000a 	sub.w	r0, r0, sl
 800dd8e:	fa03 f000 	lsl.w	r0, r3, r0
 800dd92:	9b04      	ldr	r3, [sp, #16]
 800dd94:	4303      	orrs	r3, r0
 800dd96:	3401      	adds	r4, #1
 800dd98:	9304      	str	r3, [sp, #16]
 800dd9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd9e:	4826      	ldr	r0, [pc, #152]	; (800de38 <_svfiprintf_r+0x1f0>)
 800dda0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dda4:	2206      	movs	r2, #6
 800dda6:	f7f2 fa23 	bl	80001f0 <memchr>
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	d038      	beq.n	800de20 <_svfiprintf_r+0x1d8>
 800ddae:	4b23      	ldr	r3, [pc, #140]	; (800de3c <_svfiprintf_r+0x1f4>)
 800ddb0:	bb1b      	cbnz	r3, 800ddfa <_svfiprintf_r+0x1b2>
 800ddb2:	9b03      	ldr	r3, [sp, #12]
 800ddb4:	3307      	adds	r3, #7
 800ddb6:	f023 0307 	bic.w	r3, r3, #7
 800ddba:	3308      	adds	r3, #8
 800ddbc:	9303      	str	r3, [sp, #12]
 800ddbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc0:	4433      	add	r3, r6
 800ddc2:	9309      	str	r3, [sp, #36]	; 0x24
 800ddc4:	e767      	b.n	800dc96 <_svfiprintf_r+0x4e>
 800ddc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddca:	460c      	mov	r4, r1
 800ddcc:	2001      	movs	r0, #1
 800ddce:	e7a5      	b.n	800dd1c <_svfiprintf_r+0xd4>
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	3401      	adds	r4, #1
 800ddd4:	9305      	str	r3, [sp, #20]
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	f04f 0c0a 	mov.w	ip, #10
 800dddc:	4620      	mov	r0, r4
 800ddde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dde2:	3a30      	subs	r2, #48	; 0x30
 800dde4:	2a09      	cmp	r2, #9
 800dde6:	d903      	bls.n	800ddf0 <_svfiprintf_r+0x1a8>
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d0c5      	beq.n	800dd78 <_svfiprintf_r+0x130>
 800ddec:	9105      	str	r1, [sp, #20]
 800ddee:	e7c3      	b.n	800dd78 <_svfiprintf_r+0x130>
 800ddf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e7f0      	b.n	800dddc <_svfiprintf_r+0x194>
 800ddfa:	ab03      	add	r3, sp, #12
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	462a      	mov	r2, r5
 800de00:	4b0f      	ldr	r3, [pc, #60]	; (800de40 <_svfiprintf_r+0x1f8>)
 800de02:	a904      	add	r1, sp, #16
 800de04:	4638      	mov	r0, r7
 800de06:	f7fc fa57 	bl	800a2b8 <_printf_float>
 800de0a:	1c42      	adds	r2, r0, #1
 800de0c:	4606      	mov	r6, r0
 800de0e:	d1d6      	bne.n	800ddbe <_svfiprintf_r+0x176>
 800de10:	89ab      	ldrh	r3, [r5, #12]
 800de12:	065b      	lsls	r3, r3, #25
 800de14:	f53f af2c 	bmi.w	800dc70 <_svfiprintf_r+0x28>
 800de18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de1a:	b01d      	add	sp, #116	; 0x74
 800de1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de20:	ab03      	add	r3, sp, #12
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	462a      	mov	r2, r5
 800de26:	4b06      	ldr	r3, [pc, #24]	; (800de40 <_svfiprintf_r+0x1f8>)
 800de28:	a904      	add	r1, sp, #16
 800de2a:	4638      	mov	r0, r7
 800de2c:	f7fc fce8 	bl	800a800 <_printf_i>
 800de30:	e7eb      	b.n	800de0a <_svfiprintf_r+0x1c2>
 800de32:	bf00      	nop
 800de34:	08011714 	.word	0x08011714
 800de38:	0801171e 	.word	0x0801171e
 800de3c:	0800a2b9 	.word	0x0800a2b9
 800de40:	0800db91 	.word	0x0800db91
 800de44:	0801171a 	.word	0x0801171a

0800de48 <nan>:
 800de48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800de50 <nan+0x8>
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	00000000 	.word	0x00000000
 800de54:	7ff80000 	.word	0x7ff80000

0800de58 <_sbrk_r>:
 800de58:	b538      	push	{r3, r4, r5, lr}
 800de5a:	4d06      	ldr	r5, [pc, #24]	; (800de74 <_sbrk_r+0x1c>)
 800de5c:	2300      	movs	r3, #0
 800de5e:	4604      	mov	r4, r0
 800de60:	4608      	mov	r0, r1
 800de62:	602b      	str	r3, [r5, #0]
 800de64:	f7f4 ffd2 	bl	8002e0c <_sbrk>
 800de68:	1c43      	adds	r3, r0, #1
 800de6a:	d102      	bne.n	800de72 <_sbrk_r+0x1a>
 800de6c:	682b      	ldr	r3, [r5, #0]
 800de6e:	b103      	cbz	r3, 800de72 <_sbrk_r+0x1a>
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	bd38      	pop	{r3, r4, r5, pc}
 800de74:	2000514c 	.word	0x2000514c

0800de78 <strncmp>:
 800de78:	b510      	push	{r4, lr}
 800de7a:	b17a      	cbz	r2, 800de9c <strncmp+0x24>
 800de7c:	4603      	mov	r3, r0
 800de7e:	3901      	subs	r1, #1
 800de80:	1884      	adds	r4, r0, r2
 800de82:	f813 0b01 	ldrb.w	r0, [r3], #1
 800de86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800de8a:	4290      	cmp	r0, r2
 800de8c:	d101      	bne.n	800de92 <strncmp+0x1a>
 800de8e:	42a3      	cmp	r3, r4
 800de90:	d101      	bne.n	800de96 <strncmp+0x1e>
 800de92:	1a80      	subs	r0, r0, r2
 800de94:	bd10      	pop	{r4, pc}
 800de96:	2800      	cmp	r0, #0
 800de98:	d1f3      	bne.n	800de82 <strncmp+0xa>
 800de9a:	e7fa      	b.n	800de92 <strncmp+0x1a>
 800de9c:	4610      	mov	r0, r2
 800de9e:	e7f9      	b.n	800de94 <strncmp+0x1c>

0800dea0 <__ascii_wctomb>:
 800dea0:	b149      	cbz	r1, 800deb6 <__ascii_wctomb+0x16>
 800dea2:	2aff      	cmp	r2, #255	; 0xff
 800dea4:	bf85      	ittet	hi
 800dea6:	238a      	movhi	r3, #138	; 0x8a
 800dea8:	6003      	strhi	r3, [r0, #0]
 800deaa:	700a      	strbls	r2, [r1, #0]
 800deac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800deb0:	bf98      	it	ls
 800deb2:	2001      	movls	r0, #1
 800deb4:	4770      	bx	lr
 800deb6:	4608      	mov	r0, r1
 800deb8:	4770      	bx	lr
	...

0800debc <__assert_func>:
 800debc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800debe:	4614      	mov	r4, r2
 800dec0:	461a      	mov	r2, r3
 800dec2:	4b09      	ldr	r3, [pc, #36]	; (800dee8 <__assert_func+0x2c>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4605      	mov	r5, r0
 800dec8:	68d8      	ldr	r0, [r3, #12]
 800deca:	b14c      	cbz	r4, 800dee0 <__assert_func+0x24>
 800decc:	4b07      	ldr	r3, [pc, #28]	; (800deec <__assert_func+0x30>)
 800dece:	9100      	str	r1, [sp, #0]
 800ded0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ded4:	4906      	ldr	r1, [pc, #24]	; (800def0 <__assert_func+0x34>)
 800ded6:	462b      	mov	r3, r5
 800ded8:	f000 f80e 	bl	800def8 <fiprintf>
 800dedc:	f000 fa8c 	bl	800e3f8 <abort>
 800dee0:	4b04      	ldr	r3, [pc, #16]	; (800def4 <__assert_func+0x38>)
 800dee2:	461c      	mov	r4, r3
 800dee4:	e7f3      	b.n	800dece <__assert_func+0x12>
 800dee6:	bf00      	nop
 800dee8:	20000028 	.word	0x20000028
 800deec:	08011725 	.word	0x08011725
 800def0:	08011732 	.word	0x08011732
 800def4:	08011760 	.word	0x08011760

0800def8 <fiprintf>:
 800def8:	b40e      	push	{r1, r2, r3}
 800defa:	b503      	push	{r0, r1, lr}
 800defc:	4601      	mov	r1, r0
 800defe:	ab03      	add	r3, sp, #12
 800df00:	4805      	ldr	r0, [pc, #20]	; (800df18 <fiprintf+0x20>)
 800df02:	f853 2b04 	ldr.w	r2, [r3], #4
 800df06:	6800      	ldr	r0, [r0, #0]
 800df08:	9301      	str	r3, [sp, #4]
 800df0a:	f000 f885 	bl	800e018 <_vfiprintf_r>
 800df0e:	b002      	add	sp, #8
 800df10:	f85d eb04 	ldr.w	lr, [sp], #4
 800df14:	b003      	add	sp, #12
 800df16:	4770      	bx	lr
 800df18:	20000028 	.word	0x20000028

0800df1c <memmove>:
 800df1c:	4288      	cmp	r0, r1
 800df1e:	b510      	push	{r4, lr}
 800df20:	eb01 0402 	add.w	r4, r1, r2
 800df24:	d902      	bls.n	800df2c <memmove+0x10>
 800df26:	4284      	cmp	r4, r0
 800df28:	4623      	mov	r3, r4
 800df2a:	d807      	bhi.n	800df3c <memmove+0x20>
 800df2c:	1e43      	subs	r3, r0, #1
 800df2e:	42a1      	cmp	r1, r4
 800df30:	d008      	beq.n	800df44 <memmove+0x28>
 800df32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df3a:	e7f8      	b.n	800df2e <memmove+0x12>
 800df3c:	4402      	add	r2, r0
 800df3e:	4601      	mov	r1, r0
 800df40:	428a      	cmp	r2, r1
 800df42:	d100      	bne.n	800df46 <memmove+0x2a>
 800df44:	bd10      	pop	{r4, pc}
 800df46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df4e:	e7f7      	b.n	800df40 <memmove+0x24>

0800df50 <__malloc_lock>:
 800df50:	4801      	ldr	r0, [pc, #4]	; (800df58 <__malloc_lock+0x8>)
 800df52:	f000 bc11 	b.w	800e778 <__retarget_lock_acquire_recursive>
 800df56:	bf00      	nop
 800df58:	20005150 	.word	0x20005150

0800df5c <__malloc_unlock>:
 800df5c:	4801      	ldr	r0, [pc, #4]	; (800df64 <__malloc_unlock+0x8>)
 800df5e:	f000 bc0c 	b.w	800e77a <__retarget_lock_release_recursive>
 800df62:	bf00      	nop
 800df64:	20005150 	.word	0x20005150

0800df68 <_realloc_r>:
 800df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df6c:	4680      	mov	r8, r0
 800df6e:	4614      	mov	r4, r2
 800df70:	460e      	mov	r6, r1
 800df72:	b921      	cbnz	r1, 800df7e <_realloc_r+0x16>
 800df74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df78:	4611      	mov	r1, r2
 800df7a:	f7ff bd95 	b.w	800daa8 <_malloc_r>
 800df7e:	b92a      	cbnz	r2, 800df8c <_realloc_r+0x24>
 800df80:	f7ff fd26 	bl	800d9d0 <_free_r>
 800df84:	4625      	mov	r5, r4
 800df86:	4628      	mov	r0, r5
 800df88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df8c:	f000 fc5c 	bl	800e848 <_malloc_usable_size_r>
 800df90:	4284      	cmp	r4, r0
 800df92:	4607      	mov	r7, r0
 800df94:	d802      	bhi.n	800df9c <_realloc_r+0x34>
 800df96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df9a:	d812      	bhi.n	800dfc2 <_realloc_r+0x5a>
 800df9c:	4621      	mov	r1, r4
 800df9e:	4640      	mov	r0, r8
 800dfa0:	f7ff fd82 	bl	800daa8 <_malloc_r>
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	d0ed      	beq.n	800df86 <_realloc_r+0x1e>
 800dfaa:	42bc      	cmp	r4, r7
 800dfac:	4622      	mov	r2, r4
 800dfae:	4631      	mov	r1, r6
 800dfb0:	bf28      	it	cs
 800dfb2:	463a      	movcs	r2, r7
 800dfb4:	f7fc f8ca 	bl	800a14c <memcpy>
 800dfb8:	4631      	mov	r1, r6
 800dfba:	4640      	mov	r0, r8
 800dfbc:	f7ff fd08 	bl	800d9d0 <_free_r>
 800dfc0:	e7e1      	b.n	800df86 <_realloc_r+0x1e>
 800dfc2:	4635      	mov	r5, r6
 800dfc4:	e7df      	b.n	800df86 <_realloc_r+0x1e>

0800dfc6 <__sfputc_r>:
 800dfc6:	6893      	ldr	r3, [r2, #8]
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	b410      	push	{r4}
 800dfce:	6093      	str	r3, [r2, #8]
 800dfd0:	da08      	bge.n	800dfe4 <__sfputc_r+0x1e>
 800dfd2:	6994      	ldr	r4, [r2, #24]
 800dfd4:	42a3      	cmp	r3, r4
 800dfd6:	db01      	blt.n	800dfdc <__sfputc_r+0x16>
 800dfd8:	290a      	cmp	r1, #10
 800dfda:	d103      	bne.n	800dfe4 <__sfputc_r+0x1e>
 800dfdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfe0:	f000 b94a 	b.w	800e278 <__swbuf_r>
 800dfe4:	6813      	ldr	r3, [r2, #0]
 800dfe6:	1c58      	adds	r0, r3, #1
 800dfe8:	6010      	str	r0, [r2, #0]
 800dfea:	7019      	strb	r1, [r3, #0]
 800dfec:	4608      	mov	r0, r1
 800dfee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <__sfputs_r>:
 800dff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff6:	4606      	mov	r6, r0
 800dff8:	460f      	mov	r7, r1
 800dffa:	4614      	mov	r4, r2
 800dffc:	18d5      	adds	r5, r2, r3
 800dffe:	42ac      	cmp	r4, r5
 800e000:	d101      	bne.n	800e006 <__sfputs_r+0x12>
 800e002:	2000      	movs	r0, #0
 800e004:	e007      	b.n	800e016 <__sfputs_r+0x22>
 800e006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e00a:	463a      	mov	r2, r7
 800e00c:	4630      	mov	r0, r6
 800e00e:	f7ff ffda 	bl	800dfc6 <__sfputc_r>
 800e012:	1c43      	adds	r3, r0, #1
 800e014:	d1f3      	bne.n	800dffe <__sfputs_r+0xa>
 800e016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e018 <_vfiprintf_r>:
 800e018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e01c:	460d      	mov	r5, r1
 800e01e:	b09d      	sub	sp, #116	; 0x74
 800e020:	4614      	mov	r4, r2
 800e022:	4698      	mov	r8, r3
 800e024:	4606      	mov	r6, r0
 800e026:	b118      	cbz	r0, 800e030 <_vfiprintf_r+0x18>
 800e028:	6983      	ldr	r3, [r0, #24]
 800e02a:	b90b      	cbnz	r3, 800e030 <_vfiprintf_r+0x18>
 800e02c:	f000 fb06 	bl	800e63c <__sinit>
 800e030:	4b89      	ldr	r3, [pc, #548]	; (800e258 <_vfiprintf_r+0x240>)
 800e032:	429d      	cmp	r5, r3
 800e034:	d11b      	bne.n	800e06e <_vfiprintf_r+0x56>
 800e036:	6875      	ldr	r5, [r6, #4]
 800e038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e03a:	07d9      	lsls	r1, r3, #31
 800e03c:	d405      	bmi.n	800e04a <_vfiprintf_r+0x32>
 800e03e:	89ab      	ldrh	r3, [r5, #12]
 800e040:	059a      	lsls	r2, r3, #22
 800e042:	d402      	bmi.n	800e04a <_vfiprintf_r+0x32>
 800e044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e046:	f000 fb97 	bl	800e778 <__retarget_lock_acquire_recursive>
 800e04a:	89ab      	ldrh	r3, [r5, #12]
 800e04c:	071b      	lsls	r3, r3, #28
 800e04e:	d501      	bpl.n	800e054 <_vfiprintf_r+0x3c>
 800e050:	692b      	ldr	r3, [r5, #16]
 800e052:	b9eb      	cbnz	r3, 800e090 <_vfiprintf_r+0x78>
 800e054:	4629      	mov	r1, r5
 800e056:	4630      	mov	r0, r6
 800e058:	f000 f960 	bl	800e31c <__swsetup_r>
 800e05c:	b1c0      	cbz	r0, 800e090 <_vfiprintf_r+0x78>
 800e05e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e060:	07dc      	lsls	r4, r3, #31
 800e062:	d50e      	bpl.n	800e082 <_vfiprintf_r+0x6a>
 800e064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e068:	b01d      	add	sp, #116	; 0x74
 800e06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e06e:	4b7b      	ldr	r3, [pc, #492]	; (800e25c <_vfiprintf_r+0x244>)
 800e070:	429d      	cmp	r5, r3
 800e072:	d101      	bne.n	800e078 <_vfiprintf_r+0x60>
 800e074:	68b5      	ldr	r5, [r6, #8]
 800e076:	e7df      	b.n	800e038 <_vfiprintf_r+0x20>
 800e078:	4b79      	ldr	r3, [pc, #484]	; (800e260 <_vfiprintf_r+0x248>)
 800e07a:	429d      	cmp	r5, r3
 800e07c:	bf08      	it	eq
 800e07e:	68f5      	ldreq	r5, [r6, #12]
 800e080:	e7da      	b.n	800e038 <_vfiprintf_r+0x20>
 800e082:	89ab      	ldrh	r3, [r5, #12]
 800e084:	0598      	lsls	r0, r3, #22
 800e086:	d4ed      	bmi.n	800e064 <_vfiprintf_r+0x4c>
 800e088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e08a:	f000 fb76 	bl	800e77a <__retarget_lock_release_recursive>
 800e08e:	e7e9      	b.n	800e064 <_vfiprintf_r+0x4c>
 800e090:	2300      	movs	r3, #0
 800e092:	9309      	str	r3, [sp, #36]	; 0x24
 800e094:	2320      	movs	r3, #32
 800e096:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e09a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e09e:	2330      	movs	r3, #48	; 0x30
 800e0a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e264 <_vfiprintf_r+0x24c>
 800e0a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0a8:	f04f 0901 	mov.w	r9, #1
 800e0ac:	4623      	mov	r3, r4
 800e0ae:	469a      	mov	sl, r3
 800e0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0b4:	b10a      	cbz	r2, 800e0ba <_vfiprintf_r+0xa2>
 800e0b6:	2a25      	cmp	r2, #37	; 0x25
 800e0b8:	d1f9      	bne.n	800e0ae <_vfiprintf_r+0x96>
 800e0ba:	ebba 0b04 	subs.w	fp, sl, r4
 800e0be:	d00b      	beq.n	800e0d8 <_vfiprintf_r+0xc0>
 800e0c0:	465b      	mov	r3, fp
 800e0c2:	4622      	mov	r2, r4
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	f7ff ff94 	bl	800dff4 <__sfputs_r>
 800e0cc:	3001      	adds	r0, #1
 800e0ce:	f000 80aa 	beq.w	800e226 <_vfiprintf_r+0x20e>
 800e0d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0d4:	445a      	add	r2, fp
 800e0d6:	9209      	str	r2, [sp, #36]	; 0x24
 800e0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	f000 80a2 	beq.w	800e226 <_vfiprintf_r+0x20e>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0ec:	f10a 0a01 	add.w	sl, sl, #1
 800e0f0:	9304      	str	r3, [sp, #16]
 800e0f2:	9307      	str	r3, [sp, #28]
 800e0f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0f8:	931a      	str	r3, [sp, #104]	; 0x68
 800e0fa:	4654      	mov	r4, sl
 800e0fc:	2205      	movs	r2, #5
 800e0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e102:	4858      	ldr	r0, [pc, #352]	; (800e264 <_vfiprintf_r+0x24c>)
 800e104:	f7f2 f874 	bl	80001f0 <memchr>
 800e108:	9a04      	ldr	r2, [sp, #16]
 800e10a:	b9d8      	cbnz	r0, 800e144 <_vfiprintf_r+0x12c>
 800e10c:	06d1      	lsls	r1, r2, #27
 800e10e:	bf44      	itt	mi
 800e110:	2320      	movmi	r3, #32
 800e112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e116:	0713      	lsls	r3, r2, #28
 800e118:	bf44      	itt	mi
 800e11a:	232b      	movmi	r3, #43	; 0x2b
 800e11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e120:	f89a 3000 	ldrb.w	r3, [sl]
 800e124:	2b2a      	cmp	r3, #42	; 0x2a
 800e126:	d015      	beq.n	800e154 <_vfiprintf_r+0x13c>
 800e128:	9a07      	ldr	r2, [sp, #28]
 800e12a:	4654      	mov	r4, sl
 800e12c:	2000      	movs	r0, #0
 800e12e:	f04f 0c0a 	mov.w	ip, #10
 800e132:	4621      	mov	r1, r4
 800e134:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e138:	3b30      	subs	r3, #48	; 0x30
 800e13a:	2b09      	cmp	r3, #9
 800e13c:	d94e      	bls.n	800e1dc <_vfiprintf_r+0x1c4>
 800e13e:	b1b0      	cbz	r0, 800e16e <_vfiprintf_r+0x156>
 800e140:	9207      	str	r2, [sp, #28]
 800e142:	e014      	b.n	800e16e <_vfiprintf_r+0x156>
 800e144:	eba0 0308 	sub.w	r3, r0, r8
 800e148:	fa09 f303 	lsl.w	r3, r9, r3
 800e14c:	4313      	orrs	r3, r2
 800e14e:	9304      	str	r3, [sp, #16]
 800e150:	46a2      	mov	sl, r4
 800e152:	e7d2      	b.n	800e0fa <_vfiprintf_r+0xe2>
 800e154:	9b03      	ldr	r3, [sp, #12]
 800e156:	1d19      	adds	r1, r3, #4
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	9103      	str	r1, [sp, #12]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	bfbb      	ittet	lt
 800e160:	425b      	neglt	r3, r3
 800e162:	f042 0202 	orrlt.w	r2, r2, #2
 800e166:	9307      	strge	r3, [sp, #28]
 800e168:	9307      	strlt	r3, [sp, #28]
 800e16a:	bfb8      	it	lt
 800e16c:	9204      	strlt	r2, [sp, #16]
 800e16e:	7823      	ldrb	r3, [r4, #0]
 800e170:	2b2e      	cmp	r3, #46	; 0x2e
 800e172:	d10c      	bne.n	800e18e <_vfiprintf_r+0x176>
 800e174:	7863      	ldrb	r3, [r4, #1]
 800e176:	2b2a      	cmp	r3, #42	; 0x2a
 800e178:	d135      	bne.n	800e1e6 <_vfiprintf_r+0x1ce>
 800e17a:	9b03      	ldr	r3, [sp, #12]
 800e17c:	1d1a      	adds	r2, r3, #4
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	9203      	str	r2, [sp, #12]
 800e182:	2b00      	cmp	r3, #0
 800e184:	bfb8      	it	lt
 800e186:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e18a:	3402      	adds	r4, #2
 800e18c:	9305      	str	r3, [sp, #20]
 800e18e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e274 <_vfiprintf_r+0x25c>
 800e192:	7821      	ldrb	r1, [r4, #0]
 800e194:	2203      	movs	r2, #3
 800e196:	4650      	mov	r0, sl
 800e198:	f7f2 f82a 	bl	80001f0 <memchr>
 800e19c:	b140      	cbz	r0, 800e1b0 <_vfiprintf_r+0x198>
 800e19e:	2340      	movs	r3, #64	; 0x40
 800e1a0:	eba0 000a 	sub.w	r0, r0, sl
 800e1a4:	fa03 f000 	lsl.w	r0, r3, r0
 800e1a8:	9b04      	ldr	r3, [sp, #16]
 800e1aa:	4303      	orrs	r3, r0
 800e1ac:	3401      	adds	r4, #1
 800e1ae:	9304      	str	r3, [sp, #16]
 800e1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1b4:	482c      	ldr	r0, [pc, #176]	; (800e268 <_vfiprintf_r+0x250>)
 800e1b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1ba:	2206      	movs	r2, #6
 800e1bc:	f7f2 f818 	bl	80001f0 <memchr>
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d03f      	beq.n	800e244 <_vfiprintf_r+0x22c>
 800e1c4:	4b29      	ldr	r3, [pc, #164]	; (800e26c <_vfiprintf_r+0x254>)
 800e1c6:	bb1b      	cbnz	r3, 800e210 <_vfiprintf_r+0x1f8>
 800e1c8:	9b03      	ldr	r3, [sp, #12]
 800e1ca:	3307      	adds	r3, #7
 800e1cc:	f023 0307 	bic.w	r3, r3, #7
 800e1d0:	3308      	adds	r3, #8
 800e1d2:	9303      	str	r3, [sp, #12]
 800e1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1d6:	443b      	add	r3, r7
 800e1d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1da:	e767      	b.n	800e0ac <_vfiprintf_r+0x94>
 800e1dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1e0:	460c      	mov	r4, r1
 800e1e2:	2001      	movs	r0, #1
 800e1e4:	e7a5      	b.n	800e132 <_vfiprintf_r+0x11a>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	3401      	adds	r4, #1
 800e1ea:	9305      	str	r3, [sp, #20]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	f04f 0c0a 	mov.w	ip, #10
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1f8:	3a30      	subs	r2, #48	; 0x30
 800e1fa:	2a09      	cmp	r2, #9
 800e1fc:	d903      	bls.n	800e206 <_vfiprintf_r+0x1ee>
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d0c5      	beq.n	800e18e <_vfiprintf_r+0x176>
 800e202:	9105      	str	r1, [sp, #20]
 800e204:	e7c3      	b.n	800e18e <_vfiprintf_r+0x176>
 800e206:	fb0c 2101 	mla	r1, ip, r1, r2
 800e20a:	4604      	mov	r4, r0
 800e20c:	2301      	movs	r3, #1
 800e20e:	e7f0      	b.n	800e1f2 <_vfiprintf_r+0x1da>
 800e210:	ab03      	add	r3, sp, #12
 800e212:	9300      	str	r3, [sp, #0]
 800e214:	462a      	mov	r2, r5
 800e216:	4b16      	ldr	r3, [pc, #88]	; (800e270 <_vfiprintf_r+0x258>)
 800e218:	a904      	add	r1, sp, #16
 800e21a:	4630      	mov	r0, r6
 800e21c:	f7fc f84c 	bl	800a2b8 <_printf_float>
 800e220:	4607      	mov	r7, r0
 800e222:	1c78      	adds	r0, r7, #1
 800e224:	d1d6      	bne.n	800e1d4 <_vfiprintf_r+0x1bc>
 800e226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e228:	07d9      	lsls	r1, r3, #31
 800e22a:	d405      	bmi.n	800e238 <_vfiprintf_r+0x220>
 800e22c:	89ab      	ldrh	r3, [r5, #12]
 800e22e:	059a      	lsls	r2, r3, #22
 800e230:	d402      	bmi.n	800e238 <_vfiprintf_r+0x220>
 800e232:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e234:	f000 faa1 	bl	800e77a <__retarget_lock_release_recursive>
 800e238:	89ab      	ldrh	r3, [r5, #12]
 800e23a:	065b      	lsls	r3, r3, #25
 800e23c:	f53f af12 	bmi.w	800e064 <_vfiprintf_r+0x4c>
 800e240:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e242:	e711      	b.n	800e068 <_vfiprintf_r+0x50>
 800e244:	ab03      	add	r3, sp, #12
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	462a      	mov	r2, r5
 800e24a:	4b09      	ldr	r3, [pc, #36]	; (800e270 <_vfiprintf_r+0x258>)
 800e24c:	a904      	add	r1, sp, #16
 800e24e:	4630      	mov	r0, r6
 800e250:	f7fc fad6 	bl	800a800 <_printf_i>
 800e254:	e7e4      	b.n	800e220 <_vfiprintf_r+0x208>
 800e256:	bf00      	nop
 800e258:	08011784 	.word	0x08011784
 800e25c:	080117a4 	.word	0x080117a4
 800e260:	08011764 	.word	0x08011764
 800e264:	08011714 	.word	0x08011714
 800e268:	0801171e 	.word	0x0801171e
 800e26c:	0800a2b9 	.word	0x0800a2b9
 800e270:	0800dff5 	.word	0x0800dff5
 800e274:	0801171a 	.word	0x0801171a

0800e278 <__swbuf_r>:
 800e278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27a:	460e      	mov	r6, r1
 800e27c:	4614      	mov	r4, r2
 800e27e:	4605      	mov	r5, r0
 800e280:	b118      	cbz	r0, 800e28a <__swbuf_r+0x12>
 800e282:	6983      	ldr	r3, [r0, #24]
 800e284:	b90b      	cbnz	r3, 800e28a <__swbuf_r+0x12>
 800e286:	f000 f9d9 	bl	800e63c <__sinit>
 800e28a:	4b21      	ldr	r3, [pc, #132]	; (800e310 <__swbuf_r+0x98>)
 800e28c:	429c      	cmp	r4, r3
 800e28e:	d12b      	bne.n	800e2e8 <__swbuf_r+0x70>
 800e290:	686c      	ldr	r4, [r5, #4]
 800e292:	69a3      	ldr	r3, [r4, #24]
 800e294:	60a3      	str	r3, [r4, #8]
 800e296:	89a3      	ldrh	r3, [r4, #12]
 800e298:	071a      	lsls	r2, r3, #28
 800e29a:	d52f      	bpl.n	800e2fc <__swbuf_r+0x84>
 800e29c:	6923      	ldr	r3, [r4, #16]
 800e29e:	b36b      	cbz	r3, 800e2fc <__swbuf_r+0x84>
 800e2a0:	6923      	ldr	r3, [r4, #16]
 800e2a2:	6820      	ldr	r0, [r4, #0]
 800e2a4:	1ac0      	subs	r0, r0, r3
 800e2a6:	6963      	ldr	r3, [r4, #20]
 800e2a8:	b2f6      	uxtb	r6, r6
 800e2aa:	4283      	cmp	r3, r0
 800e2ac:	4637      	mov	r7, r6
 800e2ae:	dc04      	bgt.n	800e2ba <__swbuf_r+0x42>
 800e2b0:	4621      	mov	r1, r4
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	f000 f92e 	bl	800e514 <_fflush_r>
 800e2b8:	bb30      	cbnz	r0, 800e308 <__swbuf_r+0x90>
 800e2ba:	68a3      	ldr	r3, [r4, #8]
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	60a3      	str	r3, [r4, #8]
 800e2c0:	6823      	ldr	r3, [r4, #0]
 800e2c2:	1c5a      	adds	r2, r3, #1
 800e2c4:	6022      	str	r2, [r4, #0]
 800e2c6:	701e      	strb	r6, [r3, #0]
 800e2c8:	6963      	ldr	r3, [r4, #20]
 800e2ca:	3001      	adds	r0, #1
 800e2cc:	4283      	cmp	r3, r0
 800e2ce:	d004      	beq.n	800e2da <__swbuf_r+0x62>
 800e2d0:	89a3      	ldrh	r3, [r4, #12]
 800e2d2:	07db      	lsls	r3, r3, #31
 800e2d4:	d506      	bpl.n	800e2e4 <__swbuf_r+0x6c>
 800e2d6:	2e0a      	cmp	r6, #10
 800e2d8:	d104      	bne.n	800e2e4 <__swbuf_r+0x6c>
 800e2da:	4621      	mov	r1, r4
 800e2dc:	4628      	mov	r0, r5
 800e2de:	f000 f919 	bl	800e514 <_fflush_r>
 800e2e2:	b988      	cbnz	r0, 800e308 <__swbuf_r+0x90>
 800e2e4:	4638      	mov	r0, r7
 800e2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2e8:	4b0a      	ldr	r3, [pc, #40]	; (800e314 <__swbuf_r+0x9c>)
 800e2ea:	429c      	cmp	r4, r3
 800e2ec:	d101      	bne.n	800e2f2 <__swbuf_r+0x7a>
 800e2ee:	68ac      	ldr	r4, [r5, #8]
 800e2f0:	e7cf      	b.n	800e292 <__swbuf_r+0x1a>
 800e2f2:	4b09      	ldr	r3, [pc, #36]	; (800e318 <__swbuf_r+0xa0>)
 800e2f4:	429c      	cmp	r4, r3
 800e2f6:	bf08      	it	eq
 800e2f8:	68ec      	ldreq	r4, [r5, #12]
 800e2fa:	e7ca      	b.n	800e292 <__swbuf_r+0x1a>
 800e2fc:	4621      	mov	r1, r4
 800e2fe:	4628      	mov	r0, r5
 800e300:	f000 f80c 	bl	800e31c <__swsetup_r>
 800e304:	2800      	cmp	r0, #0
 800e306:	d0cb      	beq.n	800e2a0 <__swbuf_r+0x28>
 800e308:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e30c:	e7ea      	b.n	800e2e4 <__swbuf_r+0x6c>
 800e30e:	bf00      	nop
 800e310:	08011784 	.word	0x08011784
 800e314:	080117a4 	.word	0x080117a4
 800e318:	08011764 	.word	0x08011764

0800e31c <__swsetup_r>:
 800e31c:	4b32      	ldr	r3, [pc, #200]	; (800e3e8 <__swsetup_r+0xcc>)
 800e31e:	b570      	push	{r4, r5, r6, lr}
 800e320:	681d      	ldr	r5, [r3, #0]
 800e322:	4606      	mov	r6, r0
 800e324:	460c      	mov	r4, r1
 800e326:	b125      	cbz	r5, 800e332 <__swsetup_r+0x16>
 800e328:	69ab      	ldr	r3, [r5, #24]
 800e32a:	b913      	cbnz	r3, 800e332 <__swsetup_r+0x16>
 800e32c:	4628      	mov	r0, r5
 800e32e:	f000 f985 	bl	800e63c <__sinit>
 800e332:	4b2e      	ldr	r3, [pc, #184]	; (800e3ec <__swsetup_r+0xd0>)
 800e334:	429c      	cmp	r4, r3
 800e336:	d10f      	bne.n	800e358 <__swsetup_r+0x3c>
 800e338:	686c      	ldr	r4, [r5, #4]
 800e33a:	89a3      	ldrh	r3, [r4, #12]
 800e33c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e340:	0719      	lsls	r1, r3, #28
 800e342:	d42c      	bmi.n	800e39e <__swsetup_r+0x82>
 800e344:	06dd      	lsls	r5, r3, #27
 800e346:	d411      	bmi.n	800e36c <__swsetup_r+0x50>
 800e348:	2309      	movs	r3, #9
 800e34a:	6033      	str	r3, [r6, #0]
 800e34c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e350:	81a3      	strh	r3, [r4, #12]
 800e352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e356:	e03e      	b.n	800e3d6 <__swsetup_r+0xba>
 800e358:	4b25      	ldr	r3, [pc, #148]	; (800e3f0 <__swsetup_r+0xd4>)
 800e35a:	429c      	cmp	r4, r3
 800e35c:	d101      	bne.n	800e362 <__swsetup_r+0x46>
 800e35e:	68ac      	ldr	r4, [r5, #8]
 800e360:	e7eb      	b.n	800e33a <__swsetup_r+0x1e>
 800e362:	4b24      	ldr	r3, [pc, #144]	; (800e3f4 <__swsetup_r+0xd8>)
 800e364:	429c      	cmp	r4, r3
 800e366:	bf08      	it	eq
 800e368:	68ec      	ldreq	r4, [r5, #12]
 800e36a:	e7e6      	b.n	800e33a <__swsetup_r+0x1e>
 800e36c:	0758      	lsls	r0, r3, #29
 800e36e:	d512      	bpl.n	800e396 <__swsetup_r+0x7a>
 800e370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e372:	b141      	cbz	r1, 800e386 <__swsetup_r+0x6a>
 800e374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e378:	4299      	cmp	r1, r3
 800e37a:	d002      	beq.n	800e382 <__swsetup_r+0x66>
 800e37c:	4630      	mov	r0, r6
 800e37e:	f7ff fb27 	bl	800d9d0 <_free_r>
 800e382:	2300      	movs	r3, #0
 800e384:	6363      	str	r3, [r4, #52]	; 0x34
 800e386:	89a3      	ldrh	r3, [r4, #12]
 800e388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e38c:	81a3      	strh	r3, [r4, #12]
 800e38e:	2300      	movs	r3, #0
 800e390:	6063      	str	r3, [r4, #4]
 800e392:	6923      	ldr	r3, [r4, #16]
 800e394:	6023      	str	r3, [r4, #0]
 800e396:	89a3      	ldrh	r3, [r4, #12]
 800e398:	f043 0308 	orr.w	r3, r3, #8
 800e39c:	81a3      	strh	r3, [r4, #12]
 800e39e:	6923      	ldr	r3, [r4, #16]
 800e3a0:	b94b      	cbnz	r3, 800e3b6 <__swsetup_r+0x9a>
 800e3a2:	89a3      	ldrh	r3, [r4, #12]
 800e3a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3ac:	d003      	beq.n	800e3b6 <__swsetup_r+0x9a>
 800e3ae:	4621      	mov	r1, r4
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	f000 fa09 	bl	800e7c8 <__smakebuf_r>
 800e3b6:	89a0      	ldrh	r0, [r4, #12]
 800e3b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3bc:	f010 0301 	ands.w	r3, r0, #1
 800e3c0:	d00a      	beq.n	800e3d8 <__swsetup_r+0xbc>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	60a3      	str	r3, [r4, #8]
 800e3c6:	6963      	ldr	r3, [r4, #20]
 800e3c8:	425b      	negs	r3, r3
 800e3ca:	61a3      	str	r3, [r4, #24]
 800e3cc:	6923      	ldr	r3, [r4, #16]
 800e3ce:	b943      	cbnz	r3, 800e3e2 <__swsetup_r+0xc6>
 800e3d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3d4:	d1ba      	bne.n	800e34c <__swsetup_r+0x30>
 800e3d6:	bd70      	pop	{r4, r5, r6, pc}
 800e3d8:	0781      	lsls	r1, r0, #30
 800e3da:	bf58      	it	pl
 800e3dc:	6963      	ldrpl	r3, [r4, #20]
 800e3de:	60a3      	str	r3, [r4, #8]
 800e3e0:	e7f4      	b.n	800e3cc <__swsetup_r+0xb0>
 800e3e2:	2000      	movs	r0, #0
 800e3e4:	e7f7      	b.n	800e3d6 <__swsetup_r+0xba>
 800e3e6:	bf00      	nop
 800e3e8:	20000028 	.word	0x20000028
 800e3ec:	08011784 	.word	0x08011784
 800e3f0:	080117a4 	.word	0x080117a4
 800e3f4:	08011764 	.word	0x08011764

0800e3f8 <abort>:
 800e3f8:	b508      	push	{r3, lr}
 800e3fa:	2006      	movs	r0, #6
 800e3fc:	f000 fa54 	bl	800e8a8 <raise>
 800e400:	2001      	movs	r0, #1
 800e402:	f7f4 fc8b 	bl	8002d1c <_exit>
	...

0800e408 <__sflush_r>:
 800e408:	898a      	ldrh	r2, [r1, #12]
 800e40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e40e:	4605      	mov	r5, r0
 800e410:	0710      	lsls	r0, r2, #28
 800e412:	460c      	mov	r4, r1
 800e414:	d458      	bmi.n	800e4c8 <__sflush_r+0xc0>
 800e416:	684b      	ldr	r3, [r1, #4]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	dc05      	bgt.n	800e428 <__sflush_r+0x20>
 800e41c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e41e:	2b00      	cmp	r3, #0
 800e420:	dc02      	bgt.n	800e428 <__sflush_r+0x20>
 800e422:	2000      	movs	r0, #0
 800e424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e42a:	2e00      	cmp	r6, #0
 800e42c:	d0f9      	beq.n	800e422 <__sflush_r+0x1a>
 800e42e:	2300      	movs	r3, #0
 800e430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e434:	682f      	ldr	r7, [r5, #0]
 800e436:	602b      	str	r3, [r5, #0]
 800e438:	d032      	beq.n	800e4a0 <__sflush_r+0x98>
 800e43a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	075a      	lsls	r2, r3, #29
 800e440:	d505      	bpl.n	800e44e <__sflush_r+0x46>
 800e442:	6863      	ldr	r3, [r4, #4]
 800e444:	1ac0      	subs	r0, r0, r3
 800e446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e448:	b10b      	cbz	r3, 800e44e <__sflush_r+0x46>
 800e44a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e44c:	1ac0      	subs	r0, r0, r3
 800e44e:	2300      	movs	r3, #0
 800e450:	4602      	mov	r2, r0
 800e452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e454:	6a21      	ldr	r1, [r4, #32]
 800e456:	4628      	mov	r0, r5
 800e458:	47b0      	blx	r6
 800e45a:	1c43      	adds	r3, r0, #1
 800e45c:	89a3      	ldrh	r3, [r4, #12]
 800e45e:	d106      	bne.n	800e46e <__sflush_r+0x66>
 800e460:	6829      	ldr	r1, [r5, #0]
 800e462:	291d      	cmp	r1, #29
 800e464:	d82c      	bhi.n	800e4c0 <__sflush_r+0xb8>
 800e466:	4a2a      	ldr	r2, [pc, #168]	; (800e510 <__sflush_r+0x108>)
 800e468:	40ca      	lsrs	r2, r1
 800e46a:	07d6      	lsls	r6, r2, #31
 800e46c:	d528      	bpl.n	800e4c0 <__sflush_r+0xb8>
 800e46e:	2200      	movs	r2, #0
 800e470:	6062      	str	r2, [r4, #4]
 800e472:	04d9      	lsls	r1, r3, #19
 800e474:	6922      	ldr	r2, [r4, #16]
 800e476:	6022      	str	r2, [r4, #0]
 800e478:	d504      	bpl.n	800e484 <__sflush_r+0x7c>
 800e47a:	1c42      	adds	r2, r0, #1
 800e47c:	d101      	bne.n	800e482 <__sflush_r+0x7a>
 800e47e:	682b      	ldr	r3, [r5, #0]
 800e480:	b903      	cbnz	r3, 800e484 <__sflush_r+0x7c>
 800e482:	6560      	str	r0, [r4, #84]	; 0x54
 800e484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e486:	602f      	str	r7, [r5, #0]
 800e488:	2900      	cmp	r1, #0
 800e48a:	d0ca      	beq.n	800e422 <__sflush_r+0x1a>
 800e48c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e490:	4299      	cmp	r1, r3
 800e492:	d002      	beq.n	800e49a <__sflush_r+0x92>
 800e494:	4628      	mov	r0, r5
 800e496:	f7ff fa9b 	bl	800d9d0 <_free_r>
 800e49a:	2000      	movs	r0, #0
 800e49c:	6360      	str	r0, [r4, #52]	; 0x34
 800e49e:	e7c1      	b.n	800e424 <__sflush_r+0x1c>
 800e4a0:	6a21      	ldr	r1, [r4, #32]
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	47b0      	blx	r6
 800e4a8:	1c41      	adds	r1, r0, #1
 800e4aa:	d1c7      	bne.n	800e43c <__sflush_r+0x34>
 800e4ac:	682b      	ldr	r3, [r5, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d0c4      	beq.n	800e43c <__sflush_r+0x34>
 800e4b2:	2b1d      	cmp	r3, #29
 800e4b4:	d001      	beq.n	800e4ba <__sflush_r+0xb2>
 800e4b6:	2b16      	cmp	r3, #22
 800e4b8:	d101      	bne.n	800e4be <__sflush_r+0xb6>
 800e4ba:	602f      	str	r7, [r5, #0]
 800e4bc:	e7b1      	b.n	800e422 <__sflush_r+0x1a>
 800e4be:	89a3      	ldrh	r3, [r4, #12]
 800e4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4c4:	81a3      	strh	r3, [r4, #12]
 800e4c6:	e7ad      	b.n	800e424 <__sflush_r+0x1c>
 800e4c8:	690f      	ldr	r7, [r1, #16]
 800e4ca:	2f00      	cmp	r7, #0
 800e4cc:	d0a9      	beq.n	800e422 <__sflush_r+0x1a>
 800e4ce:	0793      	lsls	r3, r2, #30
 800e4d0:	680e      	ldr	r6, [r1, #0]
 800e4d2:	bf08      	it	eq
 800e4d4:	694b      	ldreq	r3, [r1, #20]
 800e4d6:	600f      	str	r7, [r1, #0]
 800e4d8:	bf18      	it	ne
 800e4da:	2300      	movne	r3, #0
 800e4dc:	eba6 0807 	sub.w	r8, r6, r7
 800e4e0:	608b      	str	r3, [r1, #8]
 800e4e2:	f1b8 0f00 	cmp.w	r8, #0
 800e4e6:	dd9c      	ble.n	800e422 <__sflush_r+0x1a>
 800e4e8:	6a21      	ldr	r1, [r4, #32]
 800e4ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e4ec:	4643      	mov	r3, r8
 800e4ee:	463a      	mov	r2, r7
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	47b0      	blx	r6
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	dc06      	bgt.n	800e506 <__sflush_r+0xfe>
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4fe:	81a3      	strh	r3, [r4, #12]
 800e500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e504:	e78e      	b.n	800e424 <__sflush_r+0x1c>
 800e506:	4407      	add	r7, r0
 800e508:	eba8 0800 	sub.w	r8, r8, r0
 800e50c:	e7e9      	b.n	800e4e2 <__sflush_r+0xda>
 800e50e:	bf00      	nop
 800e510:	20400001 	.word	0x20400001

0800e514 <_fflush_r>:
 800e514:	b538      	push	{r3, r4, r5, lr}
 800e516:	690b      	ldr	r3, [r1, #16]
 800e518:	4605      	mov	r5, r0
 800e51a:	460c      	mov	r4, r1
 800e51c:	b913      	cbnz	r3, 800e524 <_fflush_r+0x10>
 800e51e:	2500      	movs	r5, #0
 800e520:	4628      	mov	r0, r5
 800e522:	bd38      	pop	{r3, r4, r5, pc}
 800e524:	b118      	cbz	r0, 800e52e <_fflush_r+0x1a>
 800e526:	6983      	ldr	r3, [r0, #24]
 800e528:	b90b      	cbnz	r3, 800e52e <_fflush_r+0x1a>
 800e52a:	f000 f887 	bl	800e63c <__sinit>
 800e52e:	4b14      	ldr	r3, [pc, #80]	; (800e580 <_fflush_r+0x6c>)
 800e530:	429c      	cmp	r4, r3
 800e532:	d11b      	bne.n	800e56c <_fflush_r+0x58>
 800e534:	686c      	ldr	r4, [r5, #4]
 800e536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d0ef      	beq.n	800e51e <_fflush_r+0xa>
 800e53e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e540:	07d0      	lsls	r0, r2, #31
 800e542:	d404      	bmi.n	800e54e <_fflush_r+0x3a>
 800e544:	0599      	lsls	r1, r3, #22
 800e546:	d402      	bmi.n	800e54e <_fflush_r+0x3a>
 800e548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e54a:	f000 f915 	bl	800e778 <__retarget_lock_acquire_recursive>
 800e54e:	4628      	mov	r0, r5
 800e550:	4621      	mov	r1, r4
 800e552:	f7ff ff59 	bl	800e408 <__sflush_r>
 800e556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e558:	07da      	lsls	r2, r3, #31
 800e55a:	4605      	mov	r5, r0
 800e55c:	d4e0      	bmi.n	800e520 <_fflush_r+0xc>
 800e55e:	89a3      	ldrh	r3, [r4, #12]
 800e560:	059b      	lsls	r3, r3, #22
 800e562:	d4dd      	bmi.n	800e520 <_fflush_r+0xc>
 800e564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e566:	f000 f908 	bl	800e77a <__retarget_lock_release_recursive>
 800e56a:	e7d9      	b.n	800e520 <_fflush_r+0xc>
 800e56c:	4b05      	ldr	r3, [pc, #20]	; (800e584 <_fflush_r+0x70>)
 800e56e:	429c      	cmp	r4, r3
 800e570:	d101      	bne.n	800e576 <_fflush_r+0x62>
 800e572:	68ac      	ldr	r4, [r5, #8]
 800e574:	e7df      	b.n	800e536 <_fflush_r+0x22>
 800e576:	4b04      	ldr	r3, [pc, #16]	; (800e588 <_fflush_r+0x74>)
 800e578:	429c      	cmp	r4, r3
 800e57a:	bf08      	it	eq
 800e57c:	68ec      	ldreq	r4, [r5, #12]
 800e57e:	e7da      	b.n	800e536 <_fflush_r+0x22>
 800e580:	08011784 	.word	0x08011784
 800e584:	080117a4 	.word	0x080117a4
 800e588:	08011764 	.word	0x08011764

0800e58c <std>:
 800e58c:	2300      	movs	r3, #0
 800e58e:	b510      	push	{r4, lr}
 800e590:	4604      	mov	r4, r0
 800e592:	e9c0 3300 	strd	r3, r3, [r0]
 800e596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e59a:	6083      	str	r3, [r0, #8]
 800e59c:	8181      	strh	r1, [r0, #12]
 800e59e:	6643      	str	r3, [r0, #100]	; 0x64
 800e5a0:	81c2      	strh	r2, [r0, #14]
 800e5a2:	6183      	str	r3, [r0, #24]
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	2208      	movs	r2, #8
 800e5a8:	305c      	adds	r0, #92	; 0x5c
 800e5aa:	f7fb fddd 	bl	800a168 <memset>
 800e5ae:	4b05      	ldr	r3, [pc, #20]	; (800e5c4 <std+0x38>)
 800e5b0:	6263      	str	r3, [r4, #36]	; 0x24
 800e5b2:	4b05      	ldr	r3, [pc, #20]	; (800e5c8 <std+0x3c>)
 800e5b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5b6:	4b05      	ldr	r3, [pc, #20]	; (800e5cc <std+0x40>)
 800e5b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5ba:	4b05      	ldr	r3, [pc, #20]	; (800e5d0 <std+0x44>)
 800e5bc:	6224      	str	r4, [r4, #32]
 800e5be:	6323      	str	r3, [r4, #48]	; 0x30
 800e5c0:	bd10      	pop	{r4, pc}
 800e5c2:	bf00      	nop
 800e5c4:	0800e8e1 	.word	0x0800e8e1
 800e5c8:	0800e903 	.word	0x0800e903
 800e5cc:	0800e93b 	.word	0x0800e93b
 800e5d0:	0800e95f 	.word	0x0800e95f

0800e5d4 <_cleanup_r>:
 800e5d4:	4901      	ldr	r1, [pc, #4]	; (800e5dc <_cleanup_r+0x8>)
 800e5d6:	f000 b8af 	b.w	800e738 <_fwalk_reent>
 800e5da:	bf00      	nop
 800e5dc:	0800e515 	.word	0x0800e515

0800e5e0 <__sfmoreglue>:
 800e5e0:	b570      	push	{r4, r5, r6, lr}
 800e5e2:	2268      	movs	r2, #104	; 0x68
 800e5e4:	1e4d      	subs	r5, r1, #1
 800e5e6:	4355      	muls	r5, r2
 800e5e8:	460e      	mov	r6, r1
 800e5ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e5ee:	f7ff fa5b 	bl	800daa8 <_malloc_r>
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	b140      	cbz	r0, 800e608 <__sfmoreglue+0x28>
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	e9c0 1600 	strd	r1, r6, [r0]
 800e5fc:	300c      	adds	r0, #12
 800e5fe:	60a0      	str	r0, [r4, #8]
 800e600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e604:	f7fb fdb0 	bl	800a168 <memset>
 800e608:	4620      	mov	r0, r4
 800e60a:	bd70      	pop	{r4, r5, r6, pc}

0800e60c <__sfp_lock_acquire>:
 800e60c:	4801      	ldr	r0, [pc, #4]	; (800e614 <__sfp_lock_acquire+0x8>)
 800e60e:	f000 b8b3 	b.w	800e778 <__retarget_lock_acquire_recursive>
 800e612:	bf00      	nop
 800e614:	20005151 	.word	0x20005151

0800e618 <__sfp_lock_release>:
 800e618:	4801      	ldr	r0, [pc, #4]	; (800e620 <__sfp_lock_release+0x8>)
 800e61a:	f000 b8ae 	b.w	800e77a <__retarget_lock_release_recursive>
 800e61e:	bf00      	nop
 800e620:	20005151 	.word	0x20005151

0800e624 <__sinit_lock_acquire>:
 800e624:	4801      	ldr	r0, [pc, #4]	; (800e62c <__sinit_lock_acquire+0x8>)
 800e626:	f000 b8a7 	b.w	800e778 <__retarget_lock_acquire_recursive>
 800e62a:	bf00      	nop
 800e62c:	20005152 	.word	0x20005152

0800e630 <__sinit_lock_release>:
 800e630:	4801      	ldr	r0, [pc, #4]	; (800e638 <__sinit_lock_release+0x8>)
 800e632:	f000 b8a2 	b.w	800e77a <__retarget_lock_release_recursive>
 800e636:	bf00      	nop
 800e638:	20005152 	.word	0x20005152

0800e63c <__sinit>:
 800e63c:	b510      	push	{r4, lr}
 800e63e:	4604      	mov	r4, r0
 800e640:	f7ff fff0 	bl	800e624 <__sinit_lock_acquire>
 800e644:	69a3      	ldr	r3, [r4, #24]
 800e646:	b11b      	cbz	r3, 800e650 <__sinit+0x14>
 800e648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e64c:	f7ff bff0 	b.w	800e630 <__sinit_lock_release>
 800e650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e654:	6523      	str	r3, [r4, #80]	; 0x50
 800e656:	4b13      	ldr	r3, [pc, #76]	; (800e6a4 <__sinit+0x68>)
 800e658:	4a13      	ldr	r2, [pc, #76]	; (800e6a8 <__sinit+0x6c>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e65e:	42a3      	cmp	r3, r4
 800e660:	bf04      	itt	eq
 800e662:	2301      	moveq	r3, #1
 800e664:	61a3      	streq	r3, [r4, #24]
 800e666:	4620      	mov	r0, r4
 800e668:	f000 f820 	bl	800e6ac <__sfp>
 800e66c:	6060      	str	r0, [r4, #4]
 800e66e:	4620      	mov	r0, r4
 800e670:	f000 f81c 	bl	800e6ac <__sfp>
 800e674:	60a0      	str	r0, [r4, #8]
 800e676:	4620      	mov	r0, r4
 800e678:	f000 f818 	bl	800e6ac <__sfp>
 800e67c:	2200      	movs	r2, #0
 800e67e:	60e0      	str	r0, [r4, #12]
 800e680:	2104      	movs	r1, #4
 800e682:	6860      	ldr	r0, [r4, #4]
 800e684:	f7ff ff82 	bl	800e58c <std>
 800e688:	68a0      	ldr	r0, [r4, #8]
 800e68a:	2201      	movs	r2, #1
 800e68c:	2109      	movs	r1, #9
 800e68e:	f7ff ff7d 	bl	800e58c <std>
 800e692:	68e0      	ldr	r0, [r4, #12]
 800e694:	2202      	movs	r2, #2
 800e696:	2112      	movs	r1, #18
 800e698:	f7ff ff78 	bl	800e58c <std>
 800e69c:	2301      	movs	r3, #1
 800e69e:	61a3      	str	r3, [r4, #24]
 800e6a0:	e7d2      	b.n	800e648 <__sinit+0xc>
 800e6a2:	bf00      	nop
 800e6a4:	0801131c 	.word	0x0801131c
 800e6a8:	0800e5d5 	.word	0x0800e5d5

0800e6ac <__sfp>:
 800e6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ae:	4607      	mov	r7, r0
 800e6b0:	f7ff ffac 	bl	800e60c <__sfp_lock_acquire>
 800e6b4:	4b1e      	ldr	r3, [pc, #120]	; (800e730 <__sfp+0x84>)
 800e6b6:	681e      	ldr	r6, [r3, #0]
 800e6b8:	69b3      	ldr	r3, [r6, #24]
 800e6ba:	b913      	cbnz	r3, 800e6c2 <__sfp+0x16>
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f7ff ffbd 	bl	800e63c <__sinit>
 800e6c2:	3648      	adds	r6, #72	; 0x48
 800e6c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6c8:	3b01      	subs	r3, #1
 800e6ca:	d503      	bpl.n	800e6d4 <__sfp+0x28>
 800e6cc:	6833      	ldr	r3, [r6, #0]
 800e6ce:	b30b      	cbz	r3, 800e714 <__sfp+0x68>
 800e6d0:	6836      	ldr	r6, [r6, #0]
 800e6d2:	e7f7      	b.n	800e6c4 <__sfp+0x18>
 800e6d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6d8:	b9d5      	cbnz	r5, 800e710 <__sfp+0x64>
 800e6da:	4b16      	ldr	r3, [pc, #88]	; (800e734 <__sfp+0x88>)
 800e6dc:	60e3      	str	r3, [r4, #12]
 800e6de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e6e2:	6665      	str	r5, [r4, #100]	; 0x64
 800e6e4:	f000 f847 	bl	800e776 <__retarget_lock_init_recursive>
 800e6e8:	f7ff ff96 	bl	800e618 <__sfp_lock_release>
 800e6ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e6f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e6f4:	6025      	str	r5, [r4, #0]
 800e6f6:	61a5      	str	r5, [r4, #24]
 800e6f8:	2208      	movs	r2, #8
 800e6fa:	4629      	mov	r1, r5
 800e6fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e700:	f7fb fd32 	bl	800a168 <memset>
 800e704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e70c:	4620      	mov	r0, r4
 800e70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e710:	3468      	adds	r4, #104	; 0x68
 800e712:	e7d9      	b.n	800e6c8 <__sfp+0x1c>
 800e714:	2104      	movs	r1, #4
 800e716:	4638      	mov	r0, r7
 800e718:	f7ff ff62 	bl	800e5e0 <__sfmoreglue>
 800e71c:	4604      	mov	r4, r0
 800e71e:	6030      	str	r0, [r6, #0]
 800e720:	2800      	cmp	r0, #0
 800e722:	d1d5      	bne.n	800e6d0 <__sfp+0x24>
 800e724:	f7ff ff78 	bl	800e618 <__sfp_lock_release>
 800e728:	230c      	movs	r3, #12
 800e72a:	603b      	str	r3, [r7, #0]
 800e72c:	e7ee      	b.n	800e70c <__sfp+0x60>
 800e72e:	bf00      	nop
 800e730:	0801131c 	.word	0x0801131c
 800e734:	ffff0001 	.word	0xffff0001

0800e738 <_fwalk_reent>:
 800e738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e73c:	4606      	mov	r6, r0
 800e73e:	4688      	mov	r8, r1
 800e740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e744:	2700      	movs	r7, #0
 800e746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e74a:	f1b9 0901 	subs.w	r9, r9, #1
 800e74e:	d505      	bpl.n	800e75c <_fwalk_reent+0x24>
 800e750:	6824      	ldr	r4, [r4, #0]
 800e752:	2c00      	cmp	r4, #0
 800e754:	d1f7      	bne.n	800e746 <_fwalk_reent+0xe>
 800e756:	4638      	mov	r0, r7
 800e758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e75c:	89ab      	ldrh	r3, [r5, #12]
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d907      	bls.n	800e772 <_fwalk_reent+0x3a>
 800e762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e766:	3301      	adds	r3, #1
 800e768:	d003      	beq.n	800e772 <_fwalk_reent+0x3a>
 800e76a:	4629      	mov	r1, r5
 800e76c:	4630      	mov	r0, r6
 800e76e:	47c0      	blx	r8
 800e770:	4307      	orrs	r7, r0
 800e772:	3568      	adds	r5, #104	; 0x68
 800e774:	e7e9      	b.n	800e74a <_fwalk_reent+0x12>

0800e776 <__retarget_lock_init_recursive>:
 800e776:	4770      	bx	lr

0800e778 <__retarget_lock_acquire_recursive>:
 800e778:	4770      	bx	lr

0800e77a <__retarget_lock_release_recursive>:
 800e77a:	4770      	bx	lr

0800e77c <__swhatbuf_r>:
 800e77c:	b570      	push	{r4, r5, r6, lr}
 800e77e:	460e      	mov	r6, r1
 800e780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e784:	2900      	cmp	r1, #0
 800e786:	b096      	sub	sp, #88	; 0x58
 800e788:	4614      	mov	r4, r2
 800e78a:	461d      	mov	r5, r3
 800e78c:	da08      	bge.n	800e7a0 <__swhatbuf_r+0x24>
 800e78e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e792:	2200      	movs	r2, #0
 800e794:	602a      	str	r2, [r5, #0]
 800e796:	061a      	lsls	r2, r3, #24
 800e798:	d410      	bmi.n	800e7bc <__swhatbuf_r+0x40>
 800e79a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e79e:	e00e      	b.n	800e7be <__swhatbuf_r+0x42>
 800e7a0:	466a      	mov	r2, sp
 800e7a2:	f000 f903 	bl	800e9ac <_fstat_r>
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	dbf1      	blt.n	800e78e <__swhatbuf_r+0x12>
 800e7aa:	9a01      	ldr	r2, [sp, #4]
 800e7ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7b4:	425a      	negs	r2, r3
 800e7b6:	415a      	adcs	r2, r3
 800e7b8:	602a      	str	r2, [r5, #0]
 800e7ba:	e7ee      	b.n	800e79a <__swhatbuf_r+0x1e>
 800e7bc:	2340      	movs	r3, #64	; 0x40
 800e7be:	2000      	movs	r0, #0
 800e7c0:	6023      	str	r3, [r4, #0]
 800e7c2:	b016      	add	sp, #88	; 0x58
 800e7c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e7c8 <__smakebuf_r>:
 800e7c8:	898b      	ldrh	r3, [r1, #12]
 800e7ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7cc:	079d      	lsls	r5, r3, #30
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	460c      	mov	r4, r1
 800e7d2:	d507      	bpl.n	800e7e4 <__smakebuf_r+0x1c>
 800e7d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e7d8:	6023      	str	r3, [r4, #0]
 800e7da:	6123      	str	r3, [r4, #16]
 800e7dc:	2301      	movs	r3, #1
 800e7de:	6163      	str	r3, [r4, #20]
 800e7e0:	b002      	add	sp, #8
 800e7e2:	bd70      	pop	{r4, r5, r6, pc}
 800e7e4:	ab01      	add	r3, sp, #4
 800e7e6:	466a      	mov	r2, sp
 800e7e8:	f7ff ffc8 	bl	800e77c <__swhatbuf_r>
 800e7ec:	9900      	ldr	r1, [sp, #0]
 800e7ee:	4605      	mov	r5, r0
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	f7ff f959 	bl	800daa8 <_malloc_r>
 800e7f6:	b948      	cbnz	r0, 800e80c <__smakebuf_r+0x44>
 800e7f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7fc:	059a      	lsls	r2, r3, #22
 800e7fe:	d4ef      	bmi.n	800e7e0 <__smakebuf_r+0x18>
 800e800:	f023 0303 	bic.w	r3, r3, #3
 800e804:	f043 0302 	orr.w	r3, r3, #2
 800e808:	81a3      	strh	r3, [r4, #12]
 800e80a:	e7e3      	b.n	800e7d4 <__smakebuf_r+0xc>
 800e80c:	4b0d      	ldr	r3, [pc, #52]	; (800e844 <__smakebuf_r+0x7c>)
 800e80e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e810:	89a3      	ldrh	r3, [r4, #12]
 800e812:	6020      	str	r0, [r4, #0]
 800e814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e818:	81a3      	strh	r3, [r4, #12]
 800e81a:	9b00      	ldr	r3, [sp, #0]
 800e81c:	6163      	str	r3, [r4, #20]
 800e81e:	9b01      	ldr	r3, [sp, #4]
 800e820:	6120      	str	r0, [r4, #16]
 800e822:	b15b      	cbz	r3, 800e83c <__smakebuf_r+0x74>
 800e824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e828:	4630      	mov	r0, r6
 800e82a:	f000 f8d1 	bl	800e9d0 <_isatty_r>
 800e82e:	b128      	cbz	r0, 800e83c <__smakebuf_r+0x74>
 800e830:	89a3      	ldrh	r3, [r4, #12]
 800e832:	f023 0303 	bic.w	r3, r3, #3
 800e836:	f043 0301 	orr.w	r3, r3, #1
 800e83a:	81a3      	strh	r3, [r4, #12]
 800e83c:	89a0      	ldrh	r0, [r4, #12]
 800e83e:	4305      	orrs	r5, r0
 800e840:	81a5      	strh	r5, [r4, #12]
 800e842:	e7cd      	b.n	800e7e0 <__smakebuf_r+0x18>
 800e844:	0800e5d5 	.word	0x0800e5d5

0800e848 <_malloc_usable_size_r>:
 800e848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e84c:	1f18      	subs	r0, r3, #4
 800e84e:	2b00      	cmp	r3, #0
 800e850:	bfbc      	itt	lt
 800e852:	580b      	ldrlt	r3, [r1, r0]
 800e854:	18c0      	addlt	r0, r0, r3
 800e856:	4770      	bx	lr

0800e858 <_raise_r>:
 800e858:	291f      	cmp	r1, #31
 800e85a:	b538      	push	{r3, r4, r5, lr}
 800e85c:	4604      	mov	r4, r0
 800e85e:	460d      	mov	r5, r1
 800e860:	d904      	bls.n	800e86c <_raise_r+0x14>
 800e862:	2316      	movs	r3, #22
 800e864:	6003      	str	r3, [r0, #0]
 800e866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e86a:	bd38      	pop	{r3, r4, r5, pc}
 800e86c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e86e:	b112      	cbz	r2, 800e876 <_raise_r+0x1e>
 800e870:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e874:	b94b      	cbnz	r3, 800e88a <_raise_r+0x32>
 800e876:	4620      	mov	r0, r4
 800e878:	f000 f830 	bl	800e8dc <_getpid_r>
 800e87c:	462a      	mov	r2, r5
 800e87e:	4601      	mov	r1, r0
 800e880:	4620      	mov	r0, r4
 800e882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e886:	f000 b817 	b.w	800e8b8 <_kill_r>
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d00a      	beq.n	800e8a4 <_raise_r+0x4c>
 800e88e:	1c59      	adds	r1, r3, #1
 800e890:	d103      	bne.n	800e89a <_raise_r+0x42>
 800e892:	2316      	movs	r3, #22
 800e894:	6003      	str	r3, [r0, #0]
 800e896:	2001      	movs	r0, #1
 800e898:	e7e7      	b.n	800e86a <_raise_r+0x12>
 800e89a:	2400      	movs	r4, #0
 800e89c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	4798      	blx	r3
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	e7e0      	b.n	800e86a <_raise_r+0x12>

0800e8a8 <raise>:
 800e8a8:	4b02      	ldr	r3, [pc, #8]	; (800e8b4 <raise+0xc>)
 800e8aa:	4601      	mov	r1, r0
 800e8ac:	6818      	ldr	r0, [r3, #0]
 800e8ae:	f7ff bfd3 	b.w	800e858 <_raise_r>
 800e8b2:	bf00      	nop
 800e8b4:	20000028 	.word	0x20000028

0800e8b8 <_kill_r>:
 800e8b8:	b538      	push	{r3, r4, r5, lr}
 800e8ba:	4d07      	ldr	r5, [pc, #28]	; (800e8d8 <_kill_r+0x20>)
 800e8bc:	2300      	movs	r3, #0
 800e8be:	4604      	mov	r4, r0
 800e8c0:	4608      	mov	r0, r1
 800e8c2:	4611      	mov	r1, r2
 800e8c4:	602b      	str	r3, [r5, #0]
 800e8c6:	f7f4 fa19 	bl	8002cfc <_kill>
 800e8ca:	1c43      	adds	r3, r0, #1
 800e8cc:	d102      	bne.n	800e8d4 <_kill_r+0x1c>
 800e8ce:	682b      	ldr	r3, [r5, #0]
 800e8d0:	b103      	cbz	r3, 800e8d4 <_kill_r+0x1c>
 800e8d2:	6023      	str	r3, [r4, #0]
 800e8d4:	bd38      	pop	{r3, r4, r5, pc}
 800e8d6:	bf00      	nop
 800e8d8:	2000514c 	.word	0x2000514c

0800e8dc <_getpid_r>:
 800e8dc:	f7f4 ba06 	b.w	8002cec <_getpid>

0800e8e0 <__sread>:
 800e8e0:	b510      	push	{r4, lr}
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8e8:	f000 f894 	bl	800ea14 <_read_r>
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	bfab      	itete	ge
 800e8f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e8f2:	89a3      	ldrhlt	r3, [r4, #12]
 800e8f4:	181b      	addge	r3, r3, r0
 800e8f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e8fa:	bfac      	ite	ge
 800e8fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e8fe:	81a3      	strhlt	r3, [r4, #12]
 800e900:	bd10      	pop	{r4, pc}

0800e902 <__swrite>:
 800e902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e906:	461f      	mov	r7, r3
 800e908:	898b      	ldrh	r3, [r1, #12]
 800e90a:	05db      	lsls	r3, r3, #23
 800e90c:	4605      	mov	r5, r0
 800e90e:	460c      	mov	r4, r1
 800e910:	4616      	mov	r6, r2
 800e912:	d505      	bpl.n	800e920 <__swrite+0x1e>
 800e914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e918:	2302      	movs	r3, #2
 800e91a:	2200      	movs	r2, #0
 800e91c:	f000 f868 	bl	800e9f0 <_lseek_r>
 800e920:	89a3      	ldrh	r3, [r4, #12]
 800e922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e92a:	81a3      	strh	r3, [r4, #12]
 800e92c:	4632      	mov	r2, r6
 800e92e:	463b      	mov	r3, r7
 800e930:	4628      	mov	r0, r5
 800e932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e936:	f000 b817 	b.w	800e968 <_write_r>

0800e93a <__sseek>:
 800e93a:	b510      	push	{r4, lr}
 800e93c:	460c      	mov	r4, r1
 800e93e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e942:	f000 f855 	bl	800e9f0 <_lseek_r>
 800e946:	1c43      	adds	r3, r0, #1
 800e948:	89a3      	ldrh	r3, [r4, #12]
 800e94a:	bf15      	itete	ne
 800e94c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e94e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e956:	81a3      	strheq	r3, [r4, #12]
 800e958:	bf18      	it	ne
 800e95a:	81a3      	strhne	r3, [r4, #12]
 800e95c:	bd10      	pop	{r4, pc}

0800e95e <__sclose>:
 800e95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e962:	f000 b813 	b.w	800e98c <_close_r>
	...

0800e968 <_write_r>:
 800e968:	b538      	push	{r3, r4, r5, lr}
 800e96a:	4d07      	ldr	r5, [pc, #28]	; (800e988 <_write_r+0x20>)
 800e96c:	4604      	mov	r4, r0
 800e96e:	4608      	mov	r0, r1
 800e970:	4611      	mov	r1, r2
 800e972:	2200      	movs	r2, #0
 800e974:	602a      	str	r2, [r5, #0]
 800e976:	461a      	mov	r2, r3
 800e978:	f7f4 f9f7 	bl	8002d6a <_write>
 800e97c:	1c43      	adds	r3, r0, #1
 800e97e:	d102      	bne.n	800e986 <_write_r+0x1e>
 800e980:	682b      	ldr	r3, [r5, #0]
 800e982:	b103      	cbz	r3, 800e986 <_write_r+0x1e>
 800e984:	6023      	str	r3, [r4, #0]
 800e986:	bd38      	pop	{r3, r4, r5, pc}
 800e988:	2000514c 	.word	0x2000514c

0800e98c <_close_r>:
 800e98c:	b538      	push	{r3, r4, r5, lr}
 800e98e:	4d06      	ldr	r5, [pc, #24]	; (800e9a8 <_close_r+0x1c>)
 800e990:	2300      	movs	r3, #0
 800e992:	4604      	mov	r4, r0
 800e994:	4608      	mov	r0, r1
 800e996:	602b      	str	r3, [r5, #0]
 800e998:	f7f4 fa03 	bl	8002da2 <_close>
 800e99c:	1c43      	adds	r3, r0, #1
 800e99e:	d102      	bne.n	800e9a6 <_close_r+0x1a>
 800e9a0:	682b      	ldr	r3, [r5, #0]
 800e9a2:	b103      	cbz	r3, 800e9a6 <_close_r+0x1a>
 800e9a4:	6023      	str	r3, [r4, #0]
 800e9a6:	bd38      	pop	{r3, r4, r5, pc}
 800e9a8:	2000514c 	.word	0x2000514c

0800e9ac <_fstat_r>:
 800e9ac:	b538      	push	{r3, r4, r5, lr}
 800e9ae:	4d07      	ldr	r5, [pc, #28]	; (800e9cc <_fstat_r+0x20>)
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	4608      	mov	r0, r1
 800e9b6:	4611      	mov	r1, r2
 800e9b8:	602b      	str	r3, [r5, #0]
 800e9ba:	f7f4 f9fe 	bl	8002dba <_fstat>
 800e9be:	1c43      	adds	r3, r0, #1
 800e9c0:	d102      	bne.n	800e9c8 <_fstat_r+0x1c>
 800e9c2:	682b      	ldr	r3, [r5, #0]
 800e9c4:	b103      	cbz	r3, 800e9c8 <_fstat_r+0x1c>
 800e9c6:	6023      	str	r3, [r4, #0]
 800e9c8:	bd38      	pop	{r3, r4, r5, pc}
 800e9ca:	bf00      	nop
 800e9cc:	2000514c 	.word	0x2000514c

0800e9d0 <_isatty_r>:
 800e9d0:	b538      	push	{r3, r4, r5, lr}
 800e9d2:	4d06      	ldr	r5, [pc, #24]	; (800e9ec <_isatty_r+0x1c>)
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	4608      	mov	r0, r1
 800e9da:	602b      	str	r3, [r5, #0]
 800e9dc:	f7f4 f9fd 	bl	8002dda <_isatty>
 800e9e0:	1c43      	adds	r3, r0, #1
 800e9e2:	d102      	bne.n	800e9ea <_isatty_r+0x1a>
 800e9e4:	682b      	ldr	r3, [r5, #0]
 800e9e6:	b103      	cbz	r3, 800e9ea <_isatty_r+0x1a>
 800e9e8:	6023      	str	r3, [r4, #0]
 800e9ea:	bd38      	pop	{r3, r4, r5, pc}
 800e9ec:	2000514c 	.word	0x2000514c

0800e9f0 <_lseek_r>:
 800e9f0:	b538      	push	{r3, r4, r5, lr}
 800e9f2:	4d07      	ldr	r5, [pc, #28]	; (800ea10 <_lseek_r+0x20>)
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	4608      	mov	r0, r1
 800e9f8:	4611      	mov	r1, r2
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	602a      	str	r2, [r5, #0]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	f7f4 f9f6 	bl	8002df0 <_lseek>
 800ea04:	1c43      	adds	r3, r0, #1
 800ea06:	d102      	bne.n	800ea0e <_lseek_r+0x1e>
 800ea08:	682b      	ldr	r3, [r5, #0]
 800ea0a:	b103      	cbz	r3, 800ea0e <_lseek_r+0x1e>
 800ea0c:	6023      	str	r3, [r4, #0]
 800ea0e:	bd38      	pop	{r3, r4, r5, pc}
 800ea10:	2000514c 	.word	0x2000514c

0800ea14 <_read_r>:
 800ea14:	b538      	push	{r3, r4, r5, lr}
 800ea16:	4d07      	ldr	r5, [pc, #28]	; (800ea34 <_read_r+0x20>)
 800ea18:	4604      	mov	r4, r0
 800ea1a:	4608      	mov	r0, r1
 800ea1c:	4611      	mov	r1, r2
 800ea1e:	2200      	movs	r2, #0
 800ea20:	602a      	str	r2, [r5, #0]
 800ea22:	461a      	mov	r2, r3
 800ea24:	f7f4 f984 	bl	8002d30 <_read>
 800ea28:	1c43      	adds	r3, r0, #1
 800ea2a:	d102      	bne.n	800ea32 <_read_r+0x1e>
 800ea2c:	682b      	ldr	r3, [r5, #0]
 800ea2e:	b103      	cbz	r3, 800ea32 <_read_r+0x1e>
 800ea30:	6023      	str	r3, [r4, #0]
 800ea32:	bd38      	pop	{r3, r4, r5, pc}
 800ea34:	2000514c 	.word	0x2000514c

0800ea38 <_init>:
 800ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3a:	bf00      	nop
 800ea3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea3e:	bc08      	pop	{r3}
 800ea40:	469e      	mov	lr, r3
 800ea42:	4770      	bx	lr

0800ea44 <_fini>:
 800ea44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea46:	bf00      	nop
 800ea48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea4a:	bc08      	pop	{r3}
 800ea4c:	469e      	mov	lr, r3
 800ea4e:	4770      	bx	lr
