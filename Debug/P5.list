
P5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f18  08004f18  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f20  08004f20  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049fc  20000010  08004f38  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a0c  08004f38  00024a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121cf  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002963  00000000  00000000  0003220f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00034b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00035a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a6f  00000000  00000000  00036810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a52  00000000  00000000  0003927f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb96  00000000  00000000  00049cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8867  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cbc  00000000  00000000  000d88b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e4c 	.word	0x08004e4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004e4c 	.word	0x08004e4c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <lcd_begin>:
static void lcd_sendCmd(LCD_t *lcd, char cmd);
static void delay_us(uint16_t time);

/* Exported functions --------------------------------------------------------*/
//init lcd display
void lcd_begin(LCD_t *lcd, uint8_t cols, uint8_t rows, uint8_t dotsize) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af02      	add	r7, sp, #8
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	4608      	mov	r0, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	461a      	mov	r2, r3
 80004f2:	4603      	mov	r3, r0
 80004f4:	70fb      	strb	r3, [r7, #3]
 80004f6:	460b      	mov	r3, r1
 80004f8:	70bb      	strb	r3, [r7, #2]
 80004fa:	4613      	mov	r3, r2
 80004fc:	707b      	strb	r3, [r7, #1]
	// 4 bit initialization
	lcd->displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if (rows > 1) lcd->displayfunction |= LCD_2LINE;
 8000506:	78bb      	ldrb	r3, [r7, #2]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d908      	bls.n	800051e <lcd_begin+0x3a>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000512:	f043 0308 	orr.w	r3, r3, #8
 8000516:	b2da      	uxtb	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	lcd->rows = rows;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	78ba      	ldrb	r2, [r7, #2]
 8000522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	lcd->cols = cols;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	78fa      	ldrb	r2, [r7, #3]
 800052a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	lcd_setRowOffsets(lcd, 0x00, 0x40, 0x00 + cols, 0x40 + cols);
 800052e:	78fa      	ldrb	r2, [r7, #3]
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	3340      	adds	r3, #64	; 0x40
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	4613      	mov	r3, r2
 8000538:	2240      	movs	r2, #64	; 0x40
 800053a:	2100      	movs	r1, #0
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f8ee 	bl	800071e <lcd_setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (rows == 1)) {
 8000542:	787b      	ldrb	r3, [r7, #1]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d00b      	beq.n	8000560 <lcd_begin+0x7c>
 8000548:	78bb      	ldrb	r3, [r7, #2]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d108      	bne.n	8000560 <lcd_begin+0x7c>
		lcd->displayfunction |= LCD_5x10DOTS;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	b2da      	uxtb	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}

	HAL_Delay(50);	// wait for >40ms
 8000560:	2032      	movs	r0, #50	; 0x32
 8000562:	f000 fcb3 	bl	8000ecc <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 8000566:	2103      	movs	r1, #3
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f000 f972 	bl	8000852 <lcd_sendCmd>
	HAL_Delay(5);		// wait for >4.1ms
 800056e:	2005      	movs	r0, #5
 8000570:	f000 fcac 	bl	8000ecc <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 8000574:	2103      	movs	r1, #3
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 f96b 	bl	8000852 <lcd_sendCmd>
	delay_us(150);	// wait for >100us
 800057c:	2096      	movs	r0, #150	; 0x96
 800057e:	f000 f985 	bl	800088c <delay_us>
	lcd_sendCmd(lcd, 0x03);
 8000582:	2103      	movs	r1, #3
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f964 	bl	8000852 <lcd_sendCmd>
	lcd_sendCmd(lcd, 0x02);	//set 4 bit mode
 800058a:	2102      	movs	r1, #2
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f960 	bl	8000852 <lcd_sendCmd>
	HAL_Delay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f000 fc9a 	bl	8000ecc <HAL_Delay>

	// finally, set interface type, # lines and font size
	lcd_sendCmd(lcd, LCD_FUNCTIONSET | lcd->displayfunction);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800059e:	f043 0320 	orr.w	r3, r3, #32
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f953 	bl	8000852 <lcd_sendCmd>
	//set display control D=1,C=0, B=0, display on, cursor off and cursor blink off
	lcd->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2204      	movs	r2, #4
 80005b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_display(lcd);
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f833 	bl	8000620 <lcd_display>
	lcd_clear(lcd);  // clear display
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 f815 	bl	80005ea <lcd_clear>
	HAL_Delay(2);
 80005c0:	2002      	movs	r0, #2
 80005c2:	f000 fc83 	bl	8000ecc <HAL_Delay>
	// set the entry mode --> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2202      	movs	r2, #2
 80005ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd_sendCmd(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f938 	bl	8000852 <lcd_sendCmd>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <lcd_clear>:
// ----------------------------------------------------------------

//clear lcd display
void lcd_clear(LCD_t *lcd) {
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_CLEARDISPLAY);
 80005f2:	2101      	movs	r1, #1
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f92c 	bl	8000852 <lcd_sendCmd>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <lcd_home>:
// ----------------------------------------------------------------

// set cursor position to zero
void lcd_home(LCD_t *lcd) {
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_RETURNHOME);
 800060a:	2102      	movs	r1, #2
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f920 	bl	8000852 <lcd_sendCmd>
	HAL_Delay(2);	//delay >= 1.52ms
 8000612:	2002      	movs	r0, #2
 8000614:	f000 fc5a 	bl	8000ecc <HAL_Delay>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <lcd_display>:
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
}
// ----------------------------------------------------------------

// Turn the display on
void lcd_display(LCD_t *lcd) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_DISPLAYON;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	b2da      	uxtb	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f902 	bl	8000852 <lcd_sendCmd>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <lcd_blink>:
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
}
// ----------------------------------------------------------------

// Turn on the blinking cursor
void lcd_blink(LCD_t *lcd) {
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_BLINKON;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	b2da      	uxtb	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 f8e7 	bl	8000852 <lcd_sendCmd>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <lcd_setCursor>:
	lcd_sendCmd(lcd, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}
// ----------------------------------------------------------------

//set cursor position
void lcd_setCursor(LCD_t *lcd, uint8_t col, uint8_t row) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
 8000698:	4613      	mov	r3, r2
 800069a:	70bb      	strb	r3, [r7, #2]
	const size_t max_rows = sizeof(lcd->row_offsets) / sizeof(*lcd->row_offsets);
 800069c:	2304      	movs	r3, #4
 800069e:	60fb      	str	r3, [r7, #12]
	if (row >= max_rows) {
 80006a0:	78bb      	ldrb	r3, [r7, #2]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d803      	bhi.n	80006b0 <lcd_setCursor+0x24>
		row = max_rows - 1;    // we count rows starting w/0
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	3b01      	subs	r3, #1
 80006ae:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= lcd->rows) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80006b6:	78ba      	ldrb	r2, [r7, #2]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d304      	bcc.n	80006c6 <lcd_setCursor+0x3a>
		row = lcd->rows - 1;    // we count rows starting w/0
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80006c2:	3b01      	subs	r3, #1
 80006c4:	70bb      	strb	r3, [r7, #2]
	}

	lcd_sendCmd(lcd, LCD_SETDDRAMADDR | (col + lcd->row_offsets[row]));
 80006c6:	78bb      	ldrb	r3, [r7, #2]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	4413      	add	r3, r2
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4619      	mov	r1, r3
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 f8b5 	bl	8000852 <lcd_sendCmd>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <lcd_print>:
// ----------------------------------------------------------------

//send strings to lcd
void lcd_print(LCD_t *lcd, char *str) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	while (*str)
 80006fa:	e007      	b.n	800070c <lcd_print+0x1c>
		lcd_sendData(lcd, *str++);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	603a      	str	r2, [r7, #0]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f886 	bl	8000818 <lcd_sendData>
	while (*str)
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f3      	bne.n	80006fc <lcd_print+0xc>
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <lcd_setRowOffsets>:
// ----------------------------------------------------------------

/* Privated functions --------------------------------------------------------*/
//set row offset for diferent display
static void lcd_setRowOffsets(LCD_t *lcd, int row0, int row1, int row2,
    int row3) {
 800071e:	b480      	push	{r7}
 8000720:	b085      	sub	sp, #20
 8000722:	af00      	add	r7, sp, #0
 8000724:	60f8      	str	r0, [r7, #12]
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	603b      	str	r3, [r7, #0]
	lcd->row_offsets[0] = row0;
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	lcd->row_offsets[1] = row1;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	lcd->row_offsets[2] = row2;
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	lcd->row_offsets[3] = row3;
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	b2da      	uxtb	r2, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <lcd_send>:
// ----------------------------------------------------------------

//send info to lcd in 4 byte mode
static void lcd_send(LCD_t *lcd, char data, uint8_t rs) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
 800076c:	4613      	mov	r3, r2
 800076e:	70bb      	strb	r3, [r7, #2]
	// rs = 1 for data, rs=0 for command
	HAL_GPIO_WritePin(lcd->RS_port, lcd->RS_pin, rs);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	889b      	ldrh	r3, [r3, #4]
 8000778:	78ba      	ldrb	r2, [r7, #2]
 800077a:	4619      	mov	r1, r3
 800077c:	f000 fe34 	bl	80013e8 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(lcd->D7_port, lcd->D7_pin, ((data >> 3) & 0x01));
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	08db      	lsrs	r3, r3, #3
 800078c:	b2db      	uxtb	r3, r3
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	b2db      	uxtb	r3, r3
 8000794:	461a      	mov	r2, r3
 8000796:	f000 fe27 	bl	80013e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_port, lcd->D6_pin, ((data >> 2) & 0x01));
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	089b      	lsrs	r3, r3, #2
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	f000 fe1a 	bl	80013e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_port, lcd->D5_pin, ((data >> 1) & 0x01));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6a18      	ldr	r0, [r3, #32]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	085b      	lsrs	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	f000 fe0d 	bl	80013e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_port, lcd->D4_pin, ((data >> 0) & 0x01));
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	8b99      	ldrh	r1, [r3, #28]
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	f000 fe02 	bl	80013e8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_SET);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6918      	ldr	r0, [r3, #16]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	8a9b      	ldrh	r3, [r3, #20]
 80007ec:	2201      	movs	r2, #1
 80007ee:	4619      	mov	r1, r3
 80007f0:	f000 fdfa 	bl	80013e8 <HAL_GPIO_WritePin>
	delay_us(1);	// enable pulse must be > 450ns
 80007f4:	2001      	movs	r0, #1
 80007f6:	f000 f849 	bl	800088c <delay_us>
	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_RESET);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6918      	ldr	r0, [r3, #16]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	8a9b      	ldrh	r3, [r3, #20]
 8000802:	2200      	movs	r2, #0
 8000804:	4619      	mov	r1, r3
 8000806:	f000 fdef 	bl	80013e8 <HAL_GPIO_WritePin>
	delay_us(50);	// commands need > 37us to settle
 800080a:	2032      	movs	r0, #50	; 0x32
 800080c:	f000 f83e 	bl	800088c <delay_us>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <lcd_sendData>:
// ----------------------------------------------------------------

//send data to lcd
static void lcd_sendData(LCD_t *lcd, char data) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	char _data;

	// send higher nibble
	_data = ((data >> 4) & 0x0f);
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	091b      	lsrs	r3, r3, #4
 8000828:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);  // rs =1 for sending data
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2201      	movs	r2, #1
 800082e:	4619      	mov	r1, r3
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff95 	bl	8000760 <lcd_send>

	// send Lower nibble
	_data = ((data) & 0x0f);
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	f003 030f 	and.w	r3, r3, #15
 800083c:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2201      	movs	r2, #1
 8000842:	4619      	mov	r1, r3
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff8b 	bl	8000760 <lcd_send>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <lcd_sendCmd>:
// ----------------------------------------------------------------

//send command to lcd
static void lcd_sendCmd(LCD_t *lcd, char cmd) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	460b      	mov	r3, r1
 800085c:	70fb      	strb	r3, [r7, #3]
	char _cmd;

	// send higher nibble
	_cmd = ((cmd >> 4) & 0x0f);
 800085e:	78fb      	ldrb	r3, [r7, #3]
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);  // rs = 0 for sending command
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	2200      	movs	r2, #0
 8000868:	4619      	mov	r1, r3
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff78 	bl	8000760 <lcd_send>

	// send Lower nibble
	_cmd = ((cmd) & 0x0f);
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	2200      	movs	r2, #0
 800087c:	4619      	mov	r1, r3
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ff6e 	bl	8000760 <lcd_send>
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <delay_us>:
// ----------------------------------------------------------------

//set delay in microseconds
static void delay_us(uint16_t time) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]
	uint16_t delay = time * (HAL_RCC_GetHCLKFreq() / 1000000);
 8000896:	f001 fa25 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 800089a:	4603      	mov	r3, r0
 800089c:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <delay_us+0x44>)
 800089e:	fba2 2303 	umull	r2, r3, r2, r3
 80008a2:	0c9b      	lsrs	r3, r3, #18
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	88fa      	ldrh	r2, [r7, #6]
 80008a8:	fb12 f303 	smulbb	r3, r2, r3
 80008ac:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < delay; i += 14) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	e003      	b.n	80008bc <delay_us+0x30>
		__ASM("NOP");
 80008b4:	bf00      	nop
	for (int i = 0; i < delay; i += 14) {
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	330e      	adds	r3, #14
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	897b      	ldrh	r3, [r7, #10]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbf7      	blt.n	80008b4 <delay_us+0x28>
	}
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	431bde83 	.word	0x431bde83

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 fa86 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f87e 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f000 f912 	bl	8000b08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e4:	f000 f8e6 	bl	8000ab4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // ----- LCD SETTINGS -----
  lcd.RS_port= LCD_RS_GPIO_Port;
 80008e8:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <main+0xe0>)
 80008ea:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <main+0xe4>)
 80008ec:	601a      	str	r2, [r3, #0]
  lcd.RS_pin = LCD_RS_Pin;
 80008ee:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <main+0xe0>)
 80008f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f4:	809a      	strh	r2, [r3, #4]
  //lcd.RW_port = LCD_RW_GPIO_Port;
  //lcd.RW_pin = LCD_RW_Pin;
  lcd.EN_port = LCD_EN_GPIO_Port;
 80008f6:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <main+0xe0>)
 80008f8:	4a2f      	ldr	r2, [pc, #188]	; (80009b8 <main+0xe4>)
 80008fa:	611a      	str	r2, [r3, #16]
  lcd.EN_pin = LCD_EN_Pin;
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <main+0xe0>)
 80008fe:	2202      	movs	r2, #2
 8000900:	829a      	strh	r2, [r3, #20]
  lcd.D4_port = D4_GPIO_Port;
 8000902:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <main+0xe0>)
 8000904:	4a2c      	ldr	r2, [pc, #176]	; (80009b8 <main+0xe4>)
 8000906:	619a      	str	r2, [r3, #24]
  lcd.D4_pin = D4_Pin;
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <main+0xe0>)
 800090a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800090e:	839a      	strh	r2, [r3, #28]
  lcd.D5_port = D5_GPIO_Port;
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <main+0xe0>)
 8000912:	4a29      	ldr	r2, [pc, #164]	; (80009b8 <main+0xe4>)
 8000914:	621a      	str	r2, [r3, #32]
  lcd.D5_pin = D5_Pin;
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <main+0xe0>)
 8000918:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091c:	849a      	strh	r2, [r3, #36]	; 0x24
  lcd.D6_port = D6_GPIO_Port;
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <main+0xe0>)
 8000920:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <main+0xe4>)
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  lcd.D6_pin = D6_Pin;
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <main+0xe0>)
 8000926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800092a:	859a      	strh	r2, [r3, #44]	; 0x2c
  lcd.D7_port = D7_GPIO_Port;
 800092c:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <main+0xe0>)
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <main+0xe4>)
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
  lcd.D7_pin = D7_Pin;
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <main+0xe0>)
 8000934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000938:	869a      	strh	r2, [r3, #52]	; 0x34

  // ----- LCD Init -----
  lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 800093a:	2300      	movs	r3, #0
 800093c:	2202      	movs	r2, #2
 800093e:	2110      	movs	r1, #16
 8000940:	481c      	ldr	r0, [pc, #112]	; (80009b4 <main+0xe0>)
 8000942:	f7ff fdcf 	bl	80004e4 <lcd_begin>

  // Mensaje inicial
  lcd_setCursor(&lcd, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	481a      	ldr	r0, [pc, #104]	; (80009b4 <main+0xe0>)
 800094c:	f7ff fe9e 	bl	800068c <lcd_setCursor>
  lcd_print(&lcd, "  Tiempo Real   ");
 8000950:	491a      	ldr	r1, [pc, #104]	; (80009bc <main+0xe8>)
 8000952:	4818      	ldr	r0, [pc, #96]	; (80009b4 <main+0xe0>)
 8000954:	f7ff fecc 	bl	80006f0 <lcd_print>
  lcd_setCursor(&lcd, 0, 1);
 8000958:	2201      	movs	r2, #1
 800095a:	2100      	movs	r1, #0
 800095c:	4815      	ldr	r0, [pc, #84]	; (80009b4 <main+0xe0>)
 800095e:	f7ff fe95 	bl	800068c <lcd_setCursor>
  lcd_print(&lcd, "  Xiang & Alex  ");
 8000962:	4917      	ldr	r1, [pc, #92]	; (80009c0 <main+0xec>)
 8000964:	4813      	ldr	r0, [pc, #76]	; (80009b4 <main+0xe0>)
 8000966:	f7ff fec3 	bl	80006f0 <lcd_print>
  HAL_Delay(3000);
 800096a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800096e:	f000 faad 	bl	8000ecc <HAL_Delay>
  lcd_clear(&lcd);
 8000972:	4810      	ldr	r0, [pc, #64]	; (80009b4 <main+0xe0>)
 8000974:	f7ff fe39 	bl	80005ea <lcd_clear>
  lcd_home(&lcd);
 8000978:	480e      	ldr	r0, [pc, #56]	; (80009b4 <main+0xe0>)
 800097a:	f7ff fe42 	bl	8000602 <lcd_home>
  lcd_display(&lcd);
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <main+0xe0>)
 8000980:	f7ff fe4e 	bl	8000620 <lcd_display>
  lcd_blink(&lcd);
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <main+0xe0>)
 8000986:	f7ff fe66 	bl	8000656 <lcd_blink>
  lcd_noCursor(&lcd);
  HAL_Delay(100);*/
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800098a:	f001 fcd5 	bl	8002338 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800098e:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <main+0xf0>)
 8000990:	2100      	movs	r1, #0
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <main+0xf4>)
 8000994:	f001 fd1a 	bl	80023cc <osThreadNew>
 8000998:	4603      	mov	r3, r0
 800099a:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <main+0xf8>)
 800099c:	6013      	str	r3, [r2, #0]

  /* creation of taskLCD */
  taskLCDHandle = osThreadNew(WritteLCD, NULL, &taskLCD_attributes);
 800099e:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <main+0xfc>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <main+0x100>)
 80009a4:	f001 fd12 	bl	80023cc <osThreadNew>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <main+0x104>)
 80009ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009ae:	f001 fce7 	bl	8002380 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <main+0xde>
 80009b4:	20000078 	.word	0x20000078
 80009b8:	40020400 	.word	0x40020400
 80009bc:	08004e78 	.word	0x08004e78
 80009c0:	08004e8c 	.word	0x08004e8c
 80009c4:	08004eb8 	.word	0x08004eb8
 80009c8:	08000c15 	.word	0x08000c15
 80009cc:	20000070 	.word	0x20000070
 80009d0:	08004edc 	.word	0x08004edc
 80009d4:	08000c25 	.word	0x08000c25
 80009d8:	20000074 	.word	0x20000074

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	; 0x50
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	2230      	movs	r2, #48	; 0x30
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f004 fa26 	bl	8004e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <SystemClock_Config+0xd0>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a28      	ldr	r2, [pc, #160]	; (8000aac <SystemClock_Config+0xd0>)
 8000a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <SystemClock_Config+0xd0>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <SystemClock_Config+0xd4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <SystemClock_Config+0xd4>)
 8000a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <SystemClock_Config+0xd4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a44:	2310      	movs	r3, #16
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a50:	2310      	movs	r3, #16
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fcd8 	bl	800141c <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a72:	f000 f8df 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2102      	movs	r1, #2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 ff3a 	bl	800190c <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a9e:	f000 f8c9 	bl	8000c34 <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	; 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <MX_USART2_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aec:	f001 f92e 	bl	8001d4c <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000af6:	f000 f89d 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000002c 	.word	0x2000002c
 8000b04:	40004400 	.word	0x40004400

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a37      	ldr	r2, [pc, #220]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a30      	ldr	r2, [pc, #192]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a29      	ldr	r2, [pc, #164]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a22      	ldr	r2, [pc, #136]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <MX_GPIO_Init+0xfc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2120      	movs	r1, #32
 8000b92:	481d      	ldr	r0, [pc, #116]	; (8000c08 <MX_GPIO_Init+0x100>)
 8000b94:	f000 fc28 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|D7_Pin|D6_Pin
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f24f 4102 	movw	r1, #62466	; 0xf402
 8000b9e:	481b      	ldr	r0, [pc, #108]	; (8000c0c <MX_GPIO_Init+0x104>)
 8000ba0:	f000 fc22 	bl	80013e8 <HAL_GPIO_WritePin>
                          |D5_Pin|D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000baa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4815      	ldr	r0, [pc, #84]	; (8000c10 <MX_GPIO_Init+0x108>)
 8000bbc:	f000 fa90 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_GPIO_Init+0x100>)
 8000bd8:	f000 fa82 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin D7_Pin D6_Pin
                           D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|D7_Pin|D6_Pin
 8000bdc:	f24f 4302 	movw	r3, #62466	; 0xf402
 8000be0:	617b      	str	r3, [r7, #20]
                          |D5_Pin|D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_GPIO_Init+0x104>)
 8000bf6:	f000 fa73 	bl	80010e0 <HAL_GPIO_Init>

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40020400 	.word	0x40020400
 8000c10:	40020800 	.word	0x40020800

08000c14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f001 fc67 	bl	80024f0 <osDelay>
 8000c22:	e7fb      	b.n	8000c1c <StartDefaultTask+0x8>

08000c24 <WritteLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_WritteLCD */
void WritteLCD(void *argument)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN WritteLCD */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f001 fc5f 	bl	80024f0 <osDelay>
 8000c32:	e7fb      	b.n	8000c2c <WritteLCD+0x8>

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_MspInit+0x54>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <HAL_MspInit+0x54>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_MspInit+0x54>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_MspInit+0x54>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_MspInit+0x54>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_MspInit+0x54>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	210f      	movs	r1, #15
 8000c82:	f06f 0001 	mvn.w	r0, #1
 8000c86:	f000 fa02 	bl	800108e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12b      	bne.n	8000d12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_MspInit+0x8c>)
 8000d0e:	f000 f9e7 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f898 	bl	8000e8c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d5c:	f003 fc0e 	bl	800457c <xTaskGetSchedulerState>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d001      	beq.n	8000d6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d66:	f002 f86f 	bl	8002e48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f004 f809 	bl	8004dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fd85 	bl	80008d4 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dd8:	08004f28 	.word	0x08004f28
  ldr r2, =_sbss
 8000ddc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000de0:	20004a0c 	.word	0x20004a0c

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f931 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff ff10 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f93b 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e68:	f000 f911 	bl	800108e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	200000b8 	.word	0x200000b8

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200000b8 	.word	0x200000b8

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff47 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff5c 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff8e 	bl	8000fcc <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5d 	bl	8000f78 <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffb0 	bl	8001034 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	e159      	b.n	80013b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	429a      	cmp	r2, r3
 8001116:	f040 8148 	bne.w	80013aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d005      	beq.n	8001132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	2b02      	cmp	r3, #2
 8001130:	d130      	bne.n	8001194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f003 0201 	and.w	r2, r3, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b03      	cmp	r3, #3
 800119e:	d017      	beq.n	80011d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d123      	bne.n	8001224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	69b9      	ldr	r1, [r7, #24]
 8001220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0203 	and.w	r2, r3, #3
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80a2 	beq.w	80013aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b57      	ldr	r3, [pc, #348]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a56      	ldr	r2, [pc, #344]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b54      	ldr	r3, [pc, #336]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001282:	4a52      	ldr	r2, [pc, #328]	; (80013cc <HAL_GPIO_Init+0x2ec>)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a49      	ldr	r2, [pc, #292]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d019      	beq.n	80012e2 <HAL_GPIO_Init+0x202>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a48      	ldr	r2, [pc, #288]	; (80013d4 <HAL_GPIO_Init+0x2f4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0x1fe>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a47      	ldr	r2, [pc, #284]	; (80013d8 <HAL_GPIO_Init+0x2f8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00d      	beq.n	80012da <HAL_GPIO_Init+0x1fa>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a46      	ldr	r2, [pc, #280]	; (80013dc <HAL_GPIO_Init+0x2fc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d007      	beq.n	80012d6 <HAL_GPIO_Init+0x1f6>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a45      	ldr	r2, [pc, #276]	; (80013e0 <HAL_GPIO_Init+0x300>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_GPIO_Init+0x1f2>
 80012ce:	2304      	movs	r3, #4
 80012d0:	e008      	b.n	80012e4 <HAL_GPIO_Init+0x204>
 80012d2:	2307      	movs	r3, #7
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x204>
 80012d6:	2303      	movs	r3, #3
 80012d8:	e004      	b.n	80012e4 <HAL_GPIO_Init+0x204>
 80012da:	2302      	movs	r3, #2
 80012dc:	e002      	b.n	80012e4 <HAL_GPIO_Init+0x204>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x204>
 80012e2:	2300      	movs	r3, #0
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	f002 0203 	and.w	r2, r2, #3
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	4093      	lsls	r3, r2
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f4:	4935      	ldr	r1, [pc, #212]	; (80013cc <HAL_GPIO_Init+0x2ec>)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001302:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <HAL_GPIO_Init+0x304>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001326:	4a2f      	ldr	r2, [pc, #188]	; (80013e4 <HAL_GPIO_Init+0x304>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_GPIO_Init+0x304>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001350:	4a24      	ldr	r2, [pc, #144]	; (80013e4 <HAL_GPIO_Init+0x304>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <HAL_GPIO_Init+0x304>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800137a:	4a1a      	ldr	r2, [pc, #104]	; (80013e4 <HAL_GPIO_Init+0x304>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_GPIO_Init+0x304>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a4:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_GPIO_Init+0x304>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61fb      	str	r3, [r7, #28]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	f67f aea2 	bls.w	80010fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3724      	adds	r7, #36	; 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40013800 	.word	0x40013800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40013c00 	.word	0x40013c00

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001404:	e003      	b.n	800140e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	041a      	lsls	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	619a      	str	r2, [r3, #24]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e267      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d075      	beq.n	8001526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143a:	4b88      	ldr	r3, [pc, #544]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d00c      	beq.n	8001460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001446:	4b85      	ldr	r3, [pc, #532]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144e:	2b08      	cmp	r3, #8
 8001450:	d112      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4b82      	ldr	r3, [pc, #520]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800145e:	d10b      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	4b7e      	ldr	r3, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d05b      	beq.n	8001524 <HAL_RCC_OscConfig+0x108>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d157      	bne.n	8001524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e242      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x74>
 8001482:	4b76      	ldr	r3, [pc, #472]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a75      	ldr	r2, [pc, #468]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01d      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x98>
 800149a:	4b70      	ldr	r3, [pc, #448]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a6f      	ldr	r2, [pc, #444]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b6d      	ldr	r3, [pc, #436]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6c      	ldr	r2, [pc, #432]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 80014b4:	4b69      	ldr	r3, [pc, #420]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a68      	ldr	r2, [pc, #416]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b66      	ldr	r3, [pc, #408]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a65      	ldr	r2, [pc, #404]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fcee 	bl	8000eb4 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fcea 	bl	8000eb4 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e207      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0xc0>
 80014fa:	e014      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fcda 	bl	8000eb4 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fcd6 	bl	8000eb4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1f3      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	4b51      	ldr	r3, [pc, #324]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0xe8>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d063      	beq.n	80015fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001532:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001546:	2b08      	cmp	r3, #8
 8001548:	d11c      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b44      	ldr	r3, [pc, #272]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d116      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e1c7      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4937      	ldr	r1, [pc, #220]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	e03a      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158c:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_OscConfig+0x244>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fc8f 	bl	8000eb4 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fc8b 	bl	8000eb4 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1a8      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4925      	ldr	r1, [pc, #148]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x244>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fc6e 	bl	8000eb4 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fc6a 	bl	8000eb4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e187      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d036      	beq.n	8001674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d016      	beq.n	800163c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_RCC_OscConfig+0x248>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fc4e 	bl	8000eb4 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fc4a 	bl	8000eb4 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e167      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x200>
 800163a:	e01b      	b.n	8001674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x248>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff fc37 	bl	8000eb4 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	e00e      	b.n	8001668 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff fc33 	bl	8000eb4 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d907      	bls.n	8001668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e150      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
 800165c:	40023800 	.word	0x40023800
 8001660:	42470000 	.word	0x42470000
 8001664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	4b88      	ldr	r3, [pc, #544]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800166a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ea      	bne.n	800164a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8097 	beq.w	80017b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001686:	4b81      	ldr	r3, [pc, #516]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10f      	bne.n	80016b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b7d      	ldr	r3, [pc, #500]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a7c      	ldr	r2, [pc, #496]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b7a      	ldr	r3, [pc, #488]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b77      	ldr	r3, [pc, #476]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4b74      	ldr	r3, [pc, #464]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a73      	ldr	r2, [pc, #460]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fbf3 	bl	8000eb4 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fbef 	bl	8000eb4 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e10c      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x2ea>
 80016f8:	4b64      	ldr	r3, [pc, #400]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a63      	ldr	r2, [pc, #396]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
 8001704:	e01c      	b.n	8001740 <HAL_RCC_OscConfig+0x324>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b05      	cmp	r3, #5
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x30c>
 800170e:	4b5f      	ldr	r3, [pc, #380]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a5e      	ldr	r2, [pc, #376]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
 800171a:	4b5c      	ldr	r3, [pc, #368]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a5b      	ldr	r2, [pc, #364]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0x324>
 8001728:	4b58      	ldr	r3, [pc, #352]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	4a57      	ldr	r2, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6713      	str	r3, [r2, #112]	; 0x70
 8001734:	4b55      	ldr	r3, [pc, #340]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a54      	ldr	r2, [pc, #336]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d015      	beq.n	8001774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff fbb4 	bl	8000eb4 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff fbb0 	bl	8000eb4 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0cb      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0ee      	beq.n	8001750 <HAL_RCC_OscConfig+0x334>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff fb9e 	bl	8000eb4 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff fb9a 	bl	8000eb4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0b5      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	4b3e      	ldr	r3, [pc, #248]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1ee      	bne.n	800177c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a4:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	4a38      	ldr	r2, [pc, #224]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a1 	beq.w	80018fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d05c      	beq.n	8001880 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d141      	bne.n	8001852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb6e 	bl	8000eb4 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fb6a 	bl	8000eb4 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e087      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	4b27      	ldr	r3, [pc, #156]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	019b      	lsls	r3, r3, #6
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	3b01      	subs	r3, #1
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	491b      	ldr	r1, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fb43 	bl	8000eb4 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fb3f 	bl	8000eb4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e05c      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x416>
 8001850:	e054      	b.n	80018fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fb2c 	bl	8000eb4 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fb28 	bl	8000eb4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e045      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x444>
 800187e:	e03d      	b.n	80018fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e038      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
 800188c:	40023800 	.word	0x40023800
 8001890:	40007000 	.word	0x40007000
 8001894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_RCC_OscConfig+0x4ec>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d028      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d121      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11a      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d111      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d107      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0cc      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d90c      	bls.n	8001948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b65      	ldr	r3, [pc, #404]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b8      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	494d      	ldr	r1, [pc, #308]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d044      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d119      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e07f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e06f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e067      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4934      	ldr	r1, [pc, #208]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019fc:	f7ff fa5a 	bl	8000eb4 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a04:	f7ff fa56 	bl	8000eb4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e04f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 020c 	and.w	r2, r3, #12
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1eb      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d20c      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e032      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a92:	f000 f821 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	490a      	ldr	r1, [pc, #40]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f9ba 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08004f00 	.word	0x08004f00
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001adc:	b094      	sub	sp, #80	; 0x50
 8001ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ae8:	2300      	movs	r3, #0
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af0:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d00d      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x40>
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	f200 80e1 	bhi.w	8001cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x34>
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0a:	e0db      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b10:	e0db      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b16:	e0d8      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b18:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b22:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d063      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	2200      	movs	r2, #0
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
 8001b46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	f04f 0000 	mov.w	r0, #0
 8001b52:	f04f 0100 	mov.w	r1, #0
 8001b56:	0159      	lsls	r1, r3, #5
 8001b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b5c:	0150      	lsls	r0, r2, #5
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4621      	mov	r1, r4
 8001b64:	1a51      	subs	r1, r2, r1
 8001b66:	6139      	str	r1, [r7, #16]
 8001b68:	4629      	mov	r1, r5
 8001b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b7c:	4659      	mov	r1, fp
 8001b7e:	018b      	lsls	r3, r1, #6
 8001b80:	4651      	mov	r1, sl
 8001b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b86:	4651      	mov	r1, sl
 8001b88:	018a      	lsls	r2, r1, #6
 8001b8a:	4651      	mov	r1, sl
 8001b8c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b90:	4659      	mov	r1, fp
 8001b92:	eb63 0901 	sbc.w	r9, r3, r1
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001baa:	4690      	mov	r8, r2
 8001bac:	4699      	mov	r9, r3
 8001bae:	4623      	mov	r3, r4
 8001bb0:	eb18 0303 	adds.w	r3, r8, r3
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	eb49 0303 	adc.w	r3, r9, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bca:	4629      	mov	r1, r5
 8001bcc:	024b      	lsls	r3, r1, #9
 8001bce:	4621      	mov	r1, r4
 8001bd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	024a      	lsls	r2, r1, #9
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bde:	2200      	movs	r2, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001be8:	f7fe fafa 	bl	80001e0 <__aeabi_uldivmod>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf4:	e058      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	099b      	lsrs	r3, r3, #6
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	4611      	mov	r1, r2
 8001c02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c10:	4642      	mov	r2, r8
 8001c12:	464b      	mov	r3, r9
 8001c14:	f04f 0000 	mov.w	r0, #0
 8001c18:	f04f 0100 	mov.w	r1, #0
 8001c1c:	0159      	lsls	r1, r3, #5
 8001c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c22:	0150      	lsls	r0, r2, #5
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4641      	mov	r1, r8
 8001c2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c48:	ebb2 040a 	subs.w	r4, r2, sl
 8001c4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	00eb      	lsls	r3, r5, #3
 8001c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5e:	00e2      	lsls	r2, r4, #3
 8001c60:	4614      	mov	r4, r2
 8001c62:	461d      	mov	r5, r3
 8001c64:	4643      	mov	r3, r8
 8001c66:	18e3      	adds	r3, r4, r3
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	eb45 0303 	adc.w	r3, r5, r3
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7e:	4629      	mov	r1, r5
 8001c80:	028b      	lsls	r3, r1, #10
 8001c82:	4621      	mov	r1, r4
 8001c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c88:	4621      	mov	r1, r4
 8001c8a:	028a      	lsls	r2, r1, #10
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c92:	2200      	movs	r2, #0
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	61fa      	str	r2, [r7, #28]
 8001c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c9c:	f7fe faa0 	bl	80001e0 <__aeabi_uldivmod>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3750      	adds	r7, #80	; 0x50
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	00f42400 	.word	0x00f42400
 8001ce0:	007a1200 	.word	0x007a1200

08001ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000000 	.word	0x20000000

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d00:	f7ff fff0 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0a9b      	lsrs	r3, r3, #10
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	08004f10 	.word	0x08004f10

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d28:	f7ff ffdc 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0b5b      	lsrs	r3, r3, #13
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4903      	ldr	r1, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	08004f10 	.word	0x08004f10

08001d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e03f      	b.n	8001dde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe ff90 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	; 0x24
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f829 	bl	8001de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dec:	b0c0      	sub	sp, #256	; 0x100
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e04:	68d9      	ldr	r1, [r3, #12]
 8001e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	ea40 0301 	orr.w	r3, r0, r1
 8001e10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e40:	f021 010c 	bic.w	r1, r1, #12
 8001e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e62:	6999      	ldr	r1, [r3, #24]
 8001e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	ea40 0301 	orr.w	r3, r0, r1
 8001e6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4b8f      	ldr	r3, [pc, #572]	; (80020b4 <UART_SetConfig+0x2cc>)
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d005      	beq.n	8001e88 <UART_SetConfig+0xa0>
 8001e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b8d      	ldr	r3, [pc, #564]	; (80020b8 <UART_SetConfig+0x2d0>)
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d104      	bne.n	8001e92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e88:	f7ff ff4c 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8001e8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e90:	e003      	b.n	8001e9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e92:	f7ff ff33 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 8001e96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea4:	f040 810c 	bne.w	80020c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eac:	2200      	movs	r2, #0
 8001eae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001eb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001eb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001eba:	4622      	mov	r2, r4
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	1891      	adds	r1, r2, r2
 8001ec0:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ec2:	415b      	adcs	r3, r3
 8001ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ec6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001eca:	4621      	mov	r1, r4
 8001ecc:	eb12 0801 	adds.w	r8, r2, r1
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	eb43 0901 	adc.w	r9, r3, r1
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eea:	4690      	mov	r8, r2
 8001eec:	4699      	mov	r9, r3
 8001eee:	4623      	mov	r3, r4
 8001ef0:	eb18 0303 	adds.w	r3, r8, r3
 8001ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ef8:	462b      	mov	r3, r5
 8001efa:	eb49 0303 	adc.w	r3, r9, r3
 8001efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f16:	460b      	mov	r3, r1
 8001f18:	18db      	adds	r3, r3, r3
 8001f1a:	653b      	str	r3, [r7, #80]	; 0x50
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	eb42 0303 	adc.w	r3, r2, r3
 8001f22:	657b      	str	r3, [r7, #84]	; 0x54
 8001f24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f2c:	f7fe f958 	bl	80001e0 <__aeabi_uldivmod>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4b61      	ldr	r3, [pc, #388]	; (80020bc <UART_SetConfig+0x2d4>)
 8001f36:	fba3 2302 	umull	r2, r3, r3, r2
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	011c      	lsls	r4, r3, #4
 8001f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f42:	2200      	movs	r2, #0
 8001f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001f50:	4642      	mov	r2, r8
 8001f52:	464b      	mov	r3, r9
 8001f54:	1891      	adds	r1, r2, r2
 8001f56:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f58:	415b      	adcs	r3, r3
 8001f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f60:	4641      	mov	r1, r8
 8001f62:	eb12 0a01 	adds.w	sl, r2, r1
 8001f66:	4649      	mov	r1, r9
 8001f68:	eb43 0b01 	adc.w	fp, r3, r1
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f80:	4692      	mov	sl, r2
 8001f82:	469b      	mov	fp, r3
 8001f84:	4643      	mov	r3, r8
 8001f86:	eb1a 0303 	adds.w	r3, sl, r3
 8001f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f8e:	464b      	mov	r3, r9
 8001f90:	eb4b 0303 	adc.w	r3, fp, r3
 8001f94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fa4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001fa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001fac:	460b      	mov	r3, r1
 8001fae:	18db      	adds	r3, r3, r3
 8001fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	eb42 0303 	adc.w	r3, r2, r3
 8001fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8001fba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001fc2:	f7fe f90d 	bl	80001e0 <__aeabi_uldivmod>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <UART_SetConfig+0x2d4>)
 8001fce:	fba3 2301 	umull	r2, r3, r3, r1
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2264      	movs	r2, #100	; 0x64
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	1acb      	subs	r3, r1, r3
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <UART_SetConfig+0x2d4>)
 8001fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ff0:	441c      	add	r4, r3
 8001ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ffc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002000:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002004:	4642      	mov	r2, r8
 8002006:	464b      	mov	r3, r9
 8002008:	1891      	adds	r1, r2, r2
 800200a:	63b9      	str	r1, [r7, #56]	; 0x38
 800200c:	415b      	adcs	r3, r3
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002014:	4641      	mov	r1, r8
 8002016:	1851      	adds	r1, r2, r1
 8002018:	6339      	str	r1, [r7, #48]	; 0x30
 800201a:	4649      	mov	r1, r9
 800201c:	414b      	adcs	r3, r1
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800202c:	4659      	mov	r1, fp
 800202e:	00cb      	lsls	r3, r1, #3
 8002030:	4651      	mov	r1, sl
 8002032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002036:	4651      	mov	r1, sl
 8002038:	00ca      	lsls	r2, r1, #3
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	4603      	mov	r3, r0
 8002040:	4642      	mov	r2, r8
 8002042:	189b      	adds	r3, r3, r2
 8002044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002048:	464b      	mov	r3, r9
 800204a:	460a      	mov	r2, r1
 800204c:	eb42 0303 	adc.w	r3, r2, r3
 8002050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002060:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002064:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002068:	460b      	mov	r3, r1
 800206a:	18db      	adds	r3, r3, r3
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
 800206e:	4613      	mov	r3, r2
 8002070:	eb42 0303 	adc.w	r3, r2, r3
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002076:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800207a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800207e:	f7fe f8af 	bl	80001e0 <__aeabi_uldivmod>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <UART_SetConfig+0x2d4>)
 8002088:	fba3 1302 	umull	r1, r3, r3, r2
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	2164      	movs	r1, #100	; 0x64
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	3332      	adds	r3, #50	; 0x32
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <UART_SetConfig+0x2d4>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	095b      	lsrs	r3, r3, #5
 80020a2:	f003 0207 	and.w	r2, r3, #7
 80020a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4422      	add	r2, r4
 80020ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020b0:	e105      	b.n	80022be <UART_SetConfig+0x4d6>
 80020b2:	bf00      	nop
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40011400 	.word	0x40011400
 80020bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020c4:	2200      	movs	r2, #0
 80020c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020d2:	4642      	mov	r2, r8
 80020d4:	464b      	mov	r3, r9
 80020d6:	1891      	adds	r1, r2, r2
 80020d8:	6239      	str	r1, [r7, #32]
 80020da:	415b      	adcs	r3, r3
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020e2:	4641      	mov	r1, r8
 80020e4:	1854      	adds	r4, r2, r1
 80020e6:	4649      	mov	r1, r9
 80020e8:	eb43 0501 	adc.w	r5, r3, r1
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	00eb      	lsls	r3, r5, #3
 80020f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020fa:	00e2      	lsls	r2, r4, #3
 80020fc:	4614      	mov	r4, r2
 80020fe:	461d      	mov	r5, r3
 8002100:	4643      	mov	r3, r8
 8002102:	18e3      	adds	r3, r4, r3
 8002104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002108:	464b      	mov	r3, r9
 800210a:	eb45 0303 	adc.w	r3, r5, r3
 800210e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800211e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800212e:	4629      	mov	r1, r5
 8002130:	008b      	lsls	r3, r1, #2
 8002132:	4621      	mov	r1, r4
 8002134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002138:	4621      	mov	r1, r4
 800213a:	008a      	lsls	r2, r1, #2
 800213c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002140:	f7fe f84e 	bl	80001e0 <__aeabi_uldivmod>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4b60      	ldr	r3, [pc, #384]	; (80022cc <UART_SetConfig+0x4e4>)
 800214a:	fba3 2302 	umull	r2, r3, r3, r2
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	011c      	lsls	r4, r3, #4
 8002152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002156:	2200      	movs	r2, #0
 8002158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800215c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002160:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002164:	4642      	mov	r2, r8
 8002166:	464b      	mov	r3, r9
 8002168:	1891      	adds	r1, r2, r2
 800216a:	61b9      	str	r1, [r7, #24]
 800216c:	415b      	adcs	r3, r3
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002174:	4641      	mov	r1, r8
 8002176:	1851      	adds	r1, r2, r1
 8002178:	6139      	str	r1, [r7, #16]
 800217a:	4649      	mov	r1, r9
 800217c:	414b      	adcs	r3, r1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800218c:	4659      	mov	r1, fp
 800218e:	00cb      	lsls	r3, r1, #3
 8002190:	4651      	mov	r1, sl
 8002192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002196:	4651      	mov	r1, sl
 8002198:	00ca      	lsls	r2, r1, #3
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	4642      	mov	r2, r8
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021a8:	464b      	mov	r3, r9
 80021aa:	460a      	mov	r2, r1
 80021ac:	eb42 0303 	adc.w	r3, r2, r3
 80021b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80021be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80021cc:	4649      	mov	r1, r9
 80021ce:	008b      	lsls	r3, r1, #2
 80021d0:	4641      	mov	r1, r8
 80021d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021d6:	4641      	mov	r1, r8
 80021d8:	008a      	lsls	r2, r1, #2
 80021da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80021de:	f7fd ffff 	bl	80001e0 <__aeabi_uldivmod>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <UART_SetConfig+0x4e4>)
 80021e8:	fba3 1302 	umull	r1, r3, r3, r2
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	2164      	movs	r1, #100	; 0x64
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	3332      	adds	r3, #50	; 0x32
 80021fa:	4a34      	ldr	r2, [pc, #208]	; (80022cc <UART_SetConfig+0x4e4>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002206:	441c      	add	r4, r3
 8002208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800220c:	2200      	movs	r2, #0
 800220e:	673b      	str	r3, [r7, #112]	; 0x70
 8002210:	677a      	str	r2, [r7, #116]	; 0x74
 8002212:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002216:	4642      	mov	r2, r8
 8002218:	464b      	mov	r3, r9
 800221a:	1891      	adds	r1, r2, r2
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	415b      	adcs	r3, r3
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002226:	4641      	mov	r1, r8
 8002228:	1851      	adds	r1, r2, r1
 800222a:	6039      	str	r1, [r7, #0]
 800222c:	4649      	mov	r1, r9
 800222e:	414b      	adcs	r3, r1
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800223e:	4659      	mov	r1, fp
 8002240:	00cb      	lsls	r3, r1, #3
 8002242:	4651      	mov	r1, sl
 8002244:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002248:	4651      	mov	r1, sl
 800224a:	00ca      	lsls	r2, r1, #3
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	4603      	mov	r3, r0
 8002252:	4642      	mov	r2, r8
 8002254:	189b      	adds	r3, r3, r2
 8002256:	66bb      	str	r3, [r7, #104]	; 0x68
 8002258:	464b      	mov	r3, r9
 800225a:	460a      	mov	r2, r1
 800225c:	eb42 0303 	adc.w	r3, r2, r3
 8002260:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	663b      	str	r3, [r7, #96]	; 0x60
 800226c:	667a      	str	r2, [r7, #100]	; 0x64
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800227a:	4649      	mov	r1, r9
 800227c:	008b      	lsls	r3, r1, #2
 800227e:	4641      	mov	r1, r8
 8002280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002284:	4641      	mov	r1, r8
 8002286:	008a      	lsls	r2, r1, #2
 8002288:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800228c:	f7fd ffa8 	bl	80001e0 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <UART_SetConfig+0x4e4>)
 8002296:	fba3 1302 	umull	r1, r3, r3, r2
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2164      	movs	r1, #100	; 0x64
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	3332      	adds	r3, #50	; 0x32
 80022a8:	4a08      	ldr	r2, [pc, #32]	; (80022cc <UART_SetConfig+0x4e4>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	f003 020f 	and.w	r2, r3, #15
 80022b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4422      	add	r2, r4
 80022bc:	609a      	str	r2, [r3, #8]
}
 80022be:	bf00      	nop
 80022c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022c4:	46bd      	mov	sp, r7
 80022c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ca:	bf00      	nop
 80022cc:	51eb851f 	.word	0x51eb851f

080022d0 <__NVIC_SetPriority>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002328:	2100      	movs	r1, #0
 800232a:	f06f 0004 	mvn.w	r0, #4
 800232e:	f7ff ffcf 	bl	80022d0 <__NVIC_SetPriority>
#endif
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800233e:	f3ef 8305 	mrs	r3, IPSR
 8002342:	603b      	str	r3, [r7, #0]
  return(result);
 8002344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800234a:	f06f 0305 	mvn.w	r3, #5
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	e00c      	b.n	800236c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <osKernelInitialize+0x44>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <osKernelInitialize+0x44>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002360:	2300      	movs	r3, #0
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	e002      	b.n	800236c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800236a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200000bc 	.word	0x200000bc

08002380 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002386:	f3ef 8305 	mrs	r3, IPSR
 800238a:	603b      	str	r3, [r7, #0]
  return(result);
 800238c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002392:	f06f 0305 	mvn.w	r3, #5
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	e010      	b.n	80023bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <osKernelStart+0x48>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d109      	bne.n	80023b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80023a2:	f7ff ffbf 	bl	8002324 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <osKernelStart+0x48>)
 80023a8:	2202      	movs	r2, #2
 80023aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80023ac:	f001 fc9e 	bl	8003cec <vTaskStartScheduler>
      stat = osOK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	e002      	b.n	80023bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023bc:	687b      	ldr	r3, [r7, #4]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200000bc 	.word	0x200000bc

080023cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08e      	sub	sp, #56	; 0x38
 80023d0:	af04      	add	r7, sp, #16
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023dc:	f3ef 8305 	mrs	r3, IPSR
 80023e0:	617b      	str	r3, [r7, #20]
  return(result);
 80023e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d17e      	bne.n	80024e6 <osThreadNew+0x11a>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d07b      	beq.n	80024e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80023f2:	2318      	movs	r3, #24
 80023f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d045      	beq.n	8002492 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <osThreadNew+0x48>
        name = attr->name;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <osThreadNew+0x6e>
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b38      	cmp	r3, #56	; 0x38
 800242c:	d805      	bhi.n	800243a <osThreadNew+0x6e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <osThreadNew+0x72>
        return (NULL);
 800243a:	2300      	movs	r3, #0
 800243c:	e054      	b.n	80024e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00e      	beq.n	8002474 <osThreadNew+0xa8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b5b      	cmp	r3, #91	; 0x5b
 800245c:	d90a      	bls.n	8002474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <osThreadNew+0xa8>
        mem = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	e010      	b.n	8002496 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10c      	bne.n	8002496 <osThreadNew+0xca>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d108      	bne.n	8002496 <osThreadNew+0xca>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d104      	bne.n	8002496 <osThreadNew+0xca>
          mem = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	e001      	b.n	8002496 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d110      	bne.n	80024be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024a4:	9202      	str	r2, [sp, #8]
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6a3a      	ldr	r2, [r7, #32]
 80024b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f001 fa44 	bl	8003940 <xTaskCreateStatic>
 80024b8:	4603      	mov	r3, r0
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	e013      	b.n	80024e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d110      	bne.n	80024e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f001 fa8f 	bl	80039fa <xTaskCreate>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d001      	beq.n	80024e6 <osThreadNew+0x11a>
            hTask = NULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80024e6:	693b      	ldr	r3, [r7, #16]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024f8:	f3ef 8305 	mrs	r3, IPSR
 80024fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80024fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <osDelay+0x1c>
    stat = osErrorISR;
 8002504:	f06f 0305 	mvn.w	r3, #5
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	e007      	b.n	800251c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f001 fbb4 	bl	8003c84 <vTaskDelay>
    }
  }

  return (stat);
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <vApplicationGetIdleTaskMemory+0x2c>)
 8002538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <vApplicationGetIdleTaskMemory+0x30>)
 800253e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	200000c0 	.word	0x200000c0
 8002558:	2000011c 	.word	0x2000011c

0800255c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <vApplicationGetTimerTaskMemory+0x2c>)
 800256c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <vApplicationGetTimerTaskMemory+0x30>)
 8002572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	2000031c 	.word	0x2000031c
 800258c:	20000378 	.word	0x20000378

08002590 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800259c:	f001 fc0c 	bl	8003db8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80025a0:	4b5b      	ldr	r3, [pc, #364]	; (8002710 <pvPortMalloc+0x180>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80025a8:	f000 f920 	bl	80027ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <pvPortMalloc+0x184>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 8093 	bne.w	80026e0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01d      	beq.n	80025fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80025c0:	2208      	movs	r2, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d014      	beq.n	80025fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f023 0307 	bic.w	r3, r3, #7
 80025d8:	3308      	adds	r3, #8
 80025da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025f8:	bf00      	nop
 80025fa:	e7fe      	b.n	80025fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d06e      	beq.n	80026e0 <pvPortMalloc+0x150>
 8002602:	4b45      	ldr	r3, [pc, #276]	; (8002718 <pvPortMalloc+0x188>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d869      	bhi.n	80026e0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800260c:	4b43      	ldr	r3, [pc, #268]	; (800271c <pvPortMalloc+0x18c>)
 800260e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002610:	4b42      	ldr	r3, [pc, #264]	; (800271c <pvPortMalloc+0x18c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002616:	e004      	b.n	8002622 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	d903      	bls.n	8002634 <pvPortMalloc+0xa4>
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f1      	bne.n	8002618 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <pvPortMalloc+0x180>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263a:	429a      	cmp	r2, r3
 800263c:	d050      	beq.n	80026e0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2208      	movs	r2, #8
 8002644:	4413      	add	r3, r2
 8002646:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	1ad2      	subs	r2, r2, r3
 8002658:	2308      	movs	r3, #8
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	429a      	cmp	r2, r3
 800265e:	d91f      	bls.n	80026a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <pvPortMalloc+0xf8>
	__asm volatile
 8002672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	613b      	str	r3, [r7, #16]
}
 8002684:	bf00      	nop
 8002686:	e7fe      	b.n	8002686 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	1ad2      	subs	r2, r2, r3
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800269a:	69b8      	ldr	r0, [r7, #24]
 800269c:	f000 f908 	bl	80028b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <pvPortMalloc+0x188>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	4a1b      	ldr	r2, [pc, #108]	; (8002718 <pvPortMalloc+0x188>)
 80026ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <pvPortMalloc+0x188>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <pvPortMalloc+0x190>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d203      	bcs.n	80026c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80026ba:	4b17      	ldr	r3, [pc, #92]	; (8002718 <pvPortMalloc+0x188>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a18      	ldr	r2, [pc, #96]	; (8002720 <pvPortMalloc+0x190>)
 80026c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <pvPortMalloc+0x184>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80026d6:	4b13      	ldr	r3, [pc, #76]	; (8002724 <pvPortMalloc+0x194>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	4a11      	ldr	r2, [pc, #68]	; (8002724 <pvPortMalloc+0x194>)
 80026de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80026e0:	f001 fb78 	bl	8003dd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <pvPortMalloc+0x174>
	__asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	60fb      	str	r3, [r7, #12]
}
 8002700:	bf00      	nop
 8002702:	e7fe      	b.n	8002702 <pvPortMalloc+0x172>
	return pvReturn;
 8002704:	69fb      	ldr	r3, [r7, #28]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3728      	adds	r7, #40	; 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20004380 	.word	0x20004380
 8002714:	20004394 	.word	0x20004394
 8002718:	20004384 	.word	0x20004384
 800271c:	20004378 	.word	0x20004378
 8002720:	20004388 	.word	0x20004388
 8002724:	2000438c 	.word	0x2000438c

08002728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d04d      	beq.n	80027d6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800273a:	2308      	movs	r3, #8
 800273c:	425b      	negs	r3, r3
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4413      	add	r3, r2
 8002742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <vPortFree+0xb8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <vPortFree+0x44>
	__asm volatile
 8002756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275a:	f383 8811 	msr	BASEPRI, r3
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	60fb      	str	r3, [r7, #12]
}
 8002768:	bf00      	nop
 800276a:	e7fe      	b.n	800276a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <vPortFree+0x62>
	__asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	60bb      	str	r3, [r7, #8]
}
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <vPortFree+0xb8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01e      	beq.n	80027d6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d11a      	bne.n	80027d6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <vPortFree+0xb8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	401a      	ands	r2, r3
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80027b0:	f001 fb02 	bl	8003db8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <vPortFree+0xbc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4413      	add	r3, r2
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <vPortFree+0xbc>)
 80027c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80027c2:	6938      	ldr	r0, [r7, #16]
 80027c4:	f000 f874 	bl	80028b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <vPortFree+0xc0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	4a06      	ldr	r2, [pc, #24]	; (80027e8 <vPortFree+0xc0>)
 80027d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80027d2:	f001 faff 	bl	8003dd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20004394 	.word	0x20004394
 80027e4:	20004384 	.word	0x20004384
 80027e8:	20004390 	.word	0x20004390

080027ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80027f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <prvHeapInit+0xac>)
 80027fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00c      	beq.n	8002820 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3307      	adds	r3, #7
 800280a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0307 	bic.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <prvHeapInit+0xac>)
 800281c:	4413      	add	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002824:	4a1d      	ldr	r2, [pc, #116]	; (800289c <prvHeapInit+0xb0>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <prvHeapInit+0xb0>)
 800282c:	2200      	movs	r2, #0
 800282e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	4413      	add	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002838:	2208      	movs	r2, #8
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0307 	bic.w	r3, r3, #7
 8002846:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4a15      	ldr	r2, [pc, #84]	; (80028a0 <prvHeapInit+0xb4>)
 800284c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <prvHeapInit+0xb4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <prvHeapInit+0xb4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	1ad2      	subs	r2, r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <prvHeapInit+0xb4>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <prvHeapInit+0xb8>)
 800287a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <prvHeapInit+0xbc>)
 8002882:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <prvHeapInit+0xc0>)
 8002886:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	20000778 	.word	0x20000778
 800289c:	20004378 	.word	0x20004378
 80028a0:	20004380 	.word	0x20004380
 80028a4:	20004388 	.word	0x20004388
 80028a8:	20004384 	.word	0x20004384
 80028ac:	20004394 	.word	0x20004394

080028b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80028b8:	4b28      	ldr	r3, [pc, #160]	; (800295c <prvInsertBlockIntoFreeList+0xac>)
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e002      	b.n	80028c4 <prvInsertBlockIntoFreeList+0x14>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d8f7      	bhi.n	80028be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	4413      	add	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d108      	bne.n	80028f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	441a      	add	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	441a      	add	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d118      	bne.n	8002938 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <prvInsertBlockIntoFreeList+0xb0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d00d      	beq.n	800292e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	441a      	add	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e008      	b.n	8002940 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <prvInsertBlockIntoFreeList+0xb0>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e003      	b.n	8002940 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d002      	beq.n	800294e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20004378 	.word	0x20004378
 8002960:	20004380 	.word	0x20004380

08002964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f103 0208 	add.w	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800297c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f103 0208 	add.w	r2, r3, #8
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f103 0208 	add.w	r2, r3, #8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a1c:	d103      	bne.n	8002a26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e00c      	b.n	8002a40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3308      	adds	r3, #8
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	e002      	b.n	8002a34 <vListInsert+0x2e>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d2f6      	bcs.n	8002a2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6892      	ldr	r2, [r2, #8]
 8002a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6852      	ldr	r2, [r2, #4]
 8002a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d103      	bne.n	8002aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	1e5a      	subs	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3b04      	subs	r3, #4
 8002adc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3b04      	subs	r3, #4
 8002aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f023 0201 	bic.w	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3b04      	subs	r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002afc:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <pxPortInitialiseStack+0x64>)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3b14      	subs	r3, #20
 8002b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3b04      	subs	r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f06f 0202 	mvn.w	r2, #2
 8002b1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3b20      	subs	r3, #32
 8002b20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b22:	68fb      	ldr	r3, [r7, #12]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	08002b35 	.word	0x08002b35

08002b34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <prvTaskExitError+0x54>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b46:	d00a      	beq.n	8002b5e <prvTaskExitError+0x2a>
	__asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	60fb      	str	r3, [r7, #12]
}
 8002b5a:	bf00      	nop
 8002b5c:	e7fe      	b.n	8002b5c <prvTaskExitError+0x28>
	__asm volatile
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	60bb      	str	r3, [r7, #8]
}
 8002b70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002b72:	bf00      	nop
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0fc      	beq.n	8002b74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b7a:	bf00      	nop
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	2000000c 	.word	0x2000000c
 8002b8c:	00000000 	.word	0x00000000

08002b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <pxCurrentTCBConst2>)
 8002b92:	6819      	ldr	r1, [r3, #0]
 8002b94:	6808      	ldr	r0, [r1, #0]
 8002b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b9a:	f380 8809 	msr	PSP, r0
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f04f 0000 	mov.w	r0, #0
 8002ba6:	f380 8811 	msr	BASEPRI, r0
 8002baa:	4770      	bx	lr
 8002bac:	f3af 8000 	nop.w

08002bb0 <pxCurrentTCBConst2>:
 8002bb0:	200043e0 	.word	0x200043e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop

08002bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002bb8:	4808      	ldr	r0, [pc, #32]	; (8002bdc <prvPortStartFirstTask+0x24>)
 8002bba:	6800      	ldr	r0, [r0, #0]
 8002bbc:	6800      	ldr	r0, [r0, #0]
 8002bbe:	f380 8808 	msr	MSP, r0
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	f380 8814 	msr	CONTROL, r0
 8002bca:	b662      	cpsie	i
 8002bcc:	b661      	cpsie	f
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	df00      	svc	0
 8002bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002bda:	bf00      	nop
 8002bdc:	e000ed08 	.word	0xe000ed08

08002be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002be6:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <xPortStartScheduler+0x120>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a46      	ldr	r2, [pc, #280]	; (8002d04 <xPortStartScheduler+0x124>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d10a      	bne.n	8002c06 <xPortStartScheduler+0x26>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	613b      	str	r3, [r7, #16]
}
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <xPortStartScheduler+0x120>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a3f      	ldr	r2, [pc, #252]	; (8002d08 <xPortStartScheduler+0x128>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10a      	bne.n	8002c26 <xPortStartScheduler+0x46>
	__asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	60fb      	str	r3, [r7, #12]
}
 8002c22:	bf00      	nop
 8002c24:	e7fe      	b.n	8002c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <xPortStartScheduler+0x12c>)
 8002c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	22ff      	movs	r2, #255	; 0xff
 8002c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <xPortStartScheduler+0x130>)
 8002c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c4e:	4b31      	ldr	r3, [pc, #196]	; (8002d14 <xPortStartScheduler+0x134>)
 8002c50:	2207      	movs	r2, #7
 8002c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c54:	e009      	b.n	8002c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002c56:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <xPortStartScheduler+0x134>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	4a2d      	ldr	r2, [pc, #180]	; (8002d14 <xPortStartScheduler+0x134>)
 8002c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c72:	2b80      	cmp	r3, #128	; 0x80
 8002c74:	d0ef      	beq.n	8002c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c76:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <xPortStartScheduler+0x134>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f1c3 0307 	rsb	r3, r3, #7
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d00a      	beq.n	8002c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	60bb      	str	r3, [r7, #8]
}
 8002c94:	bf00      	nop
 8002c96:	e7fe      	b.n	8002c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <xPortStartScheduler+0x134>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <xPortStartScheduler+0x134>)
 8002ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <xPortStartScheduler+0x134>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002caa:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <xPortStartScheduler+0x134>)
 8002cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002cb6:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <xPortStartScheduler+0x138>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a17      	ldr	r2, [pc, #92]	; (8002d18 <xPortStartScheduler+0x138>)
 8002cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <xPortStartScheduler+0x138>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <xPortStartScheduler+0x138>)
 8002cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002cce:	f000 f8dd 	bl	8002e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <xPortStartScheduler+0x13c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002cd8:	f000 f8fc 	bl	8002ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <xPortStartScheduler+0x140>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <xPortStartScheduler+0x140>)
 8002ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ce8:	f7ff ff66 	bl	8002bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002cec:	f001 f9da 	bl	80040a4 <vTaskSwitchContext>
	prvTaskExitError();
 8002cf0:	f7ff ff20 	bl	8002b34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00
 8002d04:	410fc271 	.word	0x410fc271
 8002d08:	410fc270 	.word	0x410fc270
 8002d0c:	e000e400 	.word	0xe000e400
 8002d10:	20004398 	.word	0x20004398
 8002d14:	2000439c 	.word	0x2000439c
 8002d18:	e000ed20 	.word	0xe000ed20
 8002d1c:	2000000c 	.word	0x2000000c
 8002d20:	e000ef34 	.word	0xe000ef34

08002d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
	__asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	607b      	str	r3, [r7, #4]
}
 8002d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <vPortEnterCritical+0x58>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3301      	adds	r3, #1
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <vPortEnterCritical+0x58>)
 8002d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <vPortEnterCritical+0x58>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10f      	bne.n	8002d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <vPortEnterCritical+0x5c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	603b      	str	r3, [r7, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <vPortEnterCritical+0x4a>
	}
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	2000000c 	.word	0x2000000c
 8002d80:	e000ed04 	.word	0xe000ed04

08002d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <vPortExitCritical+0x50>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <vPortExitCritical+0x24>
	__asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	607b      	str	r3, [r7, #4]
}
 8002da4:	bf00      	nop
 8002da6:	e7fe      	b.n	8002da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <vPortExitCritical+0x50>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <vPortExitCritical+0x50>)
 8002db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <vPortExitCritical+0x50>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <vPortExitCritical+0x42>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	2000000c 	.word	0x2000000c
	...

08002de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002de0:	f3ef 8009 	mrs	r0, PSP
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <pxCurrentTCBConst>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	f01e 0f10 	tst.w	lr, #16
 8002df0:	bf08      	it	eq
 8002df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfa:	6010      	str	r0, [r2, #0]
 8002dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e04:	f380 8811 	msr	BASEPRI, r0
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f001 f948 	bl	80040a4 <vTaskSwitchContext>
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f380 8811 	msr	BASEPRI, r0
 8002e1c:	bc09      	pop	{r0, r3}
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	6808      	ldr	r0, [r1, #0]
 8002e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e26:	f01e 0f10 	tst.w	lr, #16
 8002e2a:	bf08      	it	eq
 8002e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e30:	f380 8809 	msr	PSP, r0
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	f3af 8000 	nop.w

08002e40 <pxCurrentTCBConst>:
 8002e40:	200043e0 	.word	0x200043e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop

08002e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	607b      	str	r3, [r7, #4]
}
 8002e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002e62:	f001 f865 	bl	8003f30 <xTaskIncrementTick>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <xPortSysTickHandler+0x40>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	2300      	movs	r3, #0
 8002e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f383 8811 	msr	BASEPRI, r3
}
 8002e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	e000ed04 	.word	0xe000ed04

08002e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <vPortSetupTimerInterrupt+0x34>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <vPortSetupTimerInterrupt+0x38>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <vPortSetupTimerInterrupt+0x3c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <vPortSetupTimerInterrupt+0x40>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <vPortSetupTimerInterrupt+0x44>)
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <vPortSetupTimerInterrupt+0x34>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000e010 	.word	0xe000e010
 8002ec4:	e000e018 	.word	0xe000e018
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	10624dd3 	.word	0x10624dd3
 8002ed0:	e000e014 	.word	0xe000e014

08002ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ee4 <vPortEnableVFP+0x10>
 8002ed8:	6801      	ldr	r1, [r0, #0]
 8002eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ede:	6001      	str	r1, [r0, #0]
 8002ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002ee2:	bf00      	nop
 8002ee4:	e000ed88 	.word	0xe000ed88

08002ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002eee:	f3ef 8305 	mrs	r3, IPSR
 8002ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b0f      	cmp	r3, #15
 8002ef8:	d914      	bls.n	8002f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002efa:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <vPortValidateInterruptPriority+0x70>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <vPortValidateInterruptPriority+0x74>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	7afa      	ldrb	r2, [r7, #11]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d20a      	bcs.n	8002f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	607b      	str	r3, [r7, #4]
}
 8002f20:	bf00      	nop
 8002f22:	e7fe      	b.n	8002f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <vPortValidateInterruptPriority+0x78>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <vPortValidateInterruptPriority+0x7c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d90a      	bls.n	8002f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	603b      	str	r3, [r7, #0]
}
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <vPortValidateInterruptPriority+0x60>
	}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000e3f0 	.word	0xe000e3f0
 8002f5c:	20004398 	.word	0x20004398
 8002f60:	e000ed0c 	.word	0xe000ed0c
 8002f64:	2000439c 	.word	0x2000439c

08002f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGenericReset+0x2a>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	60bb      	str	r3, [r7, #8]
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f92:	f7ff fec7 	bl	8002d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	441a      	add	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	68f9      	ldr	r1, [r7, #12]
 8002fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	441a      	add	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	22ff      	movs	r2, #255	; 0xff
 8002fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d114      	bne.n	8003012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01a      	beq.n	8003026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3310      	adds	r3, #16
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 f903 	bl	8004200 <xTaskRemoveFromEventList>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d012      	beq.n	8003026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <xQueueGenericReset+0xcc>)
 8003002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	e009      	b.n	8003026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3310      	adds	r3, #16
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fca4 	bl	8002964 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3324      	adds	r3, #36	; 0x24
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fc9f 	bl	8002964 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003026:	f7ff fead 	bl	8002d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800302a:	2301      	movs	r3, #1
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08e      	sub	sp, #56	; 0x38
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
}
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <xQueueGenericCreateStatic+0x52>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <xQueueGenericCreateStatic+0x56>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueGenericCreateStatic+0x58>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	623b      	str	r3, [r7, #32]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <xQueueGenericCreateStatic+0x7e>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <xQueueGenericCreateStatic+0x82>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <xQueueGenericCreateStatic+0x84>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	61fb      	str	r3, [r7, #28]
}
 80030d2:	bf00      	nop
 80030d4:	e7fe      	b.n	80030d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030d6:	2350      	movs	r3, #80	; 0x50
 80030d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b50      	cmp	r3, #80	; 0x50
 80030de:	d00a      	beq.n	80030f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	61bb      	str	r3, [r7, #24]
}
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00d      	beq.n	800311e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800310a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f805 	bl	8003128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003120:	4618      	mov	r0, r3
 8003122:	3730      	adds	r7, #48	; 0x30
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e002      	b.n	800314a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003156:	2101      	movs	r1, #1
 8003158:	69b8      	ldr	r0, [r7, #24]
 800315a:	f7ff ff05 	bl	8002f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08e      	sub	sp, #56	; 0x38
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800317e:	2300      	movs	r3, #0
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <xQueueGenericSend+0x32>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800319e:	bf00      	nop
 80031a0:	e7fe      	b.n	80031a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <xQueueGenericSend+0x40>
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <xQueueGenericSend+0x44>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <xQueueGenericSend+0x46>
 80031b4:	2300      	movs	r3, #0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <xQueueGenericSend+0x60>
	__asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031cc:	bf00      	nop
 80031ce:	e7fe      	b.n	80031ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d103      	bne.n	80031de <xQueueGenericSend+0x6e>
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <xQueueGenericSend+0x72>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <xQueueGenericSend+0x74>
 80031e2:	2300      	movs	r3, #0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <xQueueGenericSend+0x8e>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	623b      	str	r3, [r7, #32]
}
 80031fa:	bf00      	nop
 80031fc:	e7fe      	b.n	80031fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031fe:	f001 f9bd 	bl	800457c <xTaskGetSchedulerState>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <xQueueGenericSend+0x9e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <xQueueGenericSend+0xa2>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <xQueueGenericSend+0xa4>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <xQueueGenericSend+0xbe>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	61fb      	str	r3, [r7, #28]
}
 800322a:	bf00      	nop
 800322c:	e7fe      	b.n	800322c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800322e:	f7ff fd79 	bl	8002d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	429a      	cmp	r2, r3
 800323c:	d302      	bcc.n	8003244 <xQueueGenericSend+0xd4>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d129      	bne.n	8003298 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800324a:	f000 fa0b 	bl	8003664 <prvCopyDataToQueue>
 800324e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	3324      	adds	r3, #36	; 0x24
 800325c:	4618      	mov	r0, r3
 800325e:	f000 ffcf 	bl	8004200 <xTaskRemoveFromEventList>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003268:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <xQueueGenericSend+0x1f8>)
 800326a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	e00a      	b.n	8003290 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003280:	4b39      	ldr	r3, [pc, #228]	; (8003368 <xQueueGenericSend+0x1f8>)
 8003282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003290:	f7ff fd78 	bl	8002d84 <vPortExitCritical>
				return pdPASS;
 8003294:	2301      	movs	r3, #1
 8003296:	e063      	b.n	8003360 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d103      	bne.n	80032a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800329e:	f7ff fd71 	bl	8002d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e05c      	b.n	8003360 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	4618      	mov	r0, r3
 80032b2:	f001 f809 	bl	80042c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032b6:	2301      	movs	r3, #1
 80032b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032ba:	f7ff fd63 	bl	8002d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032be:	f000 fd7b 	bl	8003db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032c2:	f7ff fd2f 	bl	8002d24 <vPortEnterCritical>
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032d2:	d103      	bne.n	80032dc <xQueueGenericSend+0x16c>
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032e2:	b25b      	sxtb	r3, r3
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e8:	d103      	bne.n	80032f2 <xQueueGenericSend+0x182>
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f2:	f7ff fd47 	bl	8002d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032f6:	1d3a      	adds	r2, r7, #4
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fff8 	bl	80042f4 <xTaskCheckForTimeOut>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d124      	bne.n	8003354 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800330a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800330c:	f000 faa2 	bl	8003854 <prvIsQueueFull>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d018      	beq.n	8003348 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	3310      	adds	r3, #16
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 ff1e 	bl	8004160 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003326:	f000 fa2d 	bl	8003784 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800332a:	f000 fd53 	bl	8003dd4 <xTaskResumeAll>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f af7c 	bne.w	800322e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <xQueueGenericSend+0x1f8>)
 8003338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	e772      	b.n	800322e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800334a:	f000 fa1b 	bl	8003784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800334e:	f000 fd41 	bl	8003dd4 <xTaskResumeAll>
 8003352:	e76c      	b.n	800322e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003356:	f000 fa15 	bl	8003784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800335a:	f000 fd3b 	bl	8003dd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800335e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003360:	4618      	mov	r0, r3
 8003362:	3738      	adds	r7, #56	; 0x38
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b090      	sub	sp, #64	; 0x40
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <xQueueGenericSendFromISR+0x3c>
 80033a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <xQueueGenericSendFromISR+0x40>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <xQueueGenericSendFromISR+0x42>
 80033ac:	2300      	movs	r3, #0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033c4:	bf00      	nop
 80033c6:	e7fe      	b.n	80033c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d103      	bne.n	80033d6 <xQueueGenericSendFromISR+0x6a>
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <xQueueGenericSendFromISR+0x6e>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <xQueueGenericSendFromISR+0x70>
 80033da:	2300      	movs	r3, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	623b      	str	r3, [r7, #32]
}
 80033f2:	bf00      	nop
 80033f4:	e7fe      	b.n	80033f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033f6:	f7ff fd77 	bl	8002ee8 <vPortValidateInterruptPriority>
	__asm volatile
 80033fa:	f3ef 8211 	mrs	r2, BASEPRI
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	61fa      	str	r2, [r7, #28]
 8003410:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003412:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <xQueueGenericSendFromISR+0xbc>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d12f      	bne.n	8003488 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800342e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800343e:	f000 f911 	bl	8003664 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003442:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800344a:	d112      	bne.n	8003472 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	d016      	beq.n	8003482 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	3324      	adds	r3, #36	; 0x24
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fed1 	bl	8004200 <xTaskRemoveFromEventList>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00e      	beq.n	8003482 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e007      	b.n	8003482 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003476:	3301      	adds	r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	b25a      	sxtb	r2, r3
 800347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003482:	2301      	movs	r3, #1
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003486:	e001      	b.n	800348c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003488:	2300      	movs	r3, #0
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f383 8811 	msr	BASEPRI, r3
}
 8003496:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800349a:	4618      	mov	r0, r3
 800349c:	3740      	adds	r7, #64	; 0x40
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08c      	sub	sp, #48	; 0x30
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <xQueueReceive+0x30>
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	623b      	str	r3, [r7, #32]
}
 80034d0:	bf00      	nop
 80034d2:	e7fe      	b.n	80034d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <xQueueReceive+0x3e>
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <xQueueReceive+0x42>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <xQueueReceive+0x44>
 80034e6:	2300      	movs	r3, #0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <xQueueReceive+0x5e>
	__asm volatile
 80034ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f0:	f383 8811 	msr	BASEPRI, r3
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	61fb      	str	r3, [r7, #28]
}
 80034fe:	bf00      	nop
 8003500:	e7fe      	b.n	8003500 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003502:	f001 f83b 	bl	800457c <xTaskGetSchedulerState>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <xQueueReceive+0x6e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <xQueueReceive+0x72>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <xQueueReceive+0x74>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <xQueueReceive+0x8e>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	61bb      	str	r3, [r7, #24]
}
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003532:	f7ff fbf7 	bl	8002d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01f      	beq.n	8003582 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003546:	f000 f8f7 	bl	8003738 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00f      	beq.n	800357a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	3310      	adds	r3, #16
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fe4e 	bl	8004200 <xTaskRemoveFromEventList>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800356a:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <xQueueReceive+0x1bc>)
 800356c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800357a:	f7ff fc03 	bl	8002d84 <vPortExitCritical>
				return pdPASS;
 800357e:	2301      	movs	r3, #1
 8003580:	e069      	b.n	8003656 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d103      	bne.n	8003590 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003588:	f7ff fbfc 	bl	8002d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800358c:	2300      	movs	r3, #0
 800358e:	e062      	b.n	8003656 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003596:	f107 0310 	add.w	r3, r7, #16
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fe94 	bl	80042c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035a4:	f7ff fbee 	bl	8002d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035a8:	f000 fc06 	bl	8003db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035ac:	f7ff fbba 	bl	8002d24 <vPortEnterCritical>
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035bc:	d103      	bne.n	80035c6 <xQueueReceive+0x122>
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035cc:	b25b      	sxtb	r3, r3
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d2:	d103      	bne.n	80035dc <xQueueReceive+0x138>
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035dc:	f7ff fbd2 	bl	8002d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035e0:	1d3a      	adds	r2, r7, #4
 80035e2:	f107 0310 	add.w	r3, r7, #16
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fe83 	bl	80042f4 <xTaskCheckForTimeOut>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d123      	bne.n	800363c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035f6:	f000 f917 	bl	8003828 <prvIsQueueEmpty>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d017      	beq.n	8003630 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	3324      	adds	r3, #36	; 0x24
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fda9 	bl	8004160 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800360e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003610:	f000 f8b8 	bl	8003784 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003614:	f000 fbde 	bl	8003dd4 <xTaskResumeAll>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d189      	bne.n	8003532 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <xQueueReceive+0x1bc>)
 8003620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	e780      	b.n	8003532 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003632:	f000 f8a7 	bl	8003784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003636:	f000 fbcd 	bl	8003dd4 <xTaskResumeAll>
 800363a:	e77a      	b.n	8003532 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800363c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800363e:	f000 f8a1 	bl	8003784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003642:	f000 fbc7 	bl	8003dd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003648:	f000 f8ee 	bl	8003828 <prvIsQueueEmpty>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	f43f af6f 	beq.w	8003532 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003654:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003656:	4618      	mov	r0, r3
 8003658:	3730      	adds	r7, #48	; 0x30
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d14d      	bne.n	8003726 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 ff92 	bl	80045b8 <xTaskPriorityDisinherit>
 8003694:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	e043      	b.n	8003726 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d119      	bne.n	80036d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6858      	ldr	r0, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	461a      	mov	r2, r3
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	f001 fbb6 	bl	8004e20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	441a      	add	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d32b      	bcc.n	8003726 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	e026      	b.n	8003726 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	68d8      	ldr	r0, [r3, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	461a      	mov	r2, r3
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	f001 fb9c 	bl	8004e20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	425b      	negs	r3, r3
 80036f2:	441a      	add	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d207      	bcs.n	8003714 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	425b      	negs	r3, r3
 800370e:	441a      	add	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d105      	bne.n	8003726 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	3b01      	subs	r3, #1
 8003724:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800372e:	697b      	ldr	r3, [r7, #20]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d018      	beq.n	800377c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	441a      	add	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d303      	bcc.n	800376c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68d9      	ldr	r1, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	461a      	mov	r2, r3
 8003776:	6838      	ldr	r0, [r7, #0]
 8003778:	f001 fb52 	bl	8004e20 <memcpy>
	}
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800378c:	f7ff faca 	bl	8002d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003796:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003798:	e011      	b.n	80037be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d012      	beq.n	80037c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3324      	adds	r3, #36	; 0x24
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fd2a 	bl	8004200 <xTaskRemoveFromEventList>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037b2:	f000 fe01 	bl	80043b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	dce9      	bgt.n	800379a <prvUnlockQueue+0x16>
 80037c6:	e000      	b.n	80037ca <prvUnlockQueue+0x46>
					break;
 80037c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037d2:	f7ff fad7 	bl	8002d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037d6:	f7ff faa5 	bl	8002d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037e2:	e011      	b.n	8003808 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d012      	beq.n	8003812 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3310      	adds	r3, #16
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fd05 	bl	8004200 <xTaskRemoveFromEventList>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037fc:	f000 fddc 	bl	80043b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003800:	7bbb      	ldrb	r3, [r7, #14]
 8003802:	3b01      	subs	r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800380c:	2b00      	cmp	r3, #0
 800380e:	dce9      	bgt.n	80037e4 <prvUnlockQueue+0x60>
 8003810:	e000      	b.n	8003814 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003812:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800381c:	f7ff fab2 	bl	8002d84 <vPortExitCritical>
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003830:	f7ff fa78 	bl	8002d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e001      	b.n	8003846 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003846:	f7ff fa9d 	bl	8002d84 <vPortExitCritical>

	return xReturn;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800385c:	f7ff fa62 	bl	8002d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	429a      	cmp	r2, r3
 800386a:	d102      	bne.n	8003872 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800386c:	2301      	movs	r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e001      	b.n	8003876 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003876:	f7ff fa85 	bl	8002d84 <vPortExitCritical>

	return xReturn;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e014      	b.n	80038be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003894:	4a0f      	ldr	r2, [pc, #60]	; (80038d4 <vQueueAddToRegistry+0x50>)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038a0:	490c      	ldr	r1, [pc, #48]	; (80038d4 <vQueueAddToRegistry+0x50>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <vQueueAddToRegistry+0x50>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038b6:	e006      	b.n	80038c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b07      	cmp	r3, #7
 80038c2:	d9e7      	bls.n	8003894 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	200043a0 	.word	0x200043a0

080038d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038e8:	f7ff fa1c 	bl	8002d24 <vPortEnterCritical>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f8:	d103      	bne.n	8003902 <vQueueWaitForMessageRestricted+0x2a>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003908:	b25b      	sxtb	r3, r3
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390e:	d103      	bne.n	8003918 <vQueueWaitForMessageRestricted+0x40>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003918:	f7ff fa34 	bl	8002d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	3324      	adds	r3, #36	; 0x24
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fc3b 	bl	80041a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f7ff ff26 	bl	8003784 <prvUnlockQueue>
	}
 8003938:	bf00      	nop
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08e      	sub	sp, #56	; 0x38
 8003944:	af04      	add	r7, sp, #16
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800394e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	623b      	str	r3, [r7, #32]
}
 8003966:	bf00      	nop
 8003968:	e7fe      	b.n	8003968 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xTaskCreateStatic+0x46>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	61fb      	str	r3, [r7, #28]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003986:	235c      	movs	r3, #92	; 0x5c
 8003988:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b5c      	cmp	r3, #92	; 0x5c
 800398e:	d00a      	beq.n	80039a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	61bb      	str	r3, [r7, #24]
}
 80039a2:	bf00      	nop
 80039a4:	e7fe      	b.n	80039a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01e      	beq.n	80039ec <xTaskCreateStatic+0xac>
 80039ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039c6:	2300      	movs	r3, #0
 80039c8:	9303      	str	r3, [sp, #12]
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	9302      	str	r3, [sp, #8]
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f850 	bl	8003a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039e6:	f000 f8dd 	bl	8003ba4 <prvAddNewTaskToReadyList>
 80039ea:	e001      	b.n	80039f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039f0:	697b      	ldr	r3, [r7, #20]
	}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3728      	adds	r7, #40	; 0x28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b08c      	sub	sp, #48	; 0x30
 80039fe:	af04      	add	r7, sp, #16
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fdbe 	bl	8002590 <pvPortMalloc>
 8003a14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00e      	beq.n	8003a3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a1c:	205c      	movs	r0, #92	; 0x5c
 8003a1e:	f7fe fdb7 	bl	8002590 <pvPortMalloc>
 8003a22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a30:	e005      	b.n	8003a3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a32:	6978      	ldr	r0, [r7, #20]
 8003a34:	f7fe fe78 	bl	8002728 <vPortFree>
 8003a38:	e001      	b.n	8003a3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d017      	beq.n	8003a74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a4c:	88fa      	ldrh	r2, [r7, #6]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9303      	str	r3, [sp, #12]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f80e 	bl	8003a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a68:	69f8      	ldr	r0, [r7, #28]
 8003a6a:	f000 f89b 	bl	8003ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e002      	b.n	8003a7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
	}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	21a5      	movs	r1, #165	; 0xa5
 8003a9e:	f001 f9cd 	bl	8004e3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003aac:	3b01      	subs	r3, #1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f023 0307 	bic.w	r3, r3, #7
 8003aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	617b      	str	r3, [r7, #20]
}
 8003ad8:	bf00      	nop
 8003ada:	e7fe      	b.n	8003ada <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d01f      	beq.n	8003b22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	e012      	b.n	8003b0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	7819      	ldrb	r1, [r3, #0]
 8003af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	3334      	adds	r3, #52	; 0x34
 8003af8:	460a      	mov	r2, r1
 8003afa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d006      	beq.n	8003b16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2b0f      	cmp	r3, #15
 8003b12:	d9e9      	bls.n	8003ae8 <prvInitialiseNewTask+0x64>
 8003b14:	e000      	b.n	8003b18 <prvInitialiseNewTask+0x94>
			{
				break;
 8003b16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b20:	e003      	b.n	8003b2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	2b37      	cmp	r3, #55	; 0x37
 8003b2e:	d901      	bls.n	8003b34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b30:	2337      	movs	r3, #55	; 0x37
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	2200      	movs	r2, #0
 8003b44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe ff2a 	bl	80029a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	3318      	adds	r3, #24
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe ff25 	bl	80029a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	2200      	movs	r2, #0
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	68f9      	ldr	r1, [r7, #12]
 8003b82:	69b8      	ldr	r0, [r7, #24]
 8003b84:	f7fe ffa2 	bl	8002acc <pxPortInitialiseStack>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b9a:	bf00      	nop
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bac:	f7ff f8ba 	bl	8002d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bb0:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <prvAddNewTaskToReadyList+0xc4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <prvAddNewTaskToReadyList+0xc4>)
 8003bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bba:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <prvAddNewTaskToReadyList+0xc4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d110      	bne.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bd0:	f000 fc16 	bl	8004400 <prvInitialiseTaskLists>
 8003bd4:	e00d      	b.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bd6:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <prvAddNewTaskToReadyList+0xcc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bde:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d802      	bhi.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bec:	4a1f      	ldr	r2, [pc, #124]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <prvAddNewTaskToReadyList+0xd0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <prvAddNewTaskToReadyList+0xd0>)
 8003bfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <prvAddNewTaskToReadyList+0xd0>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <prvAddNewTaskToReadyList+0xd4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d903      	bls.n	8003c18 <prvAddNewTaskToReadyList+0x74>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <prvAddNewTaskToReadyList+0xd4>)
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <prvAddNewTaskToReadyList+0xd8>)
 8003c26:	441a      	add	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f7fe fec5 	bl	80029be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c34:	f7ff f8a6 	bl	8002d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <prvAddNewTaskToReadyList+0xcc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00e      	beq.n	8003c5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d207      	bcs.n	8003c5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <prvAddNewTaskToReadyList+0xdc>)
 8003c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	200048b4 	.word	0x200048b4
 8003c6c:	200043e0 	.word	0x200043e0
 8003c70:	200048c0 	.word	0x200048c0
 8003c74:	200048d0 	.word	0x200048d0
 8003c78:	200048bc 	.word	0x200048bc
 8003c7c:	200043e4 	.word	0x200043e4
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d017      	beq.n	8003cc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <vTaskDelay+0x60>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <vTaskDelay+0x30>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	60bb      	str	r3, [r7, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cb4:	f000 f880 	bl	8003db8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cb8:	2100      	movs	r1, #0
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fcea 	bl	8004694 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cc0:	f000 f888 	bl	8003dd4 <xTaskResumeAll>
 8003cc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d107      	bne.n	8003cdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <vTaskDelay+0x64>)
 8003cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	200048dc 	.word	0x200048dc
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cfa:	463a      	mov	r2, r7
 8003cfc:	1d39      	adds	r1, r7, #4
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fc10 	bl	8002528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	9202      	str	r2, [sp, #8]
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2300      	movs	r3, #0
 8003d18:	460a      	mov	r2, r1
 8003d1a:	4921      	ldr	r1, [pc, #132]	; (8003da0 <vTaskStartScheduler+0xb4>)
 8003d1c:	4821      	ldr	r0, [pc, #132]	; (8003da4 <vTaskStartScheduler+0xb8>)
 8003d1e:	f7ff fe0f 	bl	8003940 <xTaskCreateStatic>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4a20      	ldr	r2, [pc, #128]	; (8003da8 <vTaskStartScheduler+0xbc>)
 8003d26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d28:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <vTaskStartScheduler+0xbc>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d30:	2301      	movs	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e001      	b.n	8003d3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d102      	bne.n	8003d46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d40:	f000 fcfc 	bl	800473c <xTimerCreateTimerTask>
 8003d44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d116      	bne.n	8003d7a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	613b      	str	r3, [r7, #16]
}
 8003d5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <vTaskStartScheduler+0xc0>)
 8003d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <vTaskStartScheduler+0xc4>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d6e:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <vTaskStartScheduler+0xc8>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d74:	f7fe ff34 	bl	8002be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d78:	e00e      	b.n	8003d98 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d80:	d10a      	bne.n	8003d98 <vTaskStartScheduler+0xac>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60fb      	str	r3, [r7, #12]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <vTaskStartScheduler+0xaa>
}
 8003d98:	bf00      	nop
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	08004ea0 	.word	0x08004ea0
 8003da4:	080043d1 	.word	0x080043d1
 8003da8:	200048d8 	.word	0x200048d8
 8003dac:	200048d4 	.word	0x200048d4
 8003db0:	200048c0 	.word	0x200048c0
 8003db4:	200048b8 	.word	0x200048b8

08003db8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <vTaskSuspendAll+0x18>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	4a03      	ldr	r2, [pc, #12]	; (8003dd0 <vTaskSuspendAll+0x18>)
 8003dc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dc6:	bf00      	nop
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	200048dc 	.word	0x200048dc

08003dd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003de2:	4b42      	ldr	r3, [pc, #264]	; (8003eec <xTaskResumeAll+0x118>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <xTaskResumeAll+0x2c>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	603b      	str	r3, [r7, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	e7fe      	b.n	8003dfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e00:	f7fe ff90 	bl	8002d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e04:	4b39      	ldr	r3, [pc, #228]	; (8003eec <xTaskResumeAll+0x118>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	4a38      	ldr	r2, [pc, #224]	; (8003eec <xTaskResumeAll+0x118>)
 8003e0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <xTaskResumeAll+0x118>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d162      	bne.n	8003edc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e16:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <xTaskResumeAll+0x11c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d05e      	beq.n	8003edc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e1e:	e02f      	b.n	8003e80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e20:	4b34      	ldr	r3, [pc, #208]	; (8003ef4 <xTaskResumeAll+0x120>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3318      	adds	r3, #24
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fe23 	bl	8002a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fe1e 	bl	8002a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	4b2d      	ldr	r3, [pc, #180]	; (8003ef8 <xTaskResumeAll+0x124>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d903      	bls.n	8003e50 <xTaskResumeAll+0x7c>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <xTaskResumeAll+0x124>)
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4a27      	ldr	r2, [pc, #156]	; (8003efc <xTaskResumeAll+0x128>)
 8003e5e:	441a      	add	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f7fe fda9 	bl	80029be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <xTaskResumeAll+0x12c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d302      	bcc.n	8003e80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e7a:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <xTaskResumeAll+0x130>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e80:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <xTaskResumeAll+0x120>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1cb      	bne.n	8003e20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e8e:	f000 fb55 	bl	800453c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e92:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <xTaskResumeAll+0x134>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d010      	beq.n	8003ec0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e9e:	f000 f847 	bl	8003f30 <xTaskIncrementTick>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <xTaskResumeAll+0x130>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f1      	bne.n	8003e9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <xTaskResumeAll+0x134>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ec0:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <xTaskResumeAll+0x130>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <xTaskResumeAll+0x138>)
 8003ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003edc:	f7fe ff52 	bl	8002d84 <vPortExitCritical>

	return xAlreadyYielded;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200048dc 	.word	0x200048dc
 8003ef0:	200048b4 	.word	0x200048b4
 8003ef4:	20004874 	.word	0x20004874
 8003ef8:	200048bc 	.word	0x200048bc
 8003efc:	200043e4 	.word	0x200043e4
 8003f00:	200043e0 	.word	0x200043e0
 8003f04:	200048c8 	.word	0x200048c8
 8003f08:	200048c4 	.word	0x200048c4
 8003f0c:	e000ed04 	.word	0xe000ed04

08003f10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <xTaskGetTickCount+0x1c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f1c:	687b      	ldr	r3, [r7, #4]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	200048b8 	.word	0x200048b8

08003f30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f3a:	4b4f      	ldr	r3, [pc, #316]	; (8004078 <xTaskIncrementTick+0x148>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 808f 	bne.w	8004062 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f44:	4b4d      	ldr	r3, [pc, #308]	; (800407c <xTaskIncrementTick+0x14c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f4c:	4a4b      	ldr	r2, [pc, #300]	; (800407c <xTaskIncrementTick+0x14c>)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d120      	bne.n	8003f9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f58:	4b49      	ldr	r3, [pc, #292]	; (8004080 <xTaskIncrementTick+0x150>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	603b      	str	r3, [r7, #0]
}
 8003f74:	bf00      	nop
 8003f76:	e7fe      	b.n	8003f76 <xTaskIncrementTick+0x46>
 8003f78:	4b41      	ldr	r3, [pc, #260]	; (8004080 <xTaskIncrementTick+0x150>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	4b41      	ldr	r3, [pc, #260]	; (8004084 <xTaskIncrementTick+0x154>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3f      	ldr	r2, [pc, #252]	; (8004080 <xTaskIncrementTick+0x150>)
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4a3f      	ldr	r2, [pc, #252]	; (8004084 <xTaskIncrementTick+0x154>)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b3e      	ldr	r3, [pc, #248]	; (8004088 <xTaskIncrementTick+0x158>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	4a3d      	ldr	r2, [pc, #244]	; (8004088 <xTaskIncrementTick+0x158>)
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	f000 fad1 	bl	800453c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f9a:	4b3c      	ldr	r3, [pc, #240]	; (800408c <xTaskIncrementTick+0x15c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d349      	bcc.n	8004038 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa4:	4b36      	ldr	r3, [pc, #216]	; (8004080 <xTaskIncrementTick+0x150>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fae:	4b37      	ldr	r3, [pc, #220]	; (800408c <xTaskIncrementTick+0x15c>)
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fb4:	601a      	str	r2, [r3, #0]
					break;
 8003fb6:	e03f      	b.n	8004038 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb8:	4b31      	ldr	r3, [pc, #196]	; (8004080 <xTaskIncrementTick+0x150>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d203      	bcs.n	8003fd8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fd0:	4a2e      	ldr	r2, [pc, #184]	; (800408c <xTaskIncrementTick+0x15c>)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fd6:	e02f      	b.n	8004038 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe fd4b 	bl	8002a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3318      	adds	r3, #24
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fd42 	bl	8002a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	4b25      	ldr	r3, [pc, #148]	; (8004090 <xTaskIncrementTick+0x160>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d903      	bls.n	8004008 <xTaskIncrementTick+0xd8>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <xTaskIncrementTick+0x160>)
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <xTaskIncrementTick+0x164>)
 8004016:	441a      	add	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	3304      	adds	r3, #4
 800401c:	4619      	mov	r1, r3
 800401e:	4610      	mov	r0, r2
 8004020:	f7fe fccd 	bl	80029be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <xTaskIncrementTick+0x168>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	429a      	cmp	r2, r3
 8004030:	d3b8      	bcc.n	8003fa4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004032:	2301      	movs	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004036:	e7b5      	b.n	8003fa4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004038:	4b17      	ldr	r3, [pc, #92]	; (8004098 <xTaskIncrementTick+0x168>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403e:	4915      	ldr	r1, [pc, #84]	; (8004094 <xTaskIncrementTick+0x164>)
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d901      	bls.n	8004054 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004050:	2301      	movs	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <xTaskIncrementTick+0x16c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e004      	b.n	800406c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004062:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <xTaskIncrementTick+0x170>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3301      	adds	r3, #1
 8004068:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <xTaskIncrementTick+0x170>)
 800406a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800406c:	697b      	ldr	r3, [r7, #20]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200048dc 	.word	0x200048dc
 800407c:	200048b8 	.word	0x200048b8
 8004080:	2000486c 	.word	0x2000486c
 8004084:	20004870 	.word	0x20004870
 8004088:	200048cc 	.word	0x200048cc
 800408c:	200048d4 	.word	0x200048d4
 8004090:	200048bc 	.word	0x200048bc
 8004094:	200043e4 	.word	0x200043e4
 8004098:	200043e0 	.word	0x200043e0
 800409c:	200048c8 	.word	0x200048c8
 80040a0:	200048c4 	.word	0x200048c4

080040a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040aa:	4b28      	ldr	r3, [pc, #160]	; (800414c <vTaskSwitchContext+0xa8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040b2:	4b27      	ldr	r3, [pc, #156]	; (8004150 <vTaskSwitchContext+0xac>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040b8:	e041      	b.n	800413e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80040ba:	4b25      	ldr	r3, [pc, #148]	; (8004150 <vTaskSwitchContext+0xac>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c0:	4b24      	ldr	r3, [pc, #144]	; (8004154 <vTaskSwitchContext+0xb0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	e010      	b.n	80040ea <vTaskSwitchContext+0x46>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	607b      	str	r3, [r7, #4]
}
 80040e0:	bf00      	nop
 80040e2:	e7fe      	b.n	80040e2 <vTaskSwitchContext+0x3e>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	491b      	ldr	r1, [pc, #108]	; (8004158 <vTaskSwitchContext+0xb4>)
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0e4      	beq.n	80040c8 <vTaskSwitchContext+0x24>
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4a13      	ldr	r2, [pc, #76]	; (8004158 <vTaskSwitchContext+0xb4>)
 800410a:	4413      	add	r3, r2
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	605a      	str	r2, [r3, #4]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	3308      	adds	r3, #8
 8004120:	429a      	cmp	r2, r3
 8004122:	d104      	bne.n	800412e <vTaskSwitchContext+0x8a>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4a09      	ldr	r2, [pc, #36]	; (800415c <vTaskSwitchContext+0xb8>)
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	4a06      	ldr	r2, [pc, #24]	; (8004154 <vTaskSwitchContext+0xb0>)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6013      	str	r3, [r2, #0]
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	200048dc 	.word	0x200048dc
 8004150:	200048c8 	.word	0x200048c8
 8004154:	200048bc 	.word	0x200048bc
 8004158:	200043e4 	.word	0x200043e4
 800415c:	200043e0 	.word	0x200043e0

08004160 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	60fb      	str	r3, [r7, #12]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <vTaskPlaceOnEventList+0x44>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3318      	adds	r3, #24
 800418c:	4619      	mov	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fe fc39 	bl	8002a06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004194:	2101      	movs	r1, #1
 8004196:	6838      	ldr	r0, [r7, #0]
 8004198:	f000 fa7c 	bl	8004694 <prvAddCurrentTaskToDelayedList>
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	200043e0 	.word	0x200043e0

080041a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	617b      	str	r3, [r7, #20]
}
 80041cc:	bf00      	nop
 80041ce:	e7fe      	b.n	80041ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041d0:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <vTaskPlaceOnEventListRestricted+0x54>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3318      	adds	r3, #24
 80041d6:	4619      	mov	r1, r3
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7fe fbf0 	bl	80029be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80041e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	68b8      	ldr	r0, [r7, #8]
 80041ee:	f000 fa51 	bl	8004694 <prvAddCurrentTaskToDelayedList>
	}
 80041f2:	bf00      	nop
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	200043e0 	.word	0x200043e0

08004200 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	60fb      	str	r3, [r7, #12]
}
 8004228:	bf00      	nop
 800422a:	e7fe      	b.n	800422a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	3318      	adds	r3, #24
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fc21 	bl	8002a78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004236:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <xTaskRemoveFromEventList+0xb0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11d      	bne.n	800427a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3304      	adds	r3, #4
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe fc18 	bl	8002a78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <xTaskRemoveFromEventList+0xb4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d903      	bls.n	800425c <xTaskRemoveFromEventList+0x5c>
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <xTaskRemoveFromEventList+0xb4>)
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <xTaskRemoveFromEventList+0xb8>)
 800426a:	441a      	add	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	3304      	adds	r3, #4
 8004270:	4619      	mov	r1, r3
 8004272:	4610      	mov	r0, r2
 8004274:	f7fe fba3 	bl	80029be <vListInsertEnd>
 8004278:	e005      	b.n	8004286 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	3318      	adds	r3, #24
 800427e:	4619      	mov	r1, r3
 8004280:	480e      	ldr	r0, [pc, #56]	; (80042bc <xTaskRemoveFromEventList+0xbc>)
 8004282:	f7fe fb9c 	bl	80029be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <xTaskRemoveFromEventList+0xc0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	429a      	cmp	r2, r3
 8004292:	d905      	bls.n	80042a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004294:	2301      	movs	r3, #1
 8004296:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <xTaskRemoveFromEventList+0xc4>)
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e001      	b.n	80042a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042a4:	697b      	ldr	r3, [r7, #20]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200048dc 	.word	0x200048dc
 80042b4:	200048bc 	.word	0x200048bc
 80042b8:	200043e4 	.word	0x200043e4
 80042bc:	20004874 	.word	0x20004874
 80042c0:	200043e0 	.word	0x200043e0
 80042c4:	200048c8 	.word	0x200048c8

080042c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <vTaskInternalSetTimeOutState+0x24>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <vTaskInternalSetTimeOutState+0x28>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	605a      	str	r2, [r3, #4]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	200048cc 	.word	0x200048cc
 80042f0:	200048b8 	.word	0x200048b8

080042f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	613b      	str	r3, [r7, #16]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	60fb      	str	r3, [r7, #12]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004336:	f7fe fcf5 	bl	8002d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800433a:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <xTaskCheckForTimeOut+0xbc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004352:	d102      	bne.n	800435a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	e023      	b.n	80043a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <xTaskCheckForTimeOut+0xc0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d007      	beq.n	8004376 <xTaskCheckForTimeOut+0x82>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	429a      	cmp	r2, r3
 800436e:	d302      	bcc.n	8004376 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	e015      	b.n	80043a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	429a      	cmp	r2, r3
 800437e:	d20b      	bcs.n	8004398 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1ad2      	subs	r2, r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ff9b 	bl	80042c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	e004      	b.n	80043a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800439e:	2301      	movs	r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043a2:	f7fe fcef 	bl	8002d84 <vPortExitCritical>

	return xReturn;
 80043a6:	69fb      	ldr	r3, [r7, #28]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	200048b8 	.word	0x200048b8
 80043b4:	200048cc 	.word	0x200048cc

080043b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043bc:	4b03      	ldr	r3, [pc, #12]	; (80043cc <vTaskMissedYield+0x14>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
}
 80043c2:	bf00      	nop
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	200048c8 	.word	0x200048c8

080043d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043d8:	f000 f852 	bl	8004480 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <prvIdleTask+0x28>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d9f9      	bls.n	80043d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <prvIdleTask+0x2c>)
 80043e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043f4:	e7f0      	b.n	80043d8 <prvIdleTask+0x8>
 80043f6:	bf00      	nop
 80043f8:	200043e4 	.word	0x200043e4
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	e00c      	b.n	8004426 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <prvInitialiseTaskLists+0x60>)
 8004418:	4413      	add	r3, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe faa2 	bl	8002964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3301      	adds	r3, #1
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b37      	cmp	r3, #55	; 0x37
 800442a:	d9ef      	bls.n	800440c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800442c:	480d      	ldr	r0, [pc, #52]	; (8004464 <prvInitialiseTaskLists+0x64>)
 800442e:	f7fe fa99 	bl	8002964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004432:	480d      	ldr	r0, [pc, #52]	; (8004468 <prvInitialiseTaskLists+0x68>)
 8004434:	f7fe fa96 	bl	8002964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004438:	480c      	ldr	r0, [pc, #48]	; (800446c <prvInitialiseTaskLists+0x6c>)
 800443a:	f7fe fa93 	bl	8002964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800443e:	480c      	ldr	r0, [pc, #48]	; (8004470 <prvInitialiseTaskLists+0x70>)
 8004440:	f7fe fa90 	bl	8002964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004444:	480b      	ldr	r0, [pc, #44]	; (8004474 <prvInitialiseTaskLists+0x74>)
 8004446:	f7fe fa8d 	bl	8002964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <prvInitialiseTaskLists+0x78>)
 800444c:	4a05      	ldr	r2, [pc, #20]	; (8004464 <prvInitialiseTaskLists+0x64>)
 800444e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <prvInitialiseTaskLists+0x7c>)
 8004452:	4a05      	ldr	r2, [pc, #20]	; (8004468 <prvInitialiseTaskLists+0x68>)
 8004454:	601a      	str	r2, [r3, #0]
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	200043e4 	.word	0x200043e4
 8004464:	20004844 	.word	0x20004844
 8004468:	20004858 	.word	0x20004858
 800446c:	20004874 	.word	0x20004874
 8004470:	20004888 	.word	0x20004888
 8004474:	200048a0 	.word	0x200048a0
 8004478:	2000486c 	.word	0x2000486c
 800447c:	20004870 	.word	0x20004870

08004480 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004486:	e019      	b.n	80044bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004488:	f7fe fc4c 	bl	8002d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <prvCheckTasksWaitingTermination+0x50>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3304      	adds	r3, #4
 8004498:	4618      	mov	r0, r3
 800449a:	f7fe faed 	bl	8002a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800449e:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <prvCheckTasksWaitingTermination+0x54>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	4a0b      	ldr	r2, [pc, #44]	; (80044d4 <prvCheckTasksWaitingTermination+0x54>)
 80044a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <prvCheckTasksWaitingTermination+0x58>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	4a0a      	ldr	r2, [pc, #40]	; (80044d8 <prvCheckTasksWaitingTermination+0x58>)
 80044b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044b2:	f7fe fc67 	bl	8002d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f810 	bl	80044dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <prvCheckTasksWaitingTermination+0x58>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e1      	bne.n	8004488 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20004888 	.word	0x20004888
 80044d4:	200048b4 	.word	0x200048b4
 80044d8:	2000489c 	.word	0x2000489c

080044dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d108      	bne.n	8004500 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe f918 	bl	8002728 <vPortFree>
				vPortFree( pxTCB );
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7fe f915 	bl	8002728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044fe:	e018      	b.n	8004532 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004506:	2b01      	cmp	r3, #1
 8004508:	d103      	bne.n	8004512 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fe f90c 	bl	8002728 <vPortFree>
	}
 8004510:	e00f      	b.n	8004532 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004518:	2b02      	cmp	r3, #2
 800451a:	d00a      	beq.n	8004532 <prvDeleteTCB+0x56>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	60fb      	str	r3, [r7, #12]
}
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <prvDeleteTCB+0x54>
	}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <prvResetNextTaskUnblockTime+0x38>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <prvResetNextTaskUnblockTime+0x3c>)
 800454e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004552:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004554:	e008      	b.n	8004568 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004556:	4b07      	ldr	r3, [pc, #28]	; (8004574 <prvResetNextTaskUnblockTime+0x38>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4a04      	ldr	r2, [pc, #16]	; (8004578 <prvResetNextTaskUnblockTime+0x3c>)
 8004566:	6013      	str	r3, [r2, #0]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	2000486c 	.word	0x2000486c
 8004578:	200048d4 	.word	0x200048d4

0800457c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <xTaskGetSchedulerState+0x34>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800458a:	2301      	movs	r3, #1
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	e008      	b.n	80045a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <xTaskGetSchedulerState+0x38>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004598:	2302      	movs	r3, #2
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	e001      	b.n	80045a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045a2:	687b      	ldr	r3, [r7, #4]
	}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	200048c0 	.word	0x200048c0
 80045b4:	200048dc 	.word	0x200048dc

080045b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d056      	beq.n	800467c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045ce:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <xTaskPriorityDisinherit+0xd0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d00a      	beq.n	80045ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	60fb      	str	r3, [r7, #12]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10a      	bne.n	800460c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	60bb      	str	r3, [r7, #8]
}
 8004608:	bf00      	nop
 800460a:	e7fe      	b.n	800460a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004610:	1e5a      	subs	r2, r3, #1
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	429a      	cmp	r2, r3
 8004620:	d02c      	beq.n	800467c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004626:	2b00      	cmp	r3, #0
 8004628:	d128      	bne.n	800467c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	3304      	adds	r3, #4
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fa22 	bl	8002a78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	4b0f      	ldr	r3, [pc, #60]	; (800468c <xTaskPriorityDisinherit+0xd4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d903      	bls.n	800465c <xTaskPriorityDisinherit+0xa4>
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	4a0c      	ldr	r2, [pc, #48]	; (800468c <xTaskPriorityDisinherit+0xd4>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4a09      	ldr	r2, [pc, #36]	; (8004690 <xTaskPriorityDisinherit+0xd8>)
 800466a:	441a      	add	r2, r3
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7fe f9a3 	bl	80029be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004678:	2301      	movs	r3, #1
 800467a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800467c:	697b      	ldr	r3, [r7, #20]
	}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	200043e0 	.word	0x200043e0
 800468c:	200048bc 	.word	0x200048bc
 8004690:	200043e4 	.word	0x200043e4

08004694 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800469e:	4b21      	ldr	r3, [pc, #132]	; (8004724 <prvAddCurrentTaskToDelayedList+0x90>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a4:	4b20      	ldr	r3, [pc, #128]	; (8004728 <prvAddCurrentTaskToDelayedList+0x94>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe f9e4 	bl	8002a78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b6:	d10a      	bne.n	80046ce <prvAddCurrentTaskToDelayedList+0x3a>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046be:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <prvAddCurrentTaskToDelayedList+0x94>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4819      	ldr	r0, [pc, #100]	; (800472c <prvAddCurrentTaskToDelayedList+0x98>)
 80046c8:	f7fe f979 	bl	80029be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046cc:	e026      	b.n	800471c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <prvAddCurrentTaskToDelayedList+0x94>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d209      	bcs.n	80046fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <prvAddCurrentTaskToDelayedList+0x94>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f7fe f987 	bl	8002a06 <vListInsert>
}
 80046f8:	e010      	b.n	800471c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046fa:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <prvAddCurrentTaskToDelayedList+0xa0>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <prvAddCurrentTaskToDelayedList+0x94>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3304      	adds	r3, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f7fe f97d 	bl	8002a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <prvAddCurrentTaskToDelayedList+0xa4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	d202      	bcs.n	800471c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004716:	4a08      	ldr	r2, [pc, #32]	; (8004738 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	6013      	str	r3, [r2, #0]
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	200048b8 	.word	0x200048b8
 8004728:	200043e0 	.word	0x200043e0
 800472c:	200048a0 	.word	0x200048a0
 8004730:	20004870 	.word	0x20004870
 8004734:	2000486c 	.word	0x2000486c
 8004738:	200048d4 	.word	0x200048d4

0800473c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004746:	f000 fb07 	bl	8004d58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <xTimerCreateTimerTask+0x80>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d021      	beq.n	8004796 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800475a:	1d3a      	adds	r2, r7, #4
 800475c:	f107 0108 	add.w	r1, r7, #8
 8004760:	f107 030c 	add.w	r3, r7, #12
 8004764:	4618      	mov	r0, r3
 8004766:	f7fd fef9 	bl	800255c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	9202      	str	r2, [sp, #8]
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	2302      	movs	r3, #2
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	2300      	movs	r3, #0
 800477a:	460a      	mov	r2, r1
 800477c:	4910      	ldr	r1, [pc, #64]	; (80047c0 <xTimerCreateTimerTask+0x84>)
 800477e:	4811      	ldr	r0, [pc, #68]	; (80047c4 <xTimerCreateTimerTask+0x88>)
 8004780:	f7ff f8de 	bl	8003940 <xTaskCreateStatic>
 8004784:	4603      	mov	r3, r0
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <xTimerCreateTimerTask+0x8c>)
 8004788:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800478a:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <xTimerCreateTimerTask+0x8c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004792:	2301      	movs	r3, #1
 8004794:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	613b      	str	r3, [r7, #16]
}
 80047ae:	bf00      	nop
 80047b0:	e7fe      	b.n	80047b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047b2:	697b      	ldr	r3, [r7, #20]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20004910 	.word	0x20004910
 80047c0:	08004ea8 	.word	0x08004ea8
 80047c4:	08004901 	.word	0x08004901
 80047c8:	20004914 	.word	0x20004914

080047cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047da:	2300      	movs	r3, #0
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	623b      	str	r3, [r7, #32]
}
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047fa:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <xTimerGenericCommand+0x98>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d02a      	beq.n	8004858 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b05      	cmp	r3, #5
 8004812:	dc18      	bgt.n	8004846 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004814:	f7ff feb2 	bl	800457c <xTaskGetSchedulerState>
 8004818:	4603      	mov	r3, r0
 800481a:	2b02      	cmp	r3, #2
 800481c:	d109      	bne.n	8004832 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <xTimerGenericCommand+0x98>)
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	f107 0110 	add.w	r1, r7, #16
 8004826:	2300      	movs	r3, #0
 8004828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800482a:	f7fe fca1 	bl	8003170 <xQueueGenericSend>
 800482e:	6278      	str	r0, [r7, #36]	; 0x24
 8004830:	e012      	b.n	8004858 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <xTimerGenericCommand+0x98>)
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	f107 0110 	add.w	r1, r7, #16
 800483a:	2300      	movs	r3, #0
 800483c:	2200      	movs	r2, #0
 800483e:	f7fe fc97 	bl	8003170 <xQueueGenericSend>
 8004842:	6278      	str	r0, [r7, #36]	; 0x24
 8004844:	e008      	b.n	8004858 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004846:	4b07      	ldr	r3, [pc, #28]	; (8004864 <xTimerGenericCommand+0x98>)
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	f107 0110 	add.w	r1, r7, #16
 800484e:	2300      	movs	r3, #0
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	f7fe fd8b 	bl	800336c <xQueueGenericSendFromISR>
 8004856:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800485a:	4618      	mov	r0, r3
 800485c:	3728      	adds	r7, #40	; 0x28
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20004910 	.word	0x20004910

08004868 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af02      	add	r7, sp, #8
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004872:	4b22      	ldr	r3, [pc, #136]	; (80048fc <prvProcessExpiredTimer+0x94>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3304      	adds	r3, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe f8f9 	bl	8002a78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d022      	beq.n	80048da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	699a      	ldr	r2, [r3, #24]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	18d1      	adds	r1, r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	6978      	ldr	r0, [r7, #20]
 80048a2:	f000 f8d1 	bl	8004a48 <prvInsertTimerInActiveList>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01f      	beq.n	80048ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048ac:	2300      	movs	r3, #0
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2300      	movs	r3, #0
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	2100      	movs	r1, #0
 80048b6:	6978      	ldr	r0, [r7, #20]
 80048b8:	f7ff ff88 	bl	80047cc <xTimerGenericCommand>
 80048bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d113      	bne.n	80048ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	60fb      	str	r3, [r7, #12]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	6978      	ldr	r0, [r7, #20]
 80048f2:	4798      	blx	r3
}
 80048f4:	bf00      	nop
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20004908 	.word	0x20004908

08004900 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004908:	f107 0308 	add.w	r3, r7, #8
 800490c:	4618      	mov	r0, r3
 800490e:	f000 f857 	bl	80049c0 <prvGetNextExpireTime>
 8004912:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4619      	mov	r1, r3
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f803 	bl	8004924 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800491e:	f000 f8d5 	bl	8004acc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004922:	e7f1      	b.n	8004908 <prvTimerTask+0x8>

08004924 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800492e:	f7ff fa43 	bl	8003db8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004932:	f107 0308 	add.w	r3, r7, #8
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f866 	bl	8004a08 <prvSampleTimeNow>
 800493c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d130      	bne.n	80049a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <prvProcessTimerOrBlockTask+0x3c>
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	429a      	cmp	r2, r3
 8004950:	d806      	bhi.n	8004960 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004952:	f7ff fa3f 	bl	8003dd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff85 	bl	8004868 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800495e:	e024      	b.n	80049aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <prvProcessTimerOrBlockTask+0x90>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <prvProcessTimerOrBlockTask+0x50>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <prvProcessTimerOrBlockTask+0x52>
 8004974:	2300      	movs	r3, #0
 8004976:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <prvProcessTimerOrBlockTask+0x94>)
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	4619      	mov	r1, r3
 8004986:	f7fe ffa7 	bl	80038d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800498a:	f7ff fa23 	bl	8003dd4 <xTaskResumeAll>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <prvProcessTimerOrBlockTask+0x98>)
 8004996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	f3bf 8f6f 	isb	sy
}
 80049a4:	e001      	b.n	80049aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049a6:	f7ff fa15 	bl	8003dd4 <xTaskResumeAll>
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	2000490c 	.word	0x2000490c
 80049b8:	20004910 	.word	0x20004910
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049c8:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <prvGetNextExpireTime+0x44>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <prvGetNextExpireTime+0x16>
 80049d2:	2201      	movs	r2, #1
 80049d4:	e000      	b.n	80049d8 <prvGetNextExpireTime+0x18>
 80049d6:	2200      	movs	r2, #0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049e4:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <prvGetNextExpireTime+0x44>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e001      	b.n	80049f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049f4:	68fb      	ldr	r3, [r7, #12]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20004908 	.word	0x20004908

08004a08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a10:	f7ff fa7e 	bl	8003f10 <xTaskGetTickCount>
 8004a14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <prvSampleTimeNow+0x3c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d205      	bcs.n	8004a2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a20:	f000 f936 	bl	8004c90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e002      	b.n	8004a32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a32:	4a04      	ldr	r2, [pc, #16]	; (8004a44 <prvSampleTimeNow+0x3c>)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a38:	68fb      	ldr	r3, [r7, #12]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20004918 	.word	0x20004918

08004a48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d812      	bhi.n	8004a94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	1ad2      	subs	r2, r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d302      	bcc.n	8004a82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e01b      	b.n	8004aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a82:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <prvInsertTimerInActiveList+0x7c>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f7fd ffba 	bl	8002a06 <vListInsert>
 8004a92:	e012      	b.n	8004aba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d206      	bcs.n	8004aaa <prvInsertTimerInActiveList+0x62>
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d302      	bcc.n	8004aaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	e007      	b.n	8004aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <prvInsertTimerInActiveList+0x80>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f7fd ffa6 	bl	8002a06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004aba:	697b      	ldr	r3, [r7, #20]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	2000490c 	.word	0x2000490c
 8004ac8:	20004908 	.word	0x20004908

08004acc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08e      	sub	sp, #56	; 0x38
 8004ad0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ad2:	e0ca      	b.n	8004c6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	da18      	bge.n	8004b0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	3304      	adds	r3, #4
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10a      	bne.n	8004afc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	61fb      	str	r3, [r7, #28]
}
 8004af8:	bf00      	nop
 8004afa:	e7fe      	b.n	8004afa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b02:	6850      	ldr	r0, [r2, #4]
 8004b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b06:	6892      	ldr	r2, [r2, #8]
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f2c0 80aa 	blt.w	8004c68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d004      	beq.n	8004b2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	3304      	adds	r3, #4
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fd ffa7 	bl	8002a78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff ff6b 	bl	8004a08 <prvSampleTimeNow>
 8004b32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b09      	cmp	r3, #9
 8004b38:	f200 8097 	bhi.w	8004c6a <prvProcessReceivedCommands+0x19e>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <prvProcessReceivedCommands+0x78>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004b6d 	.word	0x08004b6d
 8004b50:	08004be1 	.word	0x08004be1
 8004b54:	08004bf5 	.word	0x08004bf5
 8004b58:	08004c3f 	.word	0x08004c3f
 8004b5c:	08004b6d 	.word	0x08004b6d
 8004b60:	08004b6d 	.word	0x08004b6d
 8004b64:	08004be1 	.word	0x08004be1
 8004b68:	08004bf5 	.word	0x08004bf5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	18d1      	adds	r1, r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b8c:	f7ff ff5c 	bl	8004a48 <prvInsertTimerInActiveList>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d069      	beq.n	8004c6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d05e      	beq.n	8004c6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	441a      	add	r2, r3
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2100      	movs	r1, #0
 8004bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bbe:	f7ff fe05 	bl	80047cc <xTimerGenericCommand>
 8004bc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d14f      	bne.n	8004c6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	61bb      	str	r3, [r7, #24]
}
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004bf2:	e03a      	b.n	8004c6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	617b      	str	r3, [r7, #20]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	18d1      	adds	r1, r2, r3
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c38:	f7ff ff06 	bl	8004a48 <prvInsertTimerInActiveList>
					break;
 8004c3c:	e015      	b.n	8004c6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d103      	bne.n	8004c54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c4e:	f7fd fd6b 	bl	8002728 <vPortFree>
 8004c52:	e00a      	b.n	8004c6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c66:	e000      	b.n	8004c6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c6a:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <prvProcessReceivedCommands+0x1c0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	1d39      	adds	r1, r7, #4
 8004c70:	2200      	movs	r2, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fc16 	bl	80034a4 <xQueueReceive>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f47f af2a 	bne.w	8004ad4 <prvProcessReceivedCommands+0x8>
	}
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	3730      	adds	r7, #48	; 0x30
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20004910 	.word	0x20004910

08004c90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c96:	e048      	b.n	8004d2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c98:	4b2d      	ldr	r3, [pc, #180]	; (8004d50 <prvSwitchTimerLists+0xc0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca2:	4b2b      	ldr	r3, [pc, #172]	; (8004d50 <prvSwitchTimerLists+0xc0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fd fee1 	bl	8002a78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d02e      	beq.n	8004d2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d90e      	bls.n	8004cfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cea:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <prvSwitchTimerLists+0xc0>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f7fd fe86 	bl	8002a06 <vListInsert>
 8004cfa:	e016      	b.n	8004d2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	2300      	movs	r3, #0
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	2100      	movs	r1, #0
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff fd60 	bl	80047cc <xTimerGenericCommand>
 8004d0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	603b      	str	r3, [r7, #0]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <prvSwitchTimerLists+0xc0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1b1      	bne.n	8004c98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d34:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <prvSwitchTimerLists+0xc0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d3a:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <prvSwitchTimerLists+0xc4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a04      	ldr	r2, [pc, #16]	; (8004d50 <prvSwitchTimerLists+0xc0>)
 8004d40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d42:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <prvSwitchTimerLists+0xc4>)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	6013      	str	r3, [r2, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20004908 	.word	0x20004908
 8004d54:	2000490c 	.word	0x2000490c

08004d58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d5e:	f7fd ffe1 	bl	8002d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d120      	bne.n	8004dac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d6a:	4814      	ldr	r0, [pc, #80]	; (8004dbc <prvCheckForValidListAndQueue+0x64>)
 8004d6c:	f7fd fdfa 	bl	8002964 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d70:	4813      	ldr	r0, [pc, #76]	; (8004dc0 <prvCheckForValidListAndQueue+0x68>)
 8004d72:	f7fd fdf7 	bl	8002964 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <prvCheckForValidListAndQueue+0x6c>)
 8004d78:	4a10      	ldr	r2, [pc, #64]	; (8004dbc <prvCheckForValidListAndQueue+0x64>)
 8004d7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d7c:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <prvCheckForValidListAndQueue+0x70>)
 8004d7e:	4a10      	ldr	r2, [pc, #64]	; (8004dc0 <prvCheckForValidListAndQueue+0x68>)
 8004d80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d82:	2300      	movs	r3, #0
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <prvCheckForValidListAndQueue+0x74>)
 8004d88:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <prvCheckForValidListAndQueue+0x78>)
 8004d8a:	2110      	movs	r1, #16
 8004d8c:	200a      	movs	r0, #10
 8004d8e:	f7fe f953 	bl	8003038 <xQueueGenericCreateStatic>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d98:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	490b      	ldr	r1, [pc, #44]	; (8004dd4 <prvCheckForValidListAndQueue+0x7c>)
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fd6c 	bl	8003884 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dac:	f7fd ffea 	bl	8002d84 <vPortExitCritical>
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20004910 	.word	0x20004910
 8004dbc:	200048e0 	.word	0x200048e0
 8004dc0:	200048f4 	.word	0x200048f4
 8004dc4:	20004908 	.word	0x20004908
 8004dc8:	2000490c 	.word	0x2000490c
 8004dcc:	200049bc 	.word	0x200049bc
 8004dd0:	2000491c 	.word	0x2000491c
 8004dd4:	08004eb0 	.word	0x08004eb0

08004dd8 <__libc_init_array>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	4d0d      	ldr	r5, [pc, #52]	; (8004e10 <__libc_init_array+0x38>)
 8004ddc:	4c0d      	ldr	r4, [pc, #52]	; (8004e14 <__libc_init_array+0x3c>)
 8004dde:	1b64      	subs	r4, r4, r5
 8004de0:	10a4      	asrs	r4, r4, #2
 8004de2:	2600      	movs	r6, #0
 8004de4:	42a6      	cmp	r6, r4
 8004de6:	d109      	bne.n	8004dfc <__libc_init_array+0x24>
 8004de8:	4d0b      	ldr	r5, [pc, #44]	; (8004e18 <__libc_init_array+0x40>)
 8004dea:	4c0c      	ldr	r4, [pc, #48]	; (8004e1c <__libc_init_array+0x44>)
 8004dec:	f000 f82e 	bl	8004e4c <_init>
 8004df0:	1b64      	subs	r4, r4, r5
 8004df2:	10a4      	asrs	r4, r4, #2
 8004df4:	2600      	movs	r6, #0
 8004df6:	42a6      	cmp	r6, r4
 8004df8:	d105      	bne.n	8004e06 <__libc_init_array+0x2e>
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e00:	4798      	blx	r3
 8004e02:	3601      	adds	r6, #1
 8004e04:	e7ee      	b.n	8004de4 <__libc_init_array+0xc>
 8004e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0a:	4798      	blx	r3
 8004e0c:	3601      	adds	r6, #1
 8004e0e:	e7f2      	b.n	8004df6 <__libc_init_array+0x1e>
 8004e10:	08004f20 	.word	0x08004f20
 8004e14:	08004f20 	.word	0x08004f20
 8004e18:	08004f20 	.word	0x08004f20
 8004e1c:	08004f24 	.word	0x08004f24

08004e20 <memcpy>:
 8004e20:	440a      	add	r2, r1
 8004e22:	4291      	cmp	r1, r2
 8004e24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e28:	d100      	bne.n	8004e2c <memcpy+0xc>
 8004e2a:	4770      	bx	lr
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e36:	4291      	cmp	r1, r2
 8004e38:	d1f9      	bne.n	8004e2e <memcpy+0xe>
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <memset>:
 8004e3c:	4402      	add	r2, r0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d100      	bne.n	8004e46 <memset+0xa>
 8004e44:	4770      	bx	lr
 8004e46:	f803 1b01 	strb.w	r1, [r3], #1
 8004e4a:	e7f9      	b.n	8004e40 <memset+0x4>

08004e4c <_init>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr

08004e58 <_fini>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	bf00      	nop
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr
